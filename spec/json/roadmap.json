{
  "projects": 2,
  "id": 31,
  "name": "Rails Web Development v2",
  "level": "full",
  "slug": "rails-web-development-v2",
  "channel": null,
  "short_name": "Rails",
  "sections": [
    {
      "id": 120,
      "roadmap_id": 31,
      "name": "Foundation",
      "time_estimate": "160 Hours",
      "point_ratio": 0.3333333333333333,
      "description": "Learn the fundamentals of modern web development and programming with Ruby on Rails.",
      "icon": null,
      "visible_to_students": true,
      "checkpoints": [
        {
          "id": 1606,
          "name": "Introduction",
          "summary": "Welcome to Bloc: learn about the experience, your mentor, the curriculum, and expectations",
          "body": "<center>![journey](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-1.jpg)</center>\r\n\r\n<br>\r\n\r\nWelcome to Bloc! You're about to embark on an exciting, challenging, and rewarding journey. You have enrolled in an immersive program that will push you to your limits, but fear not, you will have an abundance of support! In this checkpoint we'll explain the structure and expectations of the Bloc experience. Know that at its core, Bloc is about **mentorship**. When you become frustrated, discouraged, or want to throw your laptop against a wall, remember that you have a dedicated mentor who invests in your success. Let's review Bloc's key features to make sure you start on a productive track.\r\n\r\n### Your Time Commitment\r\n\r\n<center>![time](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-2.jpg)</center>\r\n\r\n<br>\r\n\r\nBloc is an immersive experience, and requires a serious time commitment. Students spend approximately 500 hours on Bloc assignments and projects before graduating. You'll achieve the best results with disciplined time management; review the following time commitments, based on your pace:\r\n\r\n| Weekly Appointments | Weekly Time Commitment |\r\n|-----------------|------------------------|\r\n| 3 | 40 hours |\r\n| 2 | 25 hours |\r\n| 1 | 15 hours |\r\n\r\nWe can't stress enough the importance of a disciplined schedule. Committing 15, 25, or 40 hours a week is no easy task. You'll  need to sacrifice TV, parties, video games, or even vacations. Remember that you'll maximize your results if you stay truly immersed throughout Bloc. You _must_ put in the time, or you will not achieve your desired results; there's too much to learn and build.\r\n\r\n### Curriculum\r\n\r\n<center>![writers](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-3.jpg)</center>\r\n\r\n<br>\r\n\r\nBloc has an entire team dedicated to the craft of curriculum development. Our curriculum is unique; it's built specifically for students and mentors to promote effective learning and collaboration. The curriculum is your roadmap through the Bloc experience; it defines the direction, topics, and sequence you'll need to learn and achieve your goals.\r\n\r\nThe curriculum consists of two phases: Foundation and Projects. Each phase contains checkpoints with explicit assignments that you must complete to progress to the next checkpoint. The Foundation Phase teaches fundamental skills through exercises and tutorialized projects. The Project Phase leverages the fundamentals learned in Foundation, and provides detailed specifications for projects that you'll build with your mentor. You should discuss each checkpoint with your mentor and resolve any questions you have before progressing. After submitting a checkpoint assignment, your mentor will review your work and provide you with feedback.\r\n\r\nThe curriculum is constantly assessed and improved. The technologies you're learning move fast, and thus, we must keep the curriculum current. We update the curriculum frequently, and will notify you when there are major changes.\r\n\r\nWe illustrate some tips for successful learning in the following video. We recommend that you come back to read this checkpoint and watch this video throughout Bloc:\r\n\r\n<center>\r\n  <iframe src=\"https://fast.wistia.net/embed/iframe/u53k9sb8uy\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\r\n</center>\r\n\r\n### Mentor Appointments\r\n\r\n<center>![appointment](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-4.jpg)</center>\r\n\r\n<br>\r\n\r\nAppointments are live, one-on-one meetings with your mentor. Each appointment is usually 30 minutes in length, though the actual duration will depend on the topic and your mentor's judgement.\r\n\r\nAppointments are virtual, and have software requirements:\r\n\r\n- [Google Chrome Web Browser](https://www.google.com/intl/en/chrome/browser/) - We think Chrome is the best browser for developers and designers, and we recommend using it in general.\r\n- __A screensharing application__ like [TeamViewer](https://www.teamviewer.com/en/download/currentversion.aspx) or Screenhero. Message your mentor to determine their preference, and download the software.\r\n- [Google Hangouts](https://www.google.com/hangouts/) or [Skype](https://www.skype.com) for video chat.\r\n\r\nIf you and your mentor prepare, have an agenda, and arrive on time, an appointment will be a high-leverage learning experience. Do not lose respect for your appointments; productive appointments are essential for a great experience. An appointment's agenda is not limited, but often includes:\r\n\r\n- checkpoint review\r\n- assignment review\r\n- project review\r\n- pair programming\r\n- code review\r\n- design critique\r\n- debugging and troubleshooting\r\n- best practice technique sharing\r\n\r\nYour mentor will often lead the appointment, but you should come with a list of questions and issues.\r\n\r\n### Communication\r\n\r\n<center>![communication](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-5.jpg)</center>\r\n\r\nMuch of your communication in Bloc will be asynchronous. You'll write a message, submit an assignment, or ask a question, and your mentor will respond. The recommended way to communicate asynchronously is to use our [messages feature](https://www.bloc.io/message_threads). You'll also have the ability to submit checkpoint-specific messages at the bottom of each checkpoint. (You'll see this in action below, in this checkpoint.)\r\n\r\nTo speak with someone at Bloc who is not your mentor, you can email [Bloc Help](mailto:help@bloc.io) anytime. You will **always** have someone to speak with at Bloc, no matter what the issue is.\r\n\r\nYou will establish other means of communication with your mentor, based on your mutual preferences. We encourage you to use the Bloc messages feature as much as possible, but realize that other communication tools may sometimes be necessary. The following section lists some alternative communication tools.\r\n\r\n### Ecosystem\r\n\r\nBloc's ecosystem includes tools that make it easier to collaborate and get help when you need it. The ecosystem is always evolving, and you should explore its tools. Review the [Ecosystem resource](https://www.bloc.io/resources/ecosystem) and ask your mentor which tools they use.\r\n\r\n### Expectations\r\n\r\n<center>![mentor-apprentice](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-6.jpg)</center>\r\n\r\n<br>\r\n\r\nYour expectations must align with your mentor's to be successful in Bloc. It's important to understand what's expected of you, and what you should expect of your mentor.\r\n\r\n### Mentor Expectations\r\n\r\nMentors will:\r\n\r\n* Inspire and lead students.\r\n* Prepare for appointments and arrive on time.\r\n* Hold students accountable.\r\n* Respond to all questions and issues.\r\n* Provide feedback on submitted checkpoints and assignments.\r\n\r\n### Student Expectations\r\n\r\nStudents will:\r\n\r\n* Commit the requisite time to Bloc.\r\n* Trust their mentor.\r\n* Accept the assignments and projects provided by Bloc.\r\n* Prepare for appointments and arrive on time.\r\n* Communicate openly with their mentor.\r\n\r\n### Succeeding in Bloc and Beyond\r\n\r\n<center>![success](https://bloc-global-assets.s3.amazonaws.com/images-misc/intro-cp/IntroCP-7.jpg)</center>\r\n\r\n<br>\r\n\r\nMaintaining a healthy perspective on yourself and your work is crucial for getting a job, starting a company, building a product, or winning client work. Students who excel portray the following traits:\r\n\r\n* I am responsible for my own learning.\r\n* I embrace challenges.\r\n* I am focused and disciplined.\r\n* I share what I learn with the Bloc community.\r\n* I celebrate accomplishments.",
          "assignment": "Introduce yourself to your mentor by completing the following tasks:\r\n\r\n1. Upload a photo of yourself to your Bloc account.\r\n2. Complete your account and bio in Bloc.\r\n3. Briefly review [`Markdown`](http://guides.github.com/overviews/mastering-markdown/) syntax. You don't have to memorize all the syntax now, and you can certainly ask your mentor about common Markdown idioms. Try to get a feel for some of the basic syntax, like headings, links and code blocks.\r\n4. Send your mentor a Bloc message using some simple Markdown, and share something about yourself. For example, \"what inspired you to join Bloc?\" or \"what's the most valuable lesson you've learned in life?\".\r\n5. Find your mentor on Slack and send them a direct message. Also, introduce yourself to your course Slack channel.\r\n6. Write a list of goals in a message that you hope to achieve during Bloc. Discuss these goals with your mentor during your first meeting.",
          "roadmap_section_id": 120,
          "active_index": 1,
          "checkpoint_type": "normal",
          "position": 1,
          "points": 1,
          "ref": "4a9025af-2528-471a-bbeb-65a0e266b2f6|0"
        },
        {
          "id": 1614,
          "name": "Ruby: Introduction",
          "summary": "Ruby: the syntax, variables, and keywords",
          "body": "Rails is a web application framework built with the Ruby programming language. Before you learn how to build apps with Rails, it's crucial to have a strong understanding of the Ruby language. Even more important than learning Ruby is learning the basic principles of programming. We'll teach you foundational programming principles with Ruby, thus killing two birds with one stone.\n\nThe exercises in this checkpoint cover:\n\n* the basic principles of Ruby syntax,\n* how to use strings,\n* what variables are,\n* how to program mathematical operations,\n* the concept of nil, and\n* defining methods\n\nAs you learn how to program you'll be introduced to many new terms. Here are a few terms that you'll see throughout the Roadmap.\n\n* **Program** - a set of instructions that you give to a computer. Ruby is the language with which we'll write the instructions.\n* **[repl.it](http://repl.it/languages/Ruby)** - an online, interactive Ruby shell. It is a full-feature terminal emulator that lets you experiment with and execute Ruby code.\n* **Ruby Interpreter** - is responsible for compiling and running the Ruby code.\n\nThroughout the exercises you'll often want to \"print\" the results of your code to an output window. There are several ways to do this in Ruby. There is a command named `puts` that you can call before an object, like this:\n\n```ruby\nputs \"hello world\"\n```\n\nThe `puts` command (it's actually a **method**, but we'll cover that later) converts a value to a string (we'll define that below), and then prints it. There are some values that we don't want to convert to strings though, so `puts` won't work for us all the time. Instead, we'll use the `p` command. You can use `p` in the same manner as `puts`:\n\n```ruby\np \"hello world\"\n```\n\n> The difference is subtle, but `p` prints the true **value** of an object, rather than a string-ified version of the object. This will make more sense soon, but for the sake of simplicity, we'll use the `p` command throughout the exercises, as we'll want to see the **true values** of our code returned to the output window.\n\n\n### Strings, Variables, Math, and Methods\n\nIn the following exercises, we'll introduce you to several new programming topics: strings, variables, math operations, and methods. We'll explain those concepts at a high level first, and then practice the detailed concepts in the exercises.\n\n#### Strings\n\n\"String\" is the data type for words or phrases in Ruby and many other programming languages. Strings are delineated in Ruby using single or double quotes; the string is whatever is encapsulated in the quotation marks. The `\"hello world\"` in the examples above is a string, and could also be defined as such using single quotes: `'hello world'`.\n\n\n#### Variables\n\nAs in algebra, programming languages use variables to store and name values. In Ruby, a variable can store any value, and can be named any word or combination of words, with some exceptions we'll discuss later. In Ruby, it is conventional to name variables with lowercase letters joined by underscores:\n\n```ruby\nmy_variable_name = \"I am a string\"\np my_variable_name\n```\n\n> What do you expect would be output as a result of calling `p my_variable_name`?\n\nBecause Ruby is a \"dynamically typed\" language, we don't need to explicitly state that `my_variable` is being assigned a string. We can assign whatever value we desire to any variable of any name.\n\n#### Math\n\nRuby supports all basic mathematical operations. That means we can do things like this:\n\n```ruby\nfirst_num = 4\nsecond_num = 6\np first_num + second_num\np first_num - second_num\np first_num * second_num\n```\n\n> What do you expect to be printed as a result of these operations?\n\nThe modulo operator – `%` – returns the integer remainder of a quotient. For example, when dividing 5 into 30, the remainder is 0 because 5 divides evenly into 30 six times. Division does not always work out evenly though. When dividing 8 into 30 the outcome is 3.75. The remainder of this division is calculated by multiplying .75 by 8 which results in an integer remainder of 6.\n\n```ruby\np 30 % 5\n=> 0\np 30 % 8\n=> 6\np 8 % 30\n=> 8\n```\nLearn more about [modulo here](http://en.wikipedia.org/wiki/Modulo_operation).\n\n#### Methods\n\nMethods, which are often called \"functions\" in other languages, are very similar to mathematical functions. They are given inputs (\"arguments\"), perform a set of actions on/with those inputs, and then \"return\" something at the end. Along the way, a method can have many \"side effects\" — changes that are not explicitly returned but happen as a result of calling the method. We'll cover method syntax in the exercises.\n\nBefore you start the exercises below, read our [resource on writing at Bloc](https://www.bloc.io/resources/learning-by-writing). Then send your mentor a message in the discussion tab of this checkpoint.\n\n- In just a few sentences, the message should describe a toaster (the kitchen appliance) in the terminology of a programming method.\n  - What is/are its expected argument(s)?\n  - What does it return?\n  - What are its side effects?\n  - What would happen if you fed it an unexpected argument, like a fork?\n\nOnce you've sent your message, try the exercises linked to below. Take notes as you complete the exercises. You can use [Gists](https://gist.github.com/) to take notes and share them with your mentor. Gists are a great place to take notes when you are programming because they allow you to easily format, search, and share information with others. You can also keep them private if you prefer.",
          "assignment": "### Solution Walk-Throughs\n\n__Do not watch these videos until after you've attempted your own solutions.__ If you struggle to complete any exercises, submit your best effort to your mentor _before watching a solution walk-through_. Submit your answers even if some tests don't pass, as it's important for your mentor to understand your thought process. Discuss difficult exercises with your mentor.\n\nThere are many possible solutions to the exercises. A walk-through should provide insight into the thought process of _one possible solution_ per exercise. If your solution is different yet passes all the tests, do not change your solution to match what is seen in the video. Instead, discuss your thought process with your mentor.\n\n1. <a href=\"//fast.wistia.net/embed/iframe/fohmmwhbsy?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Strings Solutions</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n2. <a href=\"//fast.wistia.net/embed/iframe/p4bqta27p7?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Booleans, Symbols, and Variables Solutions</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n3. <a href=\"//fast.wistia.net/embed/iframe/pf3718df7f?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Math Operations Solutions</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>",
          "roadmap_section_id": 120,
          "active_index": 2,
          "checkpoint_type": "normal",
          "position": 2,
          "points": 1,
          "ref": "1f398684-d6b5-4271-89d3-dceae69fd30b|0"
        },
        {
          "id": 1615,
          "name": "Ruby: Reading RSpec Tests",
          "summary": "Reading RSpec Tests: reading RSpec test output",
          "body": "### Ensuring Your Code Behaves Properly\n\n> This checkpoint shows how to **read** RSpec tests. We'll learn much more about RSpec and how to **write** tests later.\n\nA method can return an object without error but still not do what it was meant to. You have to **test** your code to ensure proper behavior. For example, implement an incorrect `add` method by typing:\n\n```ruby\ndef add(a,b)\n  a-b\nend\n\np add(5,4)\n```\n\n> Since you're not currently on an exercise page, enter the code examples using [repl.it](http://repl.it/languages/Ruby).\n\nThe `add` method will return a valid number, but not the expected result. Programmers need to test their code to make sure that it does what it was meant to do.\n\nYou could run a simple test by using a comparison operator. If the comparison returns `true` you'd know that the method accomplished its mission.\n\n```ruby\ndef hello\n  \"hello world\"\nend\n\np hello == \"hello world\"\n```\n\nThis is a very specific test though, and not scalable for code enhancements. There are much more flexible and dynamic ways to test code using test frameworks. One of the most popular frameworks in the Ruby on Rails community, and Bloc's choice, is [RSpec](http://rspec.info/).\n\n\n### RSpec in a Nutshell\n\nRSpec, like most testing frameworks, runs your code in particular conditions and with particular arguments. It sets _expectations_ for the outcome of this process, and the test passes if those expectations are met.\n\n> This basic concept is important to understand. A spec is just running your code and testing what happens.\n\nLet's explore a method test and how it might lead us to write a method. For this example, consider `greet`, which will take two arguments, a person's first and last name, and then return a personalized \"hello\" directed to (the individual with) that name. As a concrete example, if we call `greet` with the arguments `(\"Annie\", \"Oakley\")`, it will return `\"Hello Annie Oakley.\"`.\n\nLet's say we've already written this method. We could \"test\" our method by using pure Ruby to assert that the return of our method equals what we want it to:\n\n```ruby\ngreeting = greet(\"Annie\", \"Oakley\")\ngreeting == \"Hello Annie Oakley.\"\n#=> If our method behaves as specified, this would return true. If not, it would return false.\n```\n\nIn RSpec, the core of the test looks very similar:\n\n```ruby\n    greeting = greet(\"Annie\", \"Oakley\")\n    expect(greeting).to eq(\"Hello Annie Oakley.\")\n```\n\nIn RSpec, rather than returning `true` or `false`, this test will \"pass\" or \"fail\" depending on whether the expectation for the method is met. RSpec syntax, however, is a _little_ bit more complicated than the above. Consider the following example:\n\n```ruby\ndescribe \"greet\" do\n  it \"says hello to someone\" do\n    greeting = greet(\"Annie\", \"Oakley\")\n    expect(greeting).to eq(\"Hello Annie Oakley.\")\n  end\nend\n```\n\nWhile the \"meat\" of the test remains unchanged, we've now wrapped these lines in `describe` and `it` sections.\n\n> The strings following `describe` and `it` are for human consumption. You can put whatever you want there — though it should actually describe the method and its behavior. Changing the contents of those strings will _not_ change the test behavior.\n\nBecause the strings immediately following `describe` and `it` are for readers, not the computer, we've used these strings to explain what we're testing. Following a typical RSpec pattern, we've made the text to the right of `describe` (`\"greet\"`) a description of the method we will be testing. The string `\"says hello to someone\"` following `it` is similarly explanatory, and gives a basic human-readable description of the behavior we intend to test.\n\nInside the `describe` and `it`, we write the actual test. It runs our `greet` method with two arguments and sets an expectation about what that method will return. Specifically, we use RSpec's `expect`, `to`, and `eq` methods to assert that we expect the return value of calling `greet` with the arguments \"Annie\" and \"Oakley\" to equal \"Hello Annie Oakley.\" If that expectation is met, the test will pass. If not, it will fail.\n\nLet's walk through this test again. You don't need to know just yet _how_ it's working, but you should be able to understand _what_ it's doing:\n\n- We declare what we're testing (the `greet` method), in between `describe` and `do`.\n- We declare our expected behavior in English (for humans), in between the `it` and the `do`.\n- We write the actual _test_, assigning the result of calling `greet(\"Annie\", \"Oakley\")` to a `greeting` variable, then asserting that we expect the greeting variable to equal \"Hello Annie Oakley.\" If that expectation is fulfilled, the test will pass; otherwise, it will fail.\n- We \"close\" the `describe` and `it` \"blocks\" with the keyword `end`.\n\n> We'll explain blocks (and the `do` and `end` syntax) later. For now, just note that each `do` here is \"closed\" with an `end`.\n\nTo make this test pass, you would implement the `greet` method as it's written below:\n\n```ruby\ndef greet(first, last)\n  \"Hello #{first} #{last}.\"\nend\n```\n\n> Why didn't we use `p` here? The `p` method would print the value of the string; we just want to return it. RSpec assesses the return value, stored in the `greeting` variable, rather than watching the \"side effect\" of printing.\n\n\n#### Test-Driven Development\n\nWhen tests are written to specify future code's behavior, it's called \"Test-Driven Development\", or TDD. Let's try some TDD one more time before launching into the exercises. Read this test:\n\n```ruby\ndescribe \"multiply\" do\n  it \"multiplies its two arguments\" do\n    product = multiply(5, 3)\n    expect(product).to eq(15)\n  end\nend\n```\n\n> How would you write this `multiply` method to pass the above test? How many arguments would it take? What would it do with those arguments?\n\nThis test sets expectations about the `multiply` method. Specifically, it asserts that calling `multiply` with the arguments `3` and `5` will return the value `15`. Let's take the easiest path towards fulfilling this spec by writing the below method:\n\n```ruby\ndef multiply(x, y)\n  15\nend\n```\n\n> Why are we again returning the value, rather than using `p` to print it?\n\nBut something is wrong. We've ignored the arguments passed in, instead \"hardcoding\" the value to be returned. This narrow implementation passes the above spec, but will break the instant we test it with different values. If our test gives the `multiply` method different numbers, as it does below, the above implementation will fail:\n\n```ruby\ndescribe \"multiply\" do\n  it \"multiplies its two arguments\" do\n    product = multiply(4, 3)\n    expect(product).to eq(12)\n  end\nend\n```\n\n> How do we make our implementation more flexible?\n\nAs you can see above, narrow implementations of methods can pass single specific tests. Because of this, the specs in the coming exercises will test your code from a variety of angles. Read the specs after the exercise description, to make sure you understand exactly what is expected of your code, and what is needed to pass. These specs will __run your code__ with a variety of arguments, making sure it behaves as asserted.",
          "assignment": "### Solution Walk-Throughs\n\n__Do not watch these videos until after you've attempted your own solutions.__ If you struggle to complete this exercise, submit your best effort to your mentor _before watching a solution walk-through_. Submit your answer even if some tests don't pass, as it's important for your mentor to understand your thought process. Discuss difficult exercises with your mentor.\n\nThere are many possible solutions to the exercises. A walk-through is meant to provide insight into the thought process of _one possible solution_ per exercise. If your solution is different yet passes all the tests, do not change your solution to match what is seen in the video. Instead, discuss your thought process with your mentor.\n\n<a href=\"//fast.wistia.net/embed/iframe/ogphrusr22?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">A Tested Method Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>",
          "roadmap_section_id": 120,
          "active_index": 3,
          "checkpoint_type": "normal",
          "position": 3,
          "points": 1,
          "ref": "f38f4ffb-c36f-486e-a221-48b0217c3ae9|0"
        },
        {
          "id": 1616,
          "name": "Ruby: Debugging Code",
          "summary": "Debugging Code: writing code by reading and following errors",
          "body": "### Even the Best Programmers Get Bitten\n\nNobody writes perfect code. It is important to be able to read errors that the interpreter provides and to know where to look for the solution.\n\n> Some terminology: When something goes wrong in code, the interpreter will **\"raise\"** an **\"error\"**. If you predict that error ahead of time, you can determine how that error is **\"handled\"**, by **\"rescuing\"** it and then specifying behavior to follow.\n\nWhen a program doesn't run as expected, consider the following process:\n\n1. Read the error message carefully. Errors raised by the Ruby interpreter are generally descriptive and will point you in the right direction to fix the error.\n2. While the error message raised may tell you the line where the error occurred, the solution may sometimes involve changing multiple lines of code. In addition to reading the line of code the error message references, read the entire method to ensure you have the proper context.\n\n\n### Error Types\n\nIf you defined the `hello` method as:\n\n```ruby\ndef hello(name)\n  \"Hello #{name}\"\nend\n```\n\n...and then tried to call the `hello` method like this:\n\n```ruby\nhello(\"George\", \"Washington\")\n```\n\nYou'd receive an error message stating:\n\n```ruby\nArgumentError: wrong number of arguments (2 for 1)\n```\n\nIn this example, the error message told you exactly what the problem was. The message is explaining that the method was passed two arguments instead of one. If you call the method in a Ruby interpreter, a line number is provided. After receiving the message you can read the line of code to see what method was called. You can then assess the method's definition and fix the arguments.\n\n\n### Debugging Thought Process\n\nSome methods behave incorrectly without raising errors. Try another example by writing a method that takes a birthday date as an argument. The method should return the day of the week that the birthday will fall on in the coming year.\n\n```ruby\nrequire 'date' # Makes Ruby's date library available to our code\n\ndef next_birthday(birthday)\n  a_year_off = birthday.next_year\n  a_year_off.strftime(\"%D\")\nend\n\nnext_birthday(Date.new(2013, 6, 1))\n```\n\nThis method returns: `\"06/01/14\"`, so it returned the next year's date, the first of June 2014, but not the day of the week. Where did we go wrong? Break this method down:\n\n1. We defined a `next_birthday` method which takes one argument - `birthday`.\n2. Within the method, we assigned the value of `birthday.next_year` to a variable called `a_year_off`.\n3. We called `strftime(\"%D\")` on `a_year_off`.\n\nYou might be tempted to read about `next_year` to figure out what's going wrong, but first, let's narrow down the problem.\n\nThe method finds the right date, but returns a string representing the whole date, not the word representing the month. So we can actually assume that `next_year` is working correctly, and our problem is likely with the _next_ line. The [docs for `next_year`](http://ruby-doc.org/stdlib-2.2.2/libdoc/date/rdoc/Date.html#method-i-next_year) confirm this. We're assigning the correct value to `a_year_off`, but failing to convert that value to the desired string.\n\nSo we've narrowed the problem down to the `strftime` method.\n\n> It's important to narrow problems down logically before digging too deep.\n\nNow that we're relatively confident what's wrong, let's review the [Ruby Docs on the `strftime` method](http://ruby-doc.org/stdlib-2.0/libdoc/date/rdoc/Date.html#method-i-strftime), which we suspect we're using incorrectly. The method takes a \"format string\" argument and formats the time it is called on (here `a_year_off`) using that string.\n\nLook through the docs for the \"%D\" format string; it formats time exactly as we received it.\n\n> What output would we expect if we called `a_year_off.strftime('%Y')`?\n\nWe want the day of the week, which means we need to pass in a different formatting string. Which string do we need?\n\nThis example introduced a new object: `Date`. Mostly, however, it introduced a method of debugging: we use the information we've received to create a hypothesis (\"We're using `strftime` incorrectly on the right date.\") and then test it. This is how you should debug your code. The more you practice, the faster you will read code and figure out where to implement a fix.",
          "assignment": "### Solution Walk-Throughs\n\n__Do not watch these videos until after you've attempted your own solutions.__ If you struggle to complete these exercises, submit your best effort to your mentor _before watching a solution walk-through_. Submit your answers even if some tests don't pass, as it's important for your mentor to understand your thought process. Discuss difficult exercises with your mentor.\n\nThere are many possible solutions to the exercises. A walk-through is meant to provide insight into the thought process of _one possible solution_ per exercise. If your solution is different yet passes all the tests, do not change your solution to match what is seen in the video. Instead, discuss your thought process with your mentor.\n\n1. <a href=\"//fast.wistia.net/embed/iframe/9of1weys2v?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">No Method Error Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n2. <a href=\"//fast.wistia.net/embed/iframe/2be7ydbqzt?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Wrong Number of Arguments Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n3. <a href=\"//fast.wistia.net/embed/iframe/8jj8r055pi?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">No Name Error Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n4. <a href=\"//fast.wistia.net/embed/iframe/klacxjcuvr?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Type Error Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n5. <a href=\"//fast.wistia.net/embed/iframe/plwvkzdtpq?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Unexpected End Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>",
          "roadmap_section_id": 120,
          "active_index": 4,
          "checkpoint_type": "normal",
          "position": 4,
          "points": 1,
          "ref": "c4e62f7f-0589-4e54-9043-4043d127c2cd|0"
        },
        {
          "id": 1617,
          "name": "Ruby: Conditionals",
          "summary": "Conditionals: use logic to determine the flow and operations of a program",
          "body": "Programs often need to do different things based on conditional logic. One way to evaluate conditions and control the program is by using `if` statements. `if` statements consider a given condition, and then do something based on the result of the condition. For example, consider the following statement:\n\n```md\n\"If Mary has more than $5, then give her an apple.\"\n```\n\nLet's write a program for this behavior: `can_buy_apple_with?`:\n\n```ruby\n# define the method\ndef can_buy_apple_with?(money)\n  if money > 5\n    \"have an apple\"\n  end\nend\n\n# call the method, passing in a 7\ncan_buy_apple_with?(7)\n#=> \"have an apple\"\n\n# call the method, passing in a 5\ncan_buy_apple_with?(5)\n#=> nil\n```\n\nRemember that in Ruby, the last evaluated line of a method is returned from the method by default. In the first example above, where we call the method and pass a `7`, the last evaluated line is `\"have an apple\"`. This means that the `\"have an apple\"` string would be returned if `money` is `7` (i.e. if the `if` statement evaluates to `true`).\n\nWhen we pass a `5` to the method in the second example, the `if` condition does not evaluate to `true`, so the method will return `nil`. It returns `nil` because we are not doing anything when `money` is not greater than `5`.\n\n> Always use `end` to close an `if` statement.\n\n### Else\n\nIf this method was in a real program, returning `nil` if there's not enough money to buy an apple would not create a great user experience. We'd want to tell the user something if they don't have enough money to buy an apple. In the example below, let's offer the user an alternative:\n\n```ruby\ndef can_buy_apple_with?(money)\n  if money > 5\n    \"have an apple\"\n  else\n    \"sorry, how about some gum?\"\n  end\nend\n\n# call the method, passing in a 7\ncan_buy_apple_with?(7)\n#=> \"have an apple\"\n\n# call the method, passing in a 5\ncan_buy_apple_with?(5)\n#=> \"sorry, how about some gum?\"\n```\n\nIn the example above we used an `else` to handle the condition where `money` is not greater than `5`. We didn't need to specify a condition for `else` because it will handle the opposite of the `if`. In other words, when the `if` statement evaluates to `false`, the `else` branch will be executed. In plain English, you could describe the program:\n\n```md\n\"If you have more than $5, you can have an apple; if not you may have some gum.\"\n```\n\n> We still need an `end` to close the `if` statement, but it's placed after the `else` branch.\n\nIt's a \"best practice\" to define an `else` condition for most `if` statements, because an `if` _always implies an `else`_. If we don't specify what happens if the `if` isn't true, a default of `nil` is returned, as in the first example.\n\n### Else If\n\nWe can expand the logic even further:\n\n```ruby\ndef can_buy_apple_with?(money)\n  if money > 1_000\n    \"have an Apple computer\"\n  elsif money > 5\n    \"have an apple\"\n  elsif money == 5\n    \"have some gum\"\n  else\n    \"get out of my store\"\n  end\nend\n\n# call the method, passing in a 2_000\ncan_buy_apple_with?(2_000)\n#=> \"have an Apple computer\"\n\n# call the method, passing in a 6\ncan_buy_apple_with?(6)\n#=> \"have an apple\"\n\n# call the method, passing in a 5\ncan_buy_apple_with?(5)\n#=> \"have some gum\"\n\n# call the method, passing in a 4\ncan_buy_apple_with?(4)\n#=> \"get out of my store\"\n```\n\nUsing `elsif` (there's no second \"e\" in \"elsif\") provides even more options for our program. We still use an `else` statement to handle any condition that doesn't evaluate to `true` in the `if` and `elsif` statements.\n\n### `unless` and `!`\n\n`unless` is the opposite of `if`. Use it in simple cases where it makes the conditional easier to read. If you are dealing with a more complex statement, it is better to use a `!` (called a \"bang\" in programming) to flip the case of the conditional. Consider the following example:\n\n```ruby\ndef can_buy_apple_with?(money)\n  unless money < 1_000\n    \"have an Apple computer\"\n  else\n    \"have an apple\"\n  end\nend\n```\n\nAs you can see, using `unless` in the example above makes the code a little hard to read. You could refactor using `if` of course, but for the sake of another example you could also use the `!`, as mentioned above. The \"bang\" basically reads as \"not\". For example:\n\n```ruby\ndef can_buy_apple_with?(money)\n  if !(money < 1_000)\n    \"have an Apple computer\"\n  else\n    \"have an apple\"\n  end\nend\n```\n\nYou could read the `if` statement above as:\n\n```md\n\"If money is not less than 1,000, have an apple computer...\"\n```\n\n> Using a simple `if` and flipping the conditional logic (`if money > 1_000`) is simpler overall, but it's important to understand your options.\n\n\n### One Line Conditionals\n\nYou can also use `if` and `unless` at the end of one line statements:\n\n```ruby\ngets_discount = true\nprice *= 0.8 if gets_discount\n\nskip_tax = true\nprice += price * 0.1 unless skip_tax\n```\n\nIf `gets_discount` is true (which it is), then you'll discount the price by 20%. Unless `skip_tax` is true, you'll add a 10% tax to the price.\n\nOne-line conditionals are helpful, but they can be less clear than their multi-line alternatives.\n\n> When in doubt, favor clarity over brevity.\n\nClear code is easier to maintain, share, and rewrite. As you will see, it's fun to cram a lot of functionality into a small space — but try to avoid sacrificing clarity for space.\n\n## Proper Indentation\n\nProper indentation becomes __even more important__ when handling conditional logic. Before trying the exercises for this checkpoint, read the following code snippet and rewrite it with proper indentation in a message to your mentor.\n\n```ruby\nnumber = rand(25) - 10\nif number < 0\nputs \"The number is negative.\"\nelsif number < 10\nif number <= 5\nputs \"The number is between 0 and 5, inclusive.\"\nelse\nputs \"The number is between 5 and 10, exclusive.\"\nend\nelse\nputs \"The number is greater than or equal to 10.\"\nend\n```\n\nCompare your solution to the solution below. The indented version is easier to follow than the unindented version.\n\n```ruby\nnumber = rand(25) - 10\nif number < 0\n  puts \"The number is negative.\"\nelsif number < 10\n  if number <= 5\n    puts \"The number is between 0 and 5, inclusive.\"\n  else\n    puts \"The number is between 5 and 10, exclusive.\"\n  end\nelse\n  puts \"The number is greater than or equal to 10.\"\nend\n```",
          "assignment": "### Solution Walk-Throughs\n\n__Do not watch these videos until after you've attempted your own solutions.__ If you struggle to complete these exercises, submit your best effort to your mentor _before watching a solution walk-through_. Submit your answers even if some tests don't pass, as it's important for your mentor to understand your thought process. Discuss difficult exercises with your mentor.\n\nThere are many possible solutions to the exercises. A walk-through is meant to provide insight into the thought process of _one possible solution_ per exercise. If your solution is different yet passes all the tests, do not change your solution to match what is seen in the video. Instead, discuss your thought process with your mentor.\n\n1. <a href=\"//fast.wistia.net/embed/iframe/g23lucs20s?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">If Statements Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n2. <a href=\"//fast.wistia.net/embed/iframe/m4gp2trsit?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">And &#8725; Or Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n3. <a href=\"//fast.wistia.net/embed/iframe/mhmeobqhb7?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Booleans Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>",
          "roadmap_section_id": 120,
          "active_index": 5,
          "checkpoint_type": "normal",
          "position": 5,
          "points": 1,
          "ref": "fd1822a2-a726-4e4e-b90a-d9587f073eb1|0"
        },
        {
          "id": 1618,
          "name": "Ruby: Arrays",
          "summary": "Arrays: store information in numbered locations",
          "body": "<!-- { ids:[1618], name:'Ruby: Arrays', summary:'Arrays: store information in numbered locations' } -->\n### A Collection of Objects\n\nStrings and numbers represent _singular_ objects, but you'll often work with _collections_ of objects in programming. Ruby, like most programming languages, provides an object called `Array`. An array is a collection of objects (like `String`s and `Integer`s) in a specific order.\n\n![Array](https://bloc-global-assets.s3.amazonaws.com/screencaps/array.png)\n\nEach element in an array has a position (or \"index\") within it. To retreive this element, use the same syntax that specifies a character in a string: `[]`. Like string indexes, the index count for an array starts at `0`. Consider the following example:\n\n```ruby\nfruits = [\"apple\", \"banana\", \"orange\"]\n\nfruits[0]\n#=> \"apple\"\n\nfruits[2]\n#=> \"orange\"\n```\n\n> Everything after a `#` in Ruby is a comment. Here, we're writing `#=> \"apple\"` to show what that line above the comment should return.\n\nTo get the last element in the `fruits` array, we could just type `fruits[2]`. But what if we didn't know the length of the array? Ruby provides some simple methods for accessing specific elements in an array. We can use the `last` method to solve this problem:\n\n```ruby\nfruits = [\"apple\", \"banana\", \"orange\"]\n\nfruits.last\n#=> \"orange\"\n\nfruits.first\n#=> \"apple\"\n```\n\nIn the above example, we declared a complete array:\n\n```ruby\nfruits = [\"apple\", \"banana\", \"orange\"]\n```\n\nBut we can also assign elements to an array one at a time:\n\n```ruby\nfruits = [\"apple\"]\nfruits[1] = \"banana\"\nfruits[2] = \"orange\"\n\nfruits\n#=> [\"apple\", \"banana\", \"orange\"]\n```\n\n> What happens if we add an element to a location greater than the length of the array? Try it using [repl.it](http://repl.it/languages/Ruby).\n\nUse the \"shovel\" operator (`<<`) to add an element to the end of an array.\n\n> The `<<` is overloaded and functions as a [bitwise operator]https://calleerlandsson.com/2014/02/06/rubys-bitwise-operators/ when used on an integer.\n\n```ruby\nnumbers = [1]\nnumbers << 2\n\nnumbers\n#=> [1,2]\n```\n\n> Adding an element to the end of an array is called *appending*.\n\nArrays can mix object types. For example, an array can hold a combination of strings, numbers and even other arrays:\n\n```ruby\nmulti_object_collection = []\nmulti_object_collection[0] = \"apple\"\nmulti_object_collection[1] = 17\nmulti_object_collection << [\"hello\", 3]\n\nmulti_object_collection\n#=> [\"apple\", 17, [\"hello\", 3]]\n```\n\n### `%w` syntax\n\nRuby offers many shortcuts. As a developer, you're likely to see arrays created using Ruby's [Percent Strings](http://ruby-doc.org/core-2.0.0/doc/syntax/literals_rdoc.html#label-Percent+Strings) syntax. Percent Strings like `%w` are followed with opening and closing symbols (usually `{}`, but others like `[]` or `!!` work). Strings inside are delimited with a space:\n\n```ruby\nfruits = %w{apple banana orange}\n#=> [\"apple\", \"banana\", \"orange\"]\n```\n\nThis syntax creates only strings (not numbers or other types) inside the array:\n\n```ruby\nintegers = [1, 2, 3]\n#=> [1, 2, 3]\nstrings = [\"1\", \"2\", \"3\"]\n#=> [\"1\", \"2\", \"3\"]\nintegers_or_strings = %w{1 2 3}\n#=> [\"1\", \"2\", \"3\"]\n```\n\n> The quotes around the numbers in the output indicate the values are strings.\n\nCapitalization matters. Remember *string interpolation* from the Ruby Syntax checkpoint? When capitalized, `%W` processes interpolation:\n\n```ruby\n%w{10 20 #{10+20}}\n#=> [\"10\", \"20\", \"\\#{10+20}\"]\n%W{10 20 #{10+20}}\n#=> [\"10\", \"20\", \"30\"]\n```\n\n### Negative Indexes\n\nIndexes, like `0` and `1` in the examples above, retrieve elements from an array going left to right. Ruby also supports negative indexes, which retrieve elements from right to left. For example:\n\n```ruby\nfruits = [\"apple\", \"banana\", \"orange\"]\n\nfruits[-1]\n#=> \"orange\"\n\nfruits[-2]\n#=> \"banana\"\n\nfruits[-3]\n#=> \"apple\"\n```\n\n> When using negative indexes, counting starts at `-1`, rather than `0`.\n\nWhat are two other ways to access the element in location `[-1]`?\n\n### Ranges\n\nA `Range` specifies a sequential set of `String`s or `Integer`s. A range looks like this:\n\n```ruby\n(1..5)\n(\"a\"..\"e\")\n```\n\nWe can create an `Array` from a `Range` using the `to_a` (\"to array\") method:\n\n```ruby\n(1..5).to_a\n#=> [1, 2, 3, 4, 5]\n\n(\"a\"..\"e\").to_a\n#=> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n\n> The parentheses around the range are optional but important for order of operations. What would happen if we removed the parentheses from `(1..5).to_a`? Use [repl.it](http://repl.it/languages/Ruby), and see if you can understand the error message.\n\nWe can also index multiple `Array` elements with a `Range`:\n\n```ruby\nfictional_cats = ['Cheshire Cat', 'Garfield', 'Catwoman', 'The Cat in the Hat']\n\nfictional_cats[1..3]\n#=> [\"Garfield\", \"Catwoman\", \"The Cat in the Hat\"]\n```\n\nWe can also use negative indexes in ranges:\n\n```ruby\nfictional_cats = ['Cheshire Cat', 'Garfield', 'Catwoman', 'The Cat in the Hat']\n\nfictional_cats[-2..-1]\n#=> [\"Catwoman\", \"The Cat in the Hat\"]\n```",
          "assignment": "### Solution Walk-Throughs\n\n__Do not watch these videos until after you've attempted your own solutions.__ If you struggle to complete these exercises, submit your best effort to your mentor _before watching a solution walk-through_. Submit your answers even if some tests don't pass, as it's important for your mentor to understand your thought process. Discuss difficult exercises with your mentor.\n\nThere are many possible solutions to the exercises. A walk-through is meant to provide insight into the thought process of _one possible solution_ per exercise. If your solution is different yet passes all the tests, do not change your solution to match what is seen in the video. Instead, discuss your thought process with your mentor.\n\n1. <a href=\"//fast.wistia.net/embed/iframe/8dxuh45zh8?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Array Definition Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n2. <a href=\"//fast.wistia.net/embed/iframe/1rcvtmiji5?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Array Methods Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n3. <a href=\"//fast.wistia.net/embed/iframe/e9wy57g8xy?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Grocery List Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>",
          "roadmap_section_id": 120,
          "active_index": 6,
          "checkpoint_type": "normal",
          "position": 6,
          "points": 1,
          "ref": "7bc81dc1-c7ed-4cd1-bcb7-f09d96ea2d5f|0"
        },
        {
          "id": 1619,
          "name": "Ruby: Intro to Classes 1",
          "summary": "Intro to Classes 1: create simple Ruby objects",
          "body": "### The Blueprint\n\nRuby is called an *object-oriented* (OO) programming language. In an OO language, objects communicate with each other via messages. That is, objects have defined behavior, and when we want an object to perform one of its associated actions, we send it a \"message\" asking it to do so. Here's an example:\n\n```ruby\nnumbers = [1,2,3]\nnumbers.length\n#=> 3\n```\n\nIn the code above, we're declaring a variable named `numbers` and setting it equal to an array consisting of 1, 2 and 3. `numbers` is an object. On the next line, we send `numbers` a message: `length`. This message is a question to which the object responds, if it knows how.\n\n> A \"method\" is the set of instructions on an object called in response to a message this object receives. The method then \"responds\" with its return value.\n\nConsider real-world objects. Dogs, for instance, can be considered objects which respond to `bark` and `sit`, but not `converse`. (Well, _most_ dogs.)\n\nWhere are an object's \"methods\" stored? That's where classes come in. In our first example above, the `numbers` object came from the `Array` class. Classes are blueprints that describe objects, objects are created from classes.\n\nConsider the following arrays:\n\n```ruby\nnumbers = [1,2,3]\nnames   = [\"Arya\", \"Sansa\"]\n```\n\nThe `numbers` and `names` arrays are different objects, but they are created from the same blueprint, `Array`. While they have different contents, they share many of the same abilities. For example, they can both respond to a `length` message:\n\n```ruby\nnumbers = [1,2,3]\nnumbers.length\n#=> 3\n\nnames   = [\"Arya\", \"Sansa\"]\nnames.length\n#=> 2\n```\n\n### Class Instances\n\nThe `numbers` and `names` arrays are objects, and they are also **instances** of the `Array` class. In this section, let's focus on the concept of **instances**, rather than the more generic term of object.\n\nHere is a simple example of a class named `Person`. Let's define a `Person` class and then create an instance of it named `arya_stark`:\n\n```ruby\nclass Person\nend\n\narya_stark = Person.new\n```\n\n> Class names in Ruby always start with a capital letter and are [CamelCased](https://en.wikipedia.org/wiki/CamelCase).\n\nAn instance is a unique manifestation of a class. For example, `arya_stark` is a type of `Person`, and `arya_stark` is therefore unique. There are other people (i.e. instances of `Person`) that could be created from the `Person` class, but there's only one `arya_stark`.\n\nThat's not to say there couldn't be another instance of `Person` with the same name, just as there are surely multiple people named Arya Stark in the world. The important thing is that each instance is unique. For example:\n\n```ruby\nclass Person\nend\n\narya_stark = Person.new\np arya_stark\n#=> #<Person:0x104375690>\n\narya_stark = Person.new\np arya_stark\n#=> #<Person:0x104375618>\n```\n\n> The object ID (`#<Person:0x....`) is different each time we create a new `Person` using `Person.new`. That's because each instance of the `Person` class is unique.\n\n### Instance Methods\n\nWhen we have an instance of the `Person` class, we can call **instance methods** on this instance. For example, `eat` and `sleep` might be methods we could call on a `Person` instance. Let's define an instance method on our `Person` class, and call it on an individual person instance:\n\n```ruby\nclass Person\n  def eat\n    \"nom nom nom\"\n  end\nend\n\narya_stark = Person.new\narya_stark.eat\n#=> \"nom nom nom\"\n\nsansa_stark = Person.new\nsansa_stark.eat\n#=> \"nom nom nom\"\n```\n\nWhen an instance of `Person` receives the `eat` message, the `eat` _method_ returns the answer. Because the `eat` method is simple, its instructions are the same regardless of the instance. That is, it instructs every instance that receives it to say, \"nom nom nom.\"\n\n\n### Attributes and Instance Variables\n\nAn instance of the `Person` class can do things like `eat` and `sleep` using instance methods, but it can also have attributes. For example, an instance of the `Person` class might have a `name`. The `name` of a person would therefore be an attribute of a `Person` instance. Consider the following example:\n\n```ruby\nclass Person\n  def name=(full_name)\n    @full_name = full_name\n  end\n\n  def name\n    @full_name\n  end\nend\n\n\nfirst_lady = Person.new\nfirst_lady.name=(\"Michelle Obama\")\np \"My name is #{first_lady.name}\"\n#=> \"My name is Michelle Obama\"\n\npresidential_candidate = Person.new\npresidential_candidate.name=(\"Hillary Clinton\")\np \"My name is #{presidential_candidate.name}\"\n#=> \"My name is Hillary Clinton\"\n```\n\nThere's a lot happening above, so let's explore each step. First, we're declaring the `Person` class. The first method we define is named `name=`:\n\n```ruby\nclass Person\n  def name=(full_name)\n    @full_name = full_name\n  end\n  #...\n```\n\nThe `name=` method is called a **setter method**. Its sole purpose is to **set** an attribute. The attribute we're setting is the name of the person, and it's stored using an **instance variable**. We named the instance variable `@full_name` and set it to the `full_name` argument being passed to the `name=` method. In English we could say, \"the name method sets an instance variable called full name.\"\n\nWe use `=` in the method name. This is not strictly necessary, but it is a common Ruby convention for setter methods. It makes the method more idiomatic. For example:\n\n```ruby\nname=(\"Michelle\")\n\n# or without parentheses\n\nname= \"Michelle\"\n\n# Ruby even allows us to add a space before =\n\nname = \"Michelle\"\n```\n\n> In all three cases, the method is `name=`, and `=` is part of that name: we are not assigning a value to a local variable `name`, we are calling the method `name=`. The `=` character is *not* what makes that method a setter: it's only a convention to notify fellow developers that the method is concerned with setting an attribute.\n\nUnlike local variables, instance variables start with `@`. By making `@full_name` an instance variable, we allow it to be used **outside** of the method where it's declared. We use the term \"instance variable\", because the variable is associated with and available throughout the class instance it's defined in. This is an important concept called the variable's scope. If we didn't make `@full_name` an instance variable, it would not be accessible outside of the `name=` method. Let's review the next method to solidify this concept.\n\n```ruby\n  #...\n  def name\n    @full_name\n  end\nend\n```\n\nThe method above is called `name`. This is called a **getter method** because its sole purpose is to retrieve an attribute. We're returning `@full_name`. We can do this because `@full_name` is an instance variable. That is, it's declared in the `name=` method, but we can reference it in other methods within the `Person` class.\n\n\n## Stack Overflow\n\n[Stack Overflow](https://www.stackoverflow.com) is a programmer's best friend. The question-and-answer site is manned by a huge number of international volunteers who can answer basic and complex technical questions with often incredible speed and accuracy. As you're learning with Bloc - and long after - Stack Overflow will be an invaluable resource. _It is well worth becoming comfortable with._ Read [Bloc's resource on using Stack Overflow](https://www.bloc.io/resources/getting-help-on-stack-overflow). Then:\n\n1. Using [repl.it](http://repl.it/languages/Ruby), define a class with a single method by copying and pasting the following text:\n\n  ```ruby\n  class ArgumentEchoer\n    def echo_argument(argument)\n      p \"You just inputted a value: \" + argument\n    end\n  end\n  ```\n\n  Then call that method:\n\n  ```\n  instance = ArgumentEchoer.new\n  instance.echo_argument(5)\n  ```\n\n  You should run into an error.\n\n2. In the Discussion tab for this checkpoint, draft a message to your mentor. Following the guidelines in the resource above, draft the question you'd ask on Stack Overflow. Your question should be clear, concise, and informative.\n\n  - What caused the error?\n  - What is your knowledge level?\n  - What were you trying to accomplish?\n  - What is the complete error message?\n\n3. When your fake question looks complete, stare at the error for a second. What do you think it means? How do you think you might get around this problem?\n\n4. Open Google in a separate tab and search for the error message you likely received (`TypeError: no implicit conversion of Fixnum into String` - but if you received something else, search for that!). After reading through an example or two, what do you think went wrong? How might you fix it?\n\n  > Most Google results for common error message searches point to Stack Overflow. Searching for error messages often makes asking your question unnecessary.\n\n5. At the bottom of your fake-question message to your mentor, submit a hypothesis about how to fix this error. Then send the message off.\n\nWhen you've completed the above, try the exercises to solidify your understanding of Class basics.",
          "assignment": "### Solution Walk-Throughs\n\n__Do not watch these videos until after you've attempted your own solutions.__ If you struggle to complete these exercises, submit your best effort to your mentor _before watching a solution walk-through_. Submit your answers even if some tests don't pass, as it's important for your mentor to understand your thought process. Discuss difficult exercises with your mentor.\n\nThere are many possible solutions to the exercises. A walk-through is meant to provide insight into the thought process of _one possible solution_ per exercise. If your solution is different yet passes all the tests, do not change your solution to match what is seen in the video. Instead, discuss your thought process with your mentor.\n\n1. <a href=\"//fast.wistia.net/embed/iframe/wf14282ic9?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">RSpec Class Errors Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n2. <a href=\"//fast.wistia.net/embed/iframe/ffowq4cpst?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Basics Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n3. <a href=\"//fast.wistia.net/embed/iframe/satdxr7pir?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Getters and Setters Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n4. <a href=\"//fast.wistia.net/embed/iframe/yddl3nbhiq?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Attr Accessor Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>",
          "roadmap_section_id": 120,
          "active_index": 7,
          "checkpoint_type": "normal",
          "position": 7,
          "points": 1,
          "ref": "3e267727-530b-4fdf-ba9a-73829422ea2f|0"
        },
        {
          "id": 1620,
          "name": "Ruby: Intro to Classes 2",
          "summary": "Intro to Classes 2: use getters and setters to create more complicated objects",
          "body": "### Initializers\n\nGetter and setter methods can be used for accessing the attributes of a class, but you'll often want to create a new instance of a class with default attribute values. Getter and setter methods can only access attributes **after** an instance of a class has been created. Ruby has a standard method named `initialize` that is executed when you create a `new` class instance. Let's declare a new class named `President` and then define an `initialize` method:\n\n```ruby\nclass President\n  def initialize\n    p \"Hello, I'm an instance of the President class!\"\n  end\nend\n\nPresident.new\n\n#=> \"Hello, I'm an instance of the President class!\"\n```\n\nLet's add an `attr_accessor` declaration, so that we can access an attribute when we `initialize`:\n\n> Remember, `attr_accessor` dynamically creates getter and setter methods for the given symbol (e.g. :age).\n\n```ruby\nclass President\n  attr_accessor :age\n\n  def initialize\n    @age = 55\n  end\nend\n\npres = President.new\np pres.age\n\n#=> 55\n```\n\nIn the example above we set an **instance variable** called `@age` to `55` in our `initialize` method. Because we declared an `attr_accessor` for an attribute named `age` (which automatically defines both `age=()` and `age` methods), we can call the `age` getter method on the `pres` instance of the `President` class.\n\nThis is an awfully rigid way of setting attributes, so let's make the attribute values more flexible. That is, let's allow the `age` value to be set when a `new` instance of `President` is created:\n\n```ruby\nclass President\n  attr_accessor :age\n\n  def initialize(years)\n    @age = years\n  end\nend\n\npres = President.new(49)\np pres.age\n\n#=> 49\n```\n\nNow we are essentially creating an interface for our `President` class. We have allowed the `age` attribute to be set by a theoretical user, rather than \"hard-coding\" the value as we did in the prior example. We defined the `initialize` method to take an argument (e.g. `years`), and when we pass a value to the `new` method (e.g. `49`), the `initialize` method recognizes it, and assigns it to the `@age` instance variable.\n\nLet's try one more example, only this time we'll access two attributes:\n\n```ruby\nclass President\n  attr_accessor :age, :party\n\n  def initialize(years, party)\n    @age, @party = years, party\n  end\nend\n\npres = President.new(49, \"Independent\")\np \"The President is #{pres.age} years old and is a member of the #{pres.party} party.\"\n\n#=> \"The President is 49 years old and is a member of the Independent party.\"\n```\n\n> We used some fancy string interpolation to display our attributes. You'll use string interpolation **a lot** as a Rails developer, so get used to it!\n\n\n### Class Methods\n\nThe methods we have written in classes up to this point are **instance methods**. That is, they are called on a unique instance of a class. There's another type of method that can be written in a class. **Class methods** pertain to the class itself, rather than a unique instance of the class. Let's modify our `President` class to demonstrate this. We'll make our class slightly more specific and rename it `UnitedStatesPresident`:\n\n```ruby\nclass UnitedStatesPresident\n  attr_accessor :age, :party\n\n  def initialize(years, party)\n    @age, @party = years, party\n  end\n\n  def self.citizenship\n    \"United States of America\"\n  end\nend\n\np UnitedStatesPresident.citizenship\n#=> \"United States of America\"\n```\n\n> When defining class methods, you must put `self.` in front of the method so that Ruby recognizes it as a class method.\n\nTo fully grasp the difference between class and instance methods, let's talk through the `citizenship` example in plain English. Our class, which is named `UnitedStatesPresident` could possibly share some attributes with other President-based classes. For example, we could also have `GermanyPresident` and `FrancePresident` classes as well. Some attributes would be unique to specific instances of these classes, like `age`, `party` and `name`.\n\nBut the `citizenship` of a country's President applies to the class itself. _All_ instances of `UnitedStatesPresident` have citizenship in the United States of America. In other words, you could say that `citizenship` applies to any and all instances of one these aforementioned classes. For example:\n\n```ruby\nclass UnitedStatesPresident\n  attr_accessor :age, :party\n\n  def initialize(years, party)\n    @age, @party = years, party\n  end\n\n  def self.citizenship\n    \"United States of America\"\n  end\nend\n\nclass GermanyPresident\n  attr_accessor :age, :party\n\n  def initialize(years, party)\n    @age, @party = years, party\n  end\n\n  def self.citizenship\n    \"Germany\"\n  end\nend\n\nclass FrancePresident\n  attr_accessor :age, :party\n\n  def initialize(years, party)\n    @age, @party = years, party\n  end\n\n  def self.citizenship\n    \"France\"\n  end\nend\n```\n\nYou could also say that whichever particular `UnitedStatesPresident` we're talking about, how old they are, or what party they're affiliated with, they'll always have the same `citizenship`. That's the law, after all!\n\n## More About Classes and Objects\n\nWe've only covered the basics of Classes in this checkpoint. Read our [About Objects resource](https://www.bloc.io/resources/about-objects) for broader context and history.\n\n## Indentation\n\nBefore trying the exercises, read this erratically indented version of our Presidents code file:\n\n```ruby\nclass UnitedStatesPresident\n  attr_accessor :age, :party\n\n  def initialize(years, party)\n@age, @party = years, party\nend\n\n  def self.citizenship\n    \"United States of America\"\n  end\n  end\n\nclass GermanyPresident\n  attr_accessor :age, :party\n\n      def initialize(years, party)\n        @age, @party = years, party\nend\n\n    def self.citizenship\n      \"Germany\"\n    end\n\n  class FrancePresident\n  attr_accessor :age, :party\n\n  def initialize(years, party)\n      @age, @party = years, party\n      def self.citizenship\n      \"France\"\n  end\n  end\n```\n\nFollowing the code is much harder.\n\n> We have one or more `end`s too few or too many in this version — can you find the problem(s)?\n\nAs you try the following exercises, indent consistently. As your logic becomes more complicated, indentation will become more important.",
          "assignment": "### Solution Walk-Throughs\n\n__Do not watch these videos until after you've attempted your own solutions.__ If you struggle to complete these exercises, submit your best effort to your mentor _before watching a solution walk-through_. Submit your answers even if some tests don't pass, as it's important for your mentor to understand your thought process. Discuss difficult exercises with your mentor.\n\nThere are many possible solutions to the exercises. A walk-through is meant to provide insight into the thought process of _one possible solution_ per exercise. If your solution is different yet passes all the tests, do not change your solution to match what is seen in the video. Instead, discuss your thought process with your mentor.\n\n1. <a href=\"//fast.wistia.net/embed/iframe/uw1la5idrb?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Initialize Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n2. <a href=\"//fast.wistia.net/embed/iframe/q2nm8bqiay?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Class Methods Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n3. <a href=\"//fast.wistia.net/embed/iframe/lz5x2kba3f?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Calculator Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>",
          "roadmap_section_id": 120,
          "active_index": 8,
          "checkpoint_type": "normal",
          "position": 8,
          "points": 1,
          "ref": "25adb299-ca7e-44c6-900d-8f8848f9dc38|0"
        },
        {
          "id": 1621,
          "name": "Ruby: Loops",
          "summary": "Loops: write more efficient programs",
          "body": "A loop is a programming construct that is used to \"step through\" a collection of objects. The proper way to express this in programming terms is to say that a loop \"iterates over a collection.\"\n\nAs we know, an `Array` is a collection of objects, so we could use a loop to iterate over an `Array`. While iterating over a collection of objects, a loop can be programmed to do things to or with each object in the collection.\n\n\n### Each\n\nThere are different ways to program loop constructs in Ruby, but the most common is `each`. The `each` method is called on a collection, like an `Array`. Try the following using [repl.it](http://repl.it/languages/Ruby):\n\n```ruby\na = [2, 4, 6, 8]\na.each do |num|\n  p \"We're on number: #{num}\"\nend\n```\n\nHere's what you did:\n\n* First, we created a variable named `a` and assigned it to an `Array` containing four numbers.\n* On the second line of code, we called the `each` method on the `a` array and passed it a `block` of code. A `block` starts with a `do` and ends with an `end`.\n* On the second line of code, after `do`, we declared a variable named `num` to be used in the `block`. This variable represents the element over which the `each` method is iterating.\n* The third line of code is inside of the `each` block. We can think of this line as being \"in the loop\". Inside of the loop we are instructing the computer to print an interpolated string with the `num` argument. Remember, the `num` variable represents an element from the `a` array. With each iteration, `num` is assigned to a new element. In this example, `num` is assigned to `2`, then `4`, then `6`, then `8`.\n* The fourth line of code closes the `each` block with the keyword `end`.\n\n> A deeper discussion of `blocks`, which we've already encountered by learning to read RSpec, is coming up shortly. For now, make sure you're comfortable with its basic syntax.\n\n\n### Each in Rails\n\nEach is frequently used in Rails to iterate through \"model\" objects (instances of classes representing data) and display their attributes on a page. We haven't yet encountered model objects, and we don't yet have a web page, but we can explore usage like this in the below example, which shows how we might loop through `User` objects to display their information using `each`:\n\n```ruby\nclass User\n  attr_accessor :name\n\n  def initialize(name)\n    @name = name\n  end\n\n  def email\n    # You'll get a chance to use `join` and `split` in the exercises\n    \"#{name.split(' ').join('')}@email.com\"\n  end\nend\n\nusers = [User.new('Harry Potter'), User.new('Hermione Granger'), User.new('He Who Shall Not Be Named')]\n\nusers.each do |user|\n  p \"This user's name is #{user.name}, and their email is #{user.email}.\"\nend\n```\n\nThis would loop through the `users` collection and output a string (ex: \"This user's name is Harry Potter, and their email is HarryPotter@email.com.\") for each one. Because `each` is a method, it returns something at the end of this loop: the same collection of `users` on which it was originally called.\n\n> `each` performs operations on a collection, but returns the original collection, rather than anything related to what is performed within the `do` and `end` of the block. In this sense, we'd say `each` is used for its \"side effects\", rather than its \"return\".\n\n\n### Mixing Classes and Loops\n\nLet's combine loops and classes in practice. We'll repeat the above behavior, but move some of it into a new class. This class will take an array of user objects on initialization and will have a `print_names_and_emails` method, which will loop through `users` and print out a string for each.\n\n```ruby\n# User class defined above\n\nclass UserIterator\n  attr_accessor :user_array\n\n  def initialize(user_array)\n    @user_array = user_array\n  end\n\n  def print_names_and_emails\n    user_array.each do |user|\n      p \"This user's name is #{user.name}, and their email is #{user.email}\"\n    end\n  end\nend\n\nusers = [User.new('Harry Potter'), User.new('Hermione Granger'), User.new('He Who Shall Not Be Named')]\n\nUserIterator.new(users).print_names_and_emails\n```\n\nThis example would behave identically to our example above it. It would print out a string for each member of the collection, as a \"side effect\". Then the loop inside the `print_names_and_emails` method would return the `user_array` on which it was called. Because this call of `each` is the last thing that happens in the `print_names_and_emails` method, it is also, by default, what that method returns. So, just like our example without the `UserIterator` class, calling `UserIterator.new(users).print_names_and_emails` returns the original array of `users` with which we initialized the class instance.",
          "assignment": "### Solution Walk-Throughs\n\n__Do not watch these videos until after you've attempted your own solutions.__ If you struggle to complete these exercises, submit your best effort to your mentor _before watching a solution walk-through_. Submit your answers even if some tests don't pass, as it's important for your mentor to understand your thought process. Discuss difficult exercises with your mentor.\n\nThere are many possible solutions to the exercises. A walk-through is meant to provide insight into the thought process of _one possible solution_ per exercise. If your solution is different yet passes all the tests, do not change your solution to match what is seen in the video. Instead, discuss your thought process with your mentor.\n\n1. <a href=\"//fast.wistia.net/embed/iframe/1czzip1nkr?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Each With Index Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n2. <a href=\"//fast.wistia.net/embed/iframe/ysru8p9qn5?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">The Each Method Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n3. <a href=\"//fast.wistia.net/embed/iframe/sm1m0im1fu?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Title Case Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>",
          "roadmap_section_id": 120,
          "active_index": 9,
          "checkpoint_type": "normal",
          "position": 9,
          "points": 1,
          "ref": "b509b77d-0d2c-4b0a-b46f-366e522c67fb|0"
        },
        {
          "id": 1622,
          "name": "Ruby: Hashes",
          "summary": "Hashes: store information as key / value pairs",
          "body": "Arrays and Strings allow their elements to be accessed by integers. The integers specify an index in the Array or String. There is another type of collection in Ruby, called a `Hash`.\n\nHashes store elements as key / value pairs. A key is a unique identifier, and in this respect acts like an index. Keys don't have to be integers, however. In fact, they can be a number of different objects, such as a `String` or `Symbol`. In a `Hash`, you use a **key** to retrieve a **value**.\n\n`Symbols` are the most common types of hash key. Symbols are essentially lightweight strings, denoted with a `:` to the left of their name. To create a `Symbol` named \"book\", we would write `:book`.\n\nThe example below demonstrates how to use Symbols as keys to retrieve values from a `Hash`. The code below is a dictionary program that returns the definition of a word (type of fruit) that's passed to it.\n\n> Dictionaries are a classic use case for Hashes. In fact, this type of data structure is often referred to as a dictionary in computer science.\n\n```ruby\ndef get_definition(word)\n  fruits = {:apple => \"A red, yellow or green fruit.\", :banana => \"A yellow fruit.\", :watermelon => \"A large green fruit.\"}\n  p fruits[word]\nend\n\n# Call the method, requesting the definition of an apple\nget_definition(:apple)\n#=> \"A red, yellow or green fruit.\"\n```\n\nIn the example above we passed `:apple`, a `Symbol`, to the `get_definition` method. The `:apple` argument was a valid key in the `fruits` `Hash`, so it returned its definition. The definition in this case is the value in the `fruits` `Hash` associated with the `:apple` key. We extract the value for a given key like this:\n\n```ruby\nfruits[:apple] #=> returns \"A red, yellow or green fruit.\"\n```\n\n`fruits` is the `Hash` and `:apple` is the key whose value we want. The syntax is similar to the array indexing syntax:\n\n```ruby\n['one', 'two', 'three'][0]\n#=> 'one'\n```\n\n\n### Shorthand Hash Syntax\n\nIf you use a symbol as a key in `Hash`, you can place the colon on the right and remove the \"hash-rocket\" (`=>`). Using this shortcut, the `fruits` `Hash` in the `get_definition` method could be rewritten as:\n\n```ruby\ndef get_definition(word)\n  fruits = {apple: \"A red, yellow or green fruit.\", banana: \"A yellow fruit.\", watermelon: \"A large green fruit.\"}\n  p fruits[word]\nend\n```\n\n> Though either `Hash` syntax will work, the latter (without the hash-rocket) is increasingly well accepted and offers greater readability.\n\nWhen Hashes become very long, or verbose, you can reformat them to make the code more readable. For example:\n\n```ruby\ndef get_definition(word)\n  fruits = {\n    apple: \"A red, yellow or green fruit.\",\n    banana: \"A yellow fruit.\",\n    watermelon: \"A large green fruit.\"\n  }\n  p fruits[word]\nend\n```\n\nIn an `Array`, order is very important; in a `Hash`, it is not. A `Hash` is stored without regard to order, so keys are all that you need to access a value.",
          "assignment": "As an added assignment to reinforce your comfort with hashes, send your mentor a message — 500 words max — explaining in your own words what hashes are, why they're useful, and the syntax used to access their elements.\n\n### Solution Walk-Throughs\n\n__Do not watch these videos until after you've attempted your own solutions.__ If you struggle to complete these exercises, submit your best effort to your mentor _before watching a solution walk-through_. Submit your answers even if some tests don't pass, as it's important for your mentor to understand your thought process. Discuss difficult exercises with your mentor.\n\nThere are many possible solutions to the exercises. A walk-through is meant to provide insight into the thought process of _one possible solution_ per exercise. If your solution is different yet passes all the tests, do not change your solution to match what is seen in the video. Instead, discuss your thought process with your mentor.\n\n1. <a href=\"//fast.wistia.net/embed/iframe/xwelwrrrp8?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Setting Attributes Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n2. <a href=\"//fast.wistia.net/embed/iframe/ldtt68l5rr?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Iterating over a `Hash` Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n3. <a href=\"//fast.wistia.net/embed/iframe/agy4yqlkbe?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">`Hash` Methods Solution</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>",
          "roadmap_section_id": 120,
          "active_index": 10,
          "checkpoint_type": "normal",
          "position": 10,
          "points": 1,
          "ref": "d205dcf8-9034-4a21-baa9-f31f06370189|0"
        },
        {
          "id": 1623,
          "name": "Ruby: Advanced Classes",
          "summary": "Advanced Classes: create complicated objects using inheritance and modules",
          "body": "To get a more complete picture of how classes fit into Ruby's object-oriented approach, let's discuss two weighty-sounding subjects: **Self** and **Inheritance**.\n\n\n### Self\n\nEvery object in Ruby can refer to itself. This might seem esoteric, but it's essential to how objects work. Take this `Person` class for example:\n\n```ruby\nclass Person\n  attr_accessor :first, :last\n\n  def full_name\n    \"#{@first} #{@last}\"\n  end\n\n  def introduce_yourself\n    # How do I do this without repeating the above logic here?\n  end\nend\n```\n\nIn Ruby, instances refer to themselves using the `self` keyword:\n\n```ruby\nclass Person\n  attr_accessor :first, :last\n\n  def full_name\n    \"#{@first} #{@last}\"\n  end\n\n  def introduce_yourself\n    p \"Hello, my name is #{self.full_name}.\"\n  end\nend\n```\n\n> Within method bodies, `self` is implicit, and can be left out. If you were to write just `full_name` within the `introduce_yourself` method above, Ruby would have guessed that you meant `self.full_name`. This rule has exceptions which we'll explore later.\n\nWe also use `self` when defining class methods:\n\n```ruby\nclass UnitedStatesPresident\n  def self.citizenship\n    \"United States of America\"\n  end\nend\n```\n\nThis is because _classes are themselves objects_. When we type `def self.citizenship`, we are defining the `citizenship` method on the `UnitedStatesPresident` class object itself!\n\n> Within a class method, `self` references the class object.\n\nThis may be confusing. Let's explore inheritance to understand this more deeply.\n\n\n### Inheritance\n\nIn object-oriented programming, inheritance refers to a specific relationship between objects where one takes functionality from another. In \"classical inheritance\" (so called because it's class-based, not old), one class inherits attributes and behavior (i.e. methods) from another class. The class which inherits is known as a child class, while the class it inherits from is called a parent class. Inheritance is designated with a `<` symbol. For example:\n\n```ruby\nclass Elm < Tree\nend\n```\n\nIn the example above, we are defining a class named `Elm` that inherits from a class named `Tree`. Because we declared the inheritance in the class definition, all instances of the `Elm` class automatically have attributes and methods defined in the `Tree` class. Consider the following:\n\n```ruby\nclass Tree\n  def roots?\n    true\n  end\nend\n\nclass Elm < Tree\nend\n\ne = Elm.new\ne.roots?\n#=> true\n```\n\nWe called the `roots?` method on an instance of `Elm` even though the `roots?` method is not explicitly defined in the `Elm` class. We were able to call `roots?` because `Elm` inherits from `Tree`.\n\n### Inheritance: Using Super\n\nLet's explore an inheritance example where a parent class has multiple child and grandchild classes. We'll start by defining an `Animal` class that will be used to store generic information for all animals.\n\n```ruby\nclass Animal\n  attr_accessor :name\n\n  def initialize(name)\n    @name = name\n  end\n\n  def eat(other)\n    puts \"#{@name} ate #{other.name}! #{self.noise}\"\n  end\nend\n```\n\n> We did not define `noise` above, but the descendants of the `Animal` class will.\n\nLet's write a child class and have it inherit the `name` attribute from `Animal`, but also take another attribute on initialization:\n\n```ruby\nclass Human < Animal\n  attr_accessor :catchphrase\n\n  def initialize(name, catchphrase)\n    super(name)\n    @catchphrase = catchphrase\n  end\n\n  def noise\n    @catchphrase\n  end\nend\n```\n\nRuby's `super` method lets us call a method in the parent class from within the child class. In the above example, `super(name)` in `Human`'s `initialize` method calls the `initialize` method in `Animal` which executes `@name = name`. When inherited methods are more complicated, however, calling `super` can import much more nuanced behavior.\n\n> If a child defines a method which its parent also defines, the child method will _override_ the parent's. `Animal.initialize()` is, by convention, supposed to guarantee that name is set. Removing the call to `super` would break this promise, and would therefore be a bug.\n\nLet's test our inheritance:\n\n```ruby\na = Human.new(\"Adam\", \"Right on!\")\nb = Animal.new(\"Chicken\")\na.eat(b)\n#=> \"Adam ate Chicken! Right on!\"\n```\n\nThe `Human` class is slightly more specific than the `Animal` class, but still generic. Let's define a child class of `Human` (which is a grandchild class of `Animal`):\n\n```ruby\nclass Englishman < Human\n  def initialize(name = \"Mick Jagger\")\n    super(name, \"I can't get no....\")\n  end\nend\n```\n\n> If the above `Englishman#initialize` method still does not make sense, explain it step by step to a mentor, family member, or [inanimate object](http://en.wikipedia.org/wiki/Rubber_duck_debugging).\n\nLet's test our defined inheritance again:\n\n```ruby\na = Human.new(\"Adam\", \"Right on!\")\nmick = Englishman.new\nmick.eat(a)\n#=> \"Mick Jagger ate Adam! I can't get no....\"\n```\n\nThe `Human` class is a child of `Animal`. Let's define a sibling, which would be another child of the `Animal` class:\n\n```ruby\nclass Dog < Animal\n  attr_accessor :excitement_level\n\n  def initialize(name, excitement_level)\n    super(name)\n    @excitement_level = excitement_level\n  end\n\n  def noise\n    \"woof\" * @excitement_level\n  end\nend\n```\n\nTest the new `Dog` class:\n\n```ruby\nd = Dog.new(\"Eight\", 3)\nd.eat(d)\n#=> \"Eight ate Eight! woofwoofwoof\"\n```",
          "assignment": "### Solution Walk-Throughs\n\n__Do not watch these videos until after you've attempted your own solutions.__ If you struggle to complete these exercises, submit your best effort to your mentor _before watching a solution walk-through_. Submit your answers even if some tests don't pass, as it's important for your mentor to understand your thought process. Discuss difficult exercises with your mentor.\n\nThere are many possible solutions to the exercises. A walk-through is meant to provide insight into the thought process of _one possible solution_ per exercise. If your solution is different yet passes all the tests, do not change your solution to match what is seen in the video. Instead, discuss your thought process with your mentor.\n\n* <a href=\"//fast.wistia.net/embed/iframe/1etgbxfbko?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Self</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n* <a href=\"//fast.wistia.net/embed/iframe/r23m722to1?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Good Parents</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n* <a href=\"//fast.wistia.net/embed/iframe/5edojuw6rv?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Super</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n* <a href=\"//fast.wistia.net/embed/iframe/vaw2w1t3ip?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">More Complicated Inheritance</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>",
          "roadmap_section_id": 120,
          "active_index": 11,
          "checkpoint_type": "normal",
          "position": 11,
          "points": 1,
          "ref": "9728547c-9207-4e9f-aa1c-17cbbc7b04eb|0"
        },
        {
          "id": 1624,
          "name": "Ruby: Blocks",
          "summary": "Blocks: passing instructions to a method",
          "body": "Blocks are one of the most powerful tools in the Rubyist's arsenal. They are also one of the hardest concepts for beginners to grasp, so prepare for some confusion, and discuss these exercises with your mentor.\n\n\n### So what is a block?\n\nBlocks allow you to _pass_ a series of instructions to a method as a special kind of argument.\n\nYou've already had some exposure to blocks in the `describe` and `it` blocks of the __Reading `RSpec` Tests__ checkpoint, and when you used `each` in the __Loops__ checkpoint.\n\nAs a refresher, here's an example of the `each` method:\n\n```ruby\nitems = [1, 2, 3, 4]\nitems.each do |item|\n  p item + 3\nend\n\n#=> 4\n#=> 5\n#=> 6\n#=> 7\n```\n\nHere's how this works:\n\n- The `each` method is called on a collection (here, `items`).\n- It's then passed a block, delineated by the `do` and `end`.\n- The block has a block argument, `item`, declared inside \"pipes.\" `item` represents the current element of the collection.\n- When you call `each` on a collection, it iterates over each element in the collection and \"calls\" the block on it, with the element as the block argument.\n\n> Blocks are basically anonymous chunks of code - methods without names - that can be passed as arguments to a method.\n\nIn the above example, our block gives the instructions to \"print the value of the item we're iterating over, plus 3.\" We could just as easily pass a block with a different set of instructions, say, \"print 'odd' if the value is odd.\" In the case of `each`, the block lets us take a collection and, essentially, say, \"do some stuff with each element of the collection.\"\n\n> Blocks allow us to dissociate the specific behavior of what we want to do as part of a loop (or other behavior) from the process of looping itself. Think of how we'd have to do this without a block.\n\nIf you have a simple block, like the example above, you can replace `do` and `end` with curly brackets. For example:\n\n```ruby\nitems = [1, 2, 3, 4]\nitems.each { |item| p item + 3 }\n\n#=> 4\n#=> 5\n#=> 6\n#=> 7\n```\n\nThis is entirely equivalent to:\n\n```ruby\nitems.each do |item|\n  p item + 3\nend\n```\n\nLet's explore the variable in between the pipes (`|item|`), the **block argument**. In the example above, the `item` block argument represents an element from the `items` array. With every iteration of the `each` method, the `item` block argument becomes a different element from the `items` array. In other words:\n\n* on the 1st iteration of the `each` method, `item` = `1`\n* on the 2nd iteration `item` = `2`\n* on the 3rd iteration `item` = `3`\n* on the 4th iteration `item` = `4`\n\nAfter the 4th iteration, the `each` method returns because there are no more elements to iterate over.\n\n> Nothing about `each` specifies that it adds 3 to every element in its collection. That behavior is specified by the block. The `each` statement _yields_ control to the block for each element in the array.\n\n### Block Returns\n\nBlocks can also return values, and in the case of `each`, the return value of calling the block is the collection at the end of iteration. Because our above call to `each` didn't _change_ the collection over which it iterated, the return value is the original `items` array: `[1,2,3,4]`.\n\n`each` _does not alter_ the collection it iterates. We use `each` when we want to do something _with_ an array, not _to_ it. See this distinction in action:\n\n```ruby\nfirst_array = [1,2,3,4]\n\nsecond_array = first_array.each do |item|\n  item + 1000\nend\n\np first_array\n#=> [1,2,3,4] # Each does not alter the collection on which it's called\n\np second_array\n#=> [1,2,3,4] # It also *returns* the original collection\n```\n\n> This means that `each` is useful __only__ for its \"side effect\", such as printing. In Rails, `each` is often used to loop through and print items in collections.\n\n#### Controlling Each's Return\n\nLet's take this a little further and create a method to demonstrate how a block is executed. Consider the following example, where we define a method which takes an array and returns a new array with all of the original values incremented by 3:\n\n```ruby\ndef new_array_plus_3(items)\n\n  # create an empty array to store the results of the block\n  new_items = []\n\n  # iterate over the items array, add 3 to each element\n  # and store the results in the new_items array\n  items.each { |item| new_items << item + 3 }\n\n  # return the newly populated array\n  new_items\nend\n\narray = [1,2,3,4]\n\np array\n#=> [1, 2, 3, 4]\n\np new_array_plus_3(array)\n#=> [4, 5, 6, 7]\n\np array\n#=> [1, 2, 3, 4]\n```\n\n> We're still just using `each` for its side effects - here, \"shoveling\" values into a new array - but we then store the result of those side effects, and return them from our method. This is just for demonstration. As you'll see shortly, other block methods are better suited to the above purpose.\n\n\n### Other Block Methods\n\nRuby has many methods that take blocks. You've been introduced to the `each` and `each_with_index` Array methods, and RSpec's `describe`, and `it`. There is a whole world of other block methods in Ruby. We'll cover a few basic examples here so you can begin to get a feel for them.\n\n> Don't worry about understanding these perfectly just yet. You'll have a chance to work with most of them in the exercises.\n\nMost of below are collection methods:\n\n#### Map\n\nYou'll recall that the `each` method iterates through a collection, does something with each member, and returns the original collection. The `map` method instead returns a new collection constructed from the previous one, based on the logic in the block. While `each` performs behaviors with a collection and returns that collection untouched, `map` does the former and then returns a _new_ collection based on the return from the block code.\n\nSpecifically, it loops through the primary collection, filling a new collection with the elements from the first one, modified based on the block instructions.\n\nThis makes our `new_array_plus_3` method much briefer and easier:\n\n```ruby\ndef new_array_plus_3(items)\n  items.map{ |item| item + 3 }\nend\n\narray = [1,2,3,4]\n\nnew_array_plus_3(array)\n#=> [4, 5, 6, 7]\n\narray\n#=> [1, 2, 3, 4]\n```\n\n> Our new array is composed of the return value from each invocation of the block.\n\nIn Rails, we might use `map` to convert an array of users into an array of those users' names:\n\n```ruby\ndeadly_viper_assassination_squad =\n  [{ id: 1, name: 'Beatrix' },\n  { id: 2, name: 'O-Ren' },\n  { id: 3, name: 'Vernita' },\n  { id: 4, name: 'Elle' }]\n\ndeadly_viper_assassination_squad.map { |f| f[:name] }\n#=> [\"Beatrix\", \"O-Ren\", \"Vernita\", \"Elle\"]\n```\n\n> The original `deadly_viper_assassination_squad` collection remains untouched; we just iterate through it to return a collection of names.\n\n\n#### Select and Reject\n\n`select` is called on a collection and returns a new collection of all the elements for which the supplied block returns true. Let's review the squad again:\n\n```ruby\n# Note the addition to the hash representing Budd\ndeadly_viper_assassination_squad =\n  [{ id: 1, name: 'Beatrix' },\n  { id: 2, name: 'O-Ren' },\n  { id: 3, name: 'Vernita' },\n  { id: 4, name: 'Budd', betrays_squad: true }]\n\ndeadly_viper_assassination_squad.select { |f| f[:betrays_squad] }\n#=>[{ id: 4, name: 'Budd', betrays_squad: true }]\n\ndeadly_viper_assassination_squad.reject { |f| f[:name].length > 6 }.map{ |f| f[:name] }\n#=>['O-Ren', 'Budd']\n```\n\n> In the example directly above, we \"chained\" block methods. This is possible (and extremely useful), because the methods both return and are called on collections.\n\n\n#### Any and All\n\n`any?` returns `true` if *any* of the elements within the collection result in `true` returned from the block. `all?` works similarly, returning `true` if and only if each element within the collection resulted in a `true` return value from the block. Here are a few examples using our previous data:\n\n```ruby\ndeadly_viper_assassination_squad.any? { |f| f[:name] == 'Beatrix' }\n#=> true\ndeadly_viper_assassination_squad.any? { |f| f[:name] == 'Bill' }\n#=> false\ndeadly_viper_assassination_squad.all? { |f| f[:name] == 'Quentin' }\n#=> false\ndeadly_viper_assassination_squad.all? { |f| f[:id] > 0 }\n#=> true\n```\n\n### Yield\n\nYield is a difficult Ruby concept to grasp at first, but it's necessary to fully understand blocks. This example from [Tutorials Point](http://www.tutorialspoint.com/ruby/ruby_blocks.htm) shows how `yield` works:\n\n```ruby\ndef test\n   puts \"You are in the method\"\n   yield\n   puts \"You are again back to the method\"\n   yield\nend\n\ntest {puts \"You are in the block\"}\n#=> You are in the method\n#=> You are in the block\n#=> You are again back to the method\n#=> You are in the block\n```\n\n> Our block does not take a \"block argument\". Like methods, blocks can be called with and without arguments. We'll discuss yielding with arguments in the exercises.\n\nWhat's going on here? When our `test` method hits the `yield` command, it literally _yields_ control to the \"block\" called as part of the method. The `yield` method \"invokes\" the block given, performing whatever actions the given block specifies, before handing control back to the method in which it was called.\n\n> If no block is given when calling our `test` method, what do you think will happen?\n\n```ruby\ntest\n#=> You are in the method\nLocalJumpError: no block given (yield)\n```",
          "assignment": "Complete the following brief writing assignment after reading Bloc's [resource on writing to learn](https://www.bloc.io/resources/learning-by-writing).\n\nSend your mentor a message via the Discussion tab for this checkpoint. In two to four sentences each, your message should answer the following questions:\n\n- How does `each` differ from `map`? In what sorts of cases would you want to use the former? The latter?\n- How would you describe the difference between `any?` and `all?` What data type do these methods return? Do they have any effect on the array on which they're called? (Try it using [repl.it](http://repl.it/languages/Ruby)).\n- __Bonus__: The `each` method itself uses `yield`. Why does it need `yield` to work as it does? What code is `each` yielding control to, and what does it feed `yield` as a block argument? (Hint: It's yielding multiple times.)\n\n### Solution Walk-Throughs\n\n__Do not watch these videos until after you've attempted your own solutions.__ If you struggle to complete the checkpoint exercises, submit your best effort to your mentor _before watching a solution walk-through_. Submit your answers even if some tests don't pass, as it's important for your mentor to understand your thought process. Discuss difficult exercises with your mentor.\n\nThere are many possible solutions to the exercises. A walk-through is meant to provide insight into the thought process of _one possible solution_ per exercise. If your solution is different yet passes all the tests, do not change your solution to match what is seen in the video. Instead, discuss your thought process with your mentor.\n\n1. <a href=\"//fast.wistia.net/embed/iframe/h0izr7491l?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Sorting</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n2. <a href=\"//fast.wistia.net/embed/iframe/kw887fdhix?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Mapping</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n3. <a href=\"//fast.wistia.net/embed/iframe/83s55thsqf?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Any</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>",
          "roadmap_section_id": 120,
          "active_index": 12,
          "checkpoint_type": "normal",
          "position": 12,
          "points": 1,
          "ref": "308d0819-17fc-4f18-b8d9-dfab28647776|0"
        },
        {
          "id": 1889,
          "name": "Programming Reinforcement: Introduction",
          "summary": "Reinforce Ruby programming and problem solving fundamentals through curated exercises",
          "body": "<!-- { ids:[1776,1781,1889], name:'Programming Reinforcement: Introduction', summary:'Reinforce Ruby programming and problem solving fundamentals through curated exercises' } -->\n\n<mentor-checkpoint-note>The programming reinforcement checkpoints in the Frontend and Rails courses are not the same. In order to be career support eligible, students must complete them all <b>before graduating a course</b>. They gradually increase in difficulty, so we recommend doing them in order.</mentor-checkpoint-note>\n\nEach foundation checkpoint introduces new concepts, patterns, and assignments. We designed Bloc’s curriculum to push you to your learning limits. With that in mind, we’ve included breaks between lessons to reinforce programming concepts; this is the first of those breaks, known as Programming Reinforcement checkpoints.\n\nIn these checkpoints, you will complete coding challenges that help you master Ruby and learn to think like a programmer. After you complete the challenges, you will meet with your mentor to discuss your solutions.\n\n- [Codewars](#codewars)\n- [Challenges](#challenges)\n- [Bonus Challenge: Find the Sum](#bonus-challenge)\n- [Assignment](#assignment)\n\t- [For Mentors](#for-mentors)\n\n<a name=\"codewars\"></a>\n## Codewars\n\n<center>\n    <iframe src=\"//fast.wistia.net/embed/iframe/0sysb0t39z\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe>\n    <script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center><br><br>\n\nSign up for a free account at [Codewars](http://codewars.com). Codewars is a community of developers who help each other complete coding challenges. These challenges require you to apply Ruby’s core features and your strong, analytical thinking to solve them properly.\n\nIf this is your first time creating an account, you must solve two initial coding challenges to complete sign up: [Multiply](http://www.codewars.com/kata/multiply/train/ruby) and [Broken Greetings](http://www.codewars.com/kata/broken-greetings/train/ruby).\n\n<a name=\"challenges\"></a>\n## Challenges\n\nYou must solve these three Kata (challenges) before submitting the checkpoint. At this point in your program, your skill level meets or exceeds that required by each Kata. While they may challenge you, know that you are capable of completing each one.\n\n>Your mentor may help you, but we strongly encourage you attempt these on your own.\n\n| Kata                                                                                    | Difficulty[*](#difficulty) | Hint                                                                                                        |\n|:----------------------------------------------------------------------------------------|:---------------------------|:------------------------------------------------------------------------------------------------------------|\n| [Jenny’s Secret Message](http://www.codewars.com/kata/jennys-secret-message/train/ruby) | 8                          | The order of our code is critical.                                                                          |\n| [Count by X](http://www.codewars.com/kata/count-by-x/train/ruby)                        | 8                          | We can append items to the end of an array with an operator, brush up on arrays and how to manipulate them. |\n| [Stringy Strings](http://www.codewars.com/kata/stringy-strings/train/ruby)              | 8                          | Conditional expressions help us determine whether we should do one thing or another.                        |\n\n<a name=\"difficulty\"></a>\n\\*<sub> Difficult problems have lower ratings.</sub>\n\n<a name=\"bonus-challenge\"></a>\n## Bonus Challenge: [Find the Sum](http://www.codewars.com/kata/find-sum-of-top-left-to-bottom-right-diagonals/train/ruby)\n\n>This bonus challenge is optional, but we strongly encourage you to attempt it.\n\nIn this exercise, you must calculate the sum of diagonal values in a square [matrix](http://www.purplemath.com/modules/matrices.htm). A square matrix looks like this:\n\n| **1** | 2 | 3 |<br>\n| 4 | **5** | 6 |<br>\n| 7 | 8 | **9** |<br>\n\nWe highlighted the diagonal values. If we sum them together, we get `1 + 5 + 9 = 15`. A two-dimensional array (an array of arrays) stores each matrix. For example, to generate this matrix in Ruby, we could use the following syntax:\n\n```ruby\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ]\ndiagonal_sum = matrix[0][0] + matrix[1][1] + matrix[2][2]\n#=> 15\n```\n\n`matrix` is an array with three arrays inside of it. Your code must calculate the diagonal sum regardless of the size of the matrix. This 3x3 is one option, but an 1800x1800 matrix is possible as well.\n\n>Extra Credit: Try to complete this exercise in three lines or less!\n\n<a name=\"assignment\"></a>",
          "assignment": "- Navigate to your Bloc student account page to add your Codewars username. This will help your mentor find you on Codewars.\n- Complete all [mandatory challenges](#challenges).\n  - Submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to each of your solutions as part of your assignment.\n- Attempt the [Bonus Challenge](#bonus-challenge).\n  - Keep a log as you work through it and consider these questions when writing your report:\n    - What approaches did you try?\n    - Did you ever restart the process? If so, why?\n    - What steps did you take to solve the problem before you began coding?\n    - What was the most challenging aspect of the problem?\n    - Etc.\n  - If you complete the [Bonus Challenge](#bonus-challenge), submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to your solution.\n- Discuss your solutions and your struggles with your mentor.\n\n>Articulating your problem solving process is a valuable skill on the job and during technical interviews.\n\nRemember to click **Submit Final** on every challenge you complete, and notify your mentor when you do so. For challenges you *do not* complete, you may ask your mentor to review them with you.\n\n<a name=\"for-mentors\"></a>\n### For Mentors\n\nConsult this [document for reference](https://www.bloc.io/resources/ruby-programming-reinforcement-mentor-s-guide) for this and all future Ruby Programming Reinforcement checkpoints.",
          "roadmap_section_id": 120,
          "active_index": null,
          "checkpoint_type": "career_prep",
          "position": null,
          "points": 1,
          "ref": "ec4f0ed6-428c-452e-9c75-b0d407c648af|0"
        },
        {
          "id": 1607,
          "name": "Development Environment",
          "summary": "Development Environment: configuring a computer to develop and run Ruby on Rails apps",
          "body": "## There Will be Code, but First...\n\nA development environment is a cohesive set of tools for building and deploying software. A development environment for Ruby on Rails requires the installation of a few programs. Properly configuring a development environment can be a challenge for new developers, so follow the instructions carefully. You should ask your mentor if you have problems or questions.\n\n> Environment setup can be unpredictable and frustrating. We strongly recommend setting up your environment with your mentor.\n\n## Mac and Linux Users\n\nMost tools related to Ruby on Rails (commonly referred to as \"Rails\") are optimized for Unix-based operating systems, like OS X and Linux. If you are using a Unix-based operating system, we advise you to create a *local* developer environment. This means you'll install software on your computer, and won't use a virtual machine or a cloud service.\n\nBecause many installation instructions are dependent on the version of your OS, we'll refer you to the instructions on [Install Rails](http://installrails.com/), which will provide you with customized installation steps. Follow the instructions, stopping at the section on Sublime Text.\n\nTools we will install and use:\n\n| **Tool** | **Description** |\n| :-- | :-- |\n| __Git__ | A version tracking software, essential for tracking and sharing your changes with your mentor and other programmers. We'll use Git on a regular basis.\n| __RVM__ | Ruby Version Manager, a tool for installing and switching between versions of Ruby. |\n| __Ruby__ | The multi-purpose programming language with which Rails is built. Installed using RVM. It comes with the RubyGems software, which allows you to download, install and use ruby software packages (\"gems\") on your system. |\n| __Rails__ | One of the world's most powerful and user-friendly web-development frameworks, written in Ruby. Packaged as a gem. |\n\nOnly on Mac:\n\n| **Tool** | **Description** |\n| :-- | :-- |\n| __Xcode__ (Mac only) | An integrated development environment (IDE) containing a suite of software development tools developed by Apple for developing software. |\n| __Homebrew__ (Mac only) | A software package management system that simplifies the installation of software on the Mac OS X operating system. It is actually written in Ruby! |\n\nOnce you've installed those tools with the help of [Install Rails](http://installrails.com/), you've completed this checkpoint.\n\n## Windows Users\n\nWhile it's possible to install Rails on a Windows computer, it is _much_ more difficult. Installation bugs on Windows are highly unpredictable and can take many hours to fix - often incompletely. This is not the sort of frustration you want when you're just getting started.\n\nAs a consequence, we suggest using Cloud9, which is a browser-based development environment. You can quickly set up a free account with Cloud9. Cloud9 allows you to easily log in, edit, save, and collaborate on code. We __strongly__ advise students on Windows computers to get started with Cloud9.\n\nCheck out our resource on [Cloud9 with Rails](/resources/cloud9-on-rails) for instructions on how to set up your Cloud9 development environment.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| Development Environment | A development environment is a cohesive set of tools for building and deploying software. |\n| Xcode | Apple's Integrated Development Environment (IDE), which includes a large number of generic software development tools. |\n| [Ruby](https://www.ruby-lang.org/en/) | Ruby is a dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write. |\n| [Ruby on Rails](https://github.com/rails/rails) | Rails is a web-application framework that includes everything needed to create database-backed web applications, according to the Model-View-Controller (MVC) pattern. |",
          "assignment": "In addition to giving us compartmentalized independent Ruby setups, RVM allows us to create separate named gemsets. Explore the power of RVM by creating a Rails 4.2.5 gemset:\n\n* Create a gemset for Rails 4.2.5:\n\n  ```bash(Terminal)\n  $ rvm gemset create rails425\n  ```\n\n* Switch to the `rails425` gemset:\n\n  ```bash(Terminal)\n  $ rvm @rails425\n  $ rvm current\n  ruby-2.2.1@rails425\n  ```\n\n* Install Rails 4.2:\n\n  ```bash(Terminal)\n  $ gem install rails -v 4.2.5\n  ...\n  Fetching: rails-4.2.5.gem (100%)\n  Successfully installed rails-4.2.5\n  29 gems installed\n  ```\n\nOnce your assignment is complete, message your mentor.",
          "roadmap_section_id": 120,
          "active_index": 13,
          "checkpoint_type": "normal",
          "position": 13,
          "points": 1,
          "ref": "17f97a1e-df0e-42f4-96f5-399ccfcfec36|0"
        },
        {
          "id": 1608,
          "name": "Developer Tools: Command Line",
          "summary": "The Command Line: efficiently navigate and modify files, execute programs, and more",
          "body": "> “If you have any trouble sounding condescending, find a UNIX user to show you how it's done.”\n>\n> — Scott Adams, Dilbert Cartoonist\n\nYou know that super cool green-on-black hacker-looking screen you always see in the movies? It's not that cool in real life… it's way cooler. Most developers need this tool. This checkpoint will familiarize you with the basic commands and principles of the command line.\n\n### What Is the Command Line?\n\nThe command line allows developers to navigate their filesystem, alter files, execute programs, install software, create new applications, and much more. We use the terms command line, command line prompt, terminal, and [shell](http://en.wikipedia.org/wiki/Unix_shell) interchangeably in the developer community.\n\n[Unix](http://en.wikipedia.org/wiki/Unix) offers “flavors” of shells that function on any Unix-based operating system such as Linux and OS X. But, the content in this checkpoint is shell and operating system agnostic.\n\n### Why Do I Need to Learn the Command Line?\n\nThe command line, once you become familiar with it, is an efficient way to access systems, install software, and execute programs and tests. As you learn with Bloc, you'll use the command line to perform actions, and become comfortable with the command line in the process.\n\n### How Do I Open the Command Line?\n\nUse the following instructions to open the command line:\n\n| Operating System | Guide |\n| :-- | :-- |\n| OS X | The command line utility packaged with the operating system is [Terminal](http://en.wikipedia.org/wiki/Terminal_%28OS_X%29). To access Terminal, use Finder and go to the `Applications > Utilities` folder or use Spotlight and type *Terminal*. |\n| Windows (Rails Students) | For Rails students, we recommend using [Cloud9](https://c9.io/). By default, the [box at the bottom of the screen](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/cl-checkpoint-assets/cloud9-terminal.jpg) is the Cloud9 Terminal. |\n| Windows | On Windows, we recommend using [Git BASH](http://msysgit.github.io/) for all command line activities. Download it from the Git BASH website, install it, and open it when the installation finishes. |\n| Linux | Read Ubuntu's [\"Starting a Terminal\"](https://help.ubuntu.com/community/UsingTheTerminal) section. |\n\n### Where Am I?\n\n<center>\n![Terminal](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/cl-checkpoint-assets/terminal_blank.png)\n</center>\n\n> Terminal in OS X\n\nWhen we open the shell, it presents a prompt. At this point, the shell is complacent and waiting for instruction. We can dictate any command to the shell. When we press return (<kbd>↵</kbd>), the operating system executes the command. Type `ls` (lower case 'L', lower case 'S') and then press return <kbd>↵</kbd>. After executing `ls`, type `open .` (don't forget the space) and press return <kbd>↵</kbd>. Feel free to copy the commands:\n\n```bash(~)\n$ ls\nApplications\tDesktop\t\tDownloads\t\tMovies\t\tPictures\nDocuments\t   \tLibrary\t\tMusic\t\t    Public\n$ open .\n```\n\nHere is a video demonstration for OS X:\n\n<center><iframe src=\"https://fast.wistia.net/embed/iframe/zunb0psj2o\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"https://fast.wistia.net/assets/external/E-v1.js\" async></script></center>\n\nThe operating system executed the `ls` command after we pressed return. The `ls` command listed the contents of our current directory. A directory in Unix is the same thing as a folder in Finder (OS X) or a folder in File Explorer (Windows). Notice the names in the output of `ls` match the folder titles in Finder.\n\nThe `open .` command directed the operating system to open 'this', the period, which refers to the current directory. The operating system chose Finder to open the directory and display its contents.\n\n> The `open .` command does not work in Git BASH.\n\nLike the Finder window in OS X, the shell has a default location when opened. The Finder will default to the last folder that we were operating in when we closed it. But the shell always defaults to a directory specified in its configuration file. By default, the shell places us in our `HOME` directory.\n\nYou can also type `echo $HOME` to find the actual directory that your Git BASH/terminal defaults to, so you know what folder to open to get to your code.\n\n### What Can I Do Now?\n\nNow that we have a frame of reference, let's go over the basic commands that help us traverse the filesystem. Verify the current working directory by executing the `pwd` command. The `pwd` command stands for 'print working directory'.\n\n```bash(~)\n$ pwd\n```\n\nThe `pwd` command prints the name of our current directory to the command prompt. For OS X users it will be `/Users/your_username`, Windows users will see `/c/home/your_username` or `/home/ubuntu/workspace` on Cloud9, and Linux users will see `/home/your_username`. This is our `HOME` directory. The `~` character is also a reference to the `HOME` directory in any Unix-based system.\n\nThe filesystem is a tree, at the top of the tree is the root denoted by `/`. Below the root there are branches and other [vertices](http://en.wikipedia.org/wiki/Vertex_%28graph_theory%29). The following graphic illustrates parts of an example filesystem:\n\n<center>\n![mac_os_filsystem](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/cl-checkpoint-assets/Mac_OS_DAG.png)\n</center>\n\nThe `cd` (change directory) command offers the ability to traverse the branches to get to other vertices. Let's move through the filesystem by using the `cd` command:\n\n```bash(~)\n$ cd ..\n```\n\nThis command navigates the shell to its immediate *parent* directory. The parent of any vertex in the graph is the vertex that is connected directly above. Given the graph above, the parent of `bloc` is `Users`. The `..` is another way to reference the parent directory from the current working directory in the shell.\n\nPerform a `pwd` again:\n\n```bash(~)\n$ pwd\n```\n\nThe output should display the parent vertex of the `bloc` directory: `/Users` on OS X, `/c/home` in Git BASH, `/home/ubuntu` on Cloud9, and `/home` on Linux.\n\nPay special attention to the naming. In Windows or Linux the `/c/home` and `/home` directories are *not* the `HOME` directory, but are the parent vertices of the `HOME` directory, respectively.\n\nPerforming an `ls` will display the `HOME` directory:\n\n```bash(~)\n$ ls\nGuest     Shared    your_username\n```\n\nTo get back to the `HOME` directory, use `cd` again:\n\n```bash(~)\n$ cd your_username\n```\n\nOn Cloud9, use:\n\n```bash(~)\n$ cd workspace\n```\n\nExecuting the `ls` command again will output the contents of the `HOME` directory.\n\n## Paths\n\nIn our previous example, we used the `..` operator to move to the directory above our `HOME` directory. The `..` operator is an example of a *relative path*. Relative paths refer to other files or directories in the filesystem compared to the current working directory.\n\nIn the graphic above, the relative path from the `Desktop` directory to the `Users` directory is: `../../` since the `Users` directory is two directories above the `Desktop` directory in the filesystem hierarchy. Imagine we want to get a reference to the `hosts` file from the `Desktop` directory. Using our graphic above, the relative path from `Desktop` to `/etc/hosts` is `../../../etc/hosts`.\n\nUnix also gives us the ability to reference the `hosts` file using *absolute paths*. An absolute path is the fully qualified path of a file or directory starting from the root. The absolute path of the `hosts` file is `/etc/hosts`. The absolute path of the `Desktop` directory is `/Users/bloc/Desktop`. Notice how both examples start at the root `/`.\n\nAddresses are like paths in Unix. We can say Charlie's house is two doors down from mine. Or, we can address his house by the full address: 1234 Same Street. The former is relative as it's a correlation between a point of reference and Charlie's house whereas the latter is the exact, or absolute, address. They both reference the same house, but in a different manner.\n\nRead more about [Unix paths](http://en.wikipedia.org/wiki/Path_%28computing%29).\n\n### How Can I Manipulate Files and Directories?\n\nWe can make our way through the filesystem, but that doesn't offer us much utility. This is a list of useful commands:\n\n| Command | Guide                                                           |\n|:--------|:----------------------------------------------------------------|\n| mkdir   | Make a directory.                                               |\n| file    | Determine a file's type.                                   |\n| touch   | Create file or change file modification access time.            |\n| cp      | Copy a file.                                                    |\n| mv      | Move or rename a file.                                          |\n| rm      | Remove a file.                                                  |\n| rmdir   | Remove a directory.                                             |\n| history | Display a chronological list of the previously issued commands. |\n\nLet's go through an example that uses each of the above commands. First issue the `mkdir` command:\n\n```bash(~)\n$ mkdir bloc\n$ ls\nbloc\n$ file bloc\nbloc: directory\n```\n\nWe created a directory named `bloc`. `file` defines its file type. `cd` into `bloc` and issue the `ls` command:\n\n```bash(~)\n$ cd bloc\n$ ls\n\n```\n\nThe output is blank. Use `touch` to create a new file:\n\n```bash(~/bloc)\n$ touch bloc_file\n$ ls\nbloc_file\n$ file bloc_file\nbloc_file: empty\n```\n\n`touch` created an empty file named `bloc_file` with an unspecified type. Copy `bloc_file`, rename it and remove the original:\n\n```bash(~/bloc)\n$ cp bloc_file new_bloc_file\n$ ls\nbloc_file\tnew_bloc_file\n$ mv new_bloc_file renamed_bloc_file\n$ ls\nbloc_file\trenamed_bloc_file\n$ rm bloc_file\n$ ls\nrenamed_bloc_file\n```\n\nRemove `renamed_bloc_file`, traverse up and out of the `bloc` directory and remove the `bloc` directory:\n\n```bash(~)\n$ rm renamed_bloc_file\n$ ls\n\n$ cd ..\n$ rmdir bloc\n$ ls\n```\n\nThe output of `ls` will show that `bloc` no longer exists. Finally, issue the `history` command to display the list of commands we executed in chronological order with the oldest at the top.\n\n```bash(~)\n$ history\n285  mkdir bloc\n286  ls\n287  file bloc\n288  ls\n289  cd bloc\n290  ls\n291  touch bloc_file\n292  file bloc_file\n293  ls\n294  cp bloc_file new_bloc_file\n295  ls\n296  mv new_bloc_file renamed_bloc_file\n297  ls\n298  rm bloc_file\n299  ls\n300  rm renamed_bloc_file\n301  cd ..\n302  ls\n303  rmdir bloc\n304  history\n```\n\n### What Are Man Pages?\n\nEvery Unix distribution includes Man pages, [short for manual pages](http://en.wikipedia.org/wiki/Man_page). Man pages can be terse but are a valuable resource. Let's see an example of a man page:\n\n```bash\n$ man ls\n```\n\n> Use the <kbd>j</kbd> and <kbd>k</kbd>, the spacebar and <kbd>u</kbd> keys, or <kbd>↓</kbd> and <kbd>↑</kbd> to scroll up and down. Use the <kbd>q</kbd> key to exit the man page program.\n\n### What Are Command Options?\n\nNotice in the description of the `ls` man page, it lists a lot of options. This is typical of most Unix commands. Most commands have the ability to accept input. Options are also commonly referred to as *flags*. The `ls` command can take flags and exemplifies a typical Unix command. Issue a `cd` with no options; this will navigate the shell to our `HOME` directory and then perform `ls -a -l`:\n\n<center>\n![ls_al_output](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/cl-checkpoint-assets/ls_al_output.png)\n</center>\n\n> Our output of `ls -a -l` in Terminal\n\nIn the example, the `-a` instructs `ls` to \"include directory entries whose names begin with a dot `.`\". Any file that begins with a dot in Unix is a hidden file, so we instructed `ls` to display all hidden files. The `-l` flag tells `ls` to display the contents of the directory in long format. Use man pages to read more about the options for `ls` or any other command.\n\n### What Is Tab Completion?\n\nThe command line has a lot of keyboard shortcuts. One of the major keyboard shortcuts is tab completion. Try the following, remembering to press the [<kbd>tab</kbd>](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/cl-checkpoint-assets/keyboard.png) key after typing `p` instead of pressing <kbd>↵</kbd> (return):\n\n```bash\n$ ls -l /bin/p\npax  ps   pwd\n```\n\nAfter hitting <kbd>tab</kbd>, the shell shows all files and directories in `/bin` that start with the letter 'p'. The shell also shows commands like `pax`, `ps`, and `pwd`. If the next character we type is 's' and hit <kbd>tab</kbd> again, then the shell will remove `pax` and `pwd` from the list:\n\n```bash\n$ ls -l /bin/ps\n-rwsr-xr-x  1 root  wheel  46688 Sep  9  2014 /bin/ps\n```\n\nTab completion works with most Unix commands and is a handy feature.\n\n### How Can I Get More Help?\n\nA large number of operations exist that we haven't covered in the checkpoint. For more information, we recommend:\n\n* [The Command Line Crash Course](http://cli.learncodethehardway.org/book/)\n* [Bash Guide](http://mywiki.wooledge.org/BashGuide)\n* Our video demonstrating the commands in this checkpoint\n\n<center><iframe src=\"//fast.wistia.net/embed/iframe/g65csfmb2b\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script></center>",
          "assignment": "Using the command line:\n\n* Create a directory named `checkpoint_exercise` in your `HOME` directory.\n* Navigate into `checkpoint_exercise`.\n* Create a file named `bloc_cl_checkpoint.txt` in the `checkpoint_exercise` directory.\n* Open and edit `bloc_cl_checkpoint.txt` so that it reads, \"Hello World!\"\n* Print the contents of the file in your shell.\n* Rename `bloc_cl_checkpoint.txt` to `cl_checkpoint.txt`\n* Print the contents of the renamed file in your shell again.\n* Copy and paste the output from your `history` command to show your mentor how you did it.\n\n> * Hint (OS X): use `open bloc_cl_checkpoint.txt` to open the file in TextEdit.\n> * Hint (Git BASH): use `notepad bloc_cl_checkpoint.txt` to open the file in NotePad.\n> * Hint (Cloud9): use the sidebar file navigation to open the file in the Cloud9 Editor.\n> * Hint: you can use the `cat` command to display the contents of a file.\n\nUse [Markdown formatting](https://help.github.com/articles/markdown-basics/) to format any code snippets you include in your description. Here is an example of how to format the `ls` command in markdown.\n\n\\`\\`\\`bash<br>\n$ ls<br>\n\\`\\`\\`",
          "roadmap_section_id": 120,
          "active_index": 14,
          "checkpoint_type": "normal",
          "position": 14,
          "points": 1,
          "ref": "020816fa-330d-4233-8fb3-30b213b138dc|0"
        },
        {
          "id": 1609,
          "name": "Developer Tools: Git",
          "summary": "Git: the most popular version control system",
          "body": "<!-- { ids:[781,1563,1360,1609], name:\"Developer Tools: Git\", summary:\"Git: the most popular version control system\" } -->\nGit helps you track changes in a project and undo them when something goes wrong. Git helps teams share and manage a project, especially as the team size grows.\n\n> “Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.”\n>\n> — [Scott Chacon](http://scottchacon.com/), [Pro Git](http://git-scm.com/book)\n\nGit was built by software developers for software developers but can be used to share any type of project. In fact, Bloc uses Git to track content.\n\n## Installation\n\nIt is best to know how to use Git on the command line. Here's how to install Git for each major operating system:\n\n| Operating System | Guide |\n| :-- | :-- |\n| OS X | Download and install [Git for OS X](http://git-scm.com/). |\n| Windows | Git BASH (or Cloud9 for Rails students) comes with Git pre-installed, so there's no need to download it separately.\n| Linux | Refer to [this](http://git-scm.com/book/en/v2/Getting-Started-Installing-Git) installation guide. |\n\n## Git Configuration, Your Identity\n\nWe need to set some global settings on our Git installation. Execute the following commands:\n\n```bash(Terminal)\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email yourname@example.com\n$ git config --global color.ui true\n$ git config --global push.default simple\n```\n\nWe recommend configuring Git to use the \"simple\" configuration for pushing which can be explained in more detail [here](http://stackoverflow.com/a/19723478).\n\nThese settings are reflected in the `.gitconfig` file in our `HOME` directory. We can verify this by inspecting the `.gitconfig` file:\n\n```bash(Terminal)\n$ cat ~/.gitconfig\n[user]\n        name = Your Name\n        email = yourname@example.com\n[push]\n        default = simple\n```\n\n## Repositories\n\nA repository is a collection of files under version control. We choose what to put in a repository (or under version control). Repositories are like a shopping cart at a grocery store. The grocery store contains all possible items we could potentially buy, but we only want certain things in our shopping cart. We can pick what to put in it. The grocery store in our example correlates to the directory on our computer's filesystem that is under version control. We get to choose what files or sub-directories we want to put in the repository.\n\n### Initializing a Repository\n\nStart by creating a project that we will use as our practice repository. Create a directory named `bloc` if you don't already have one and a sub-directory in `bloc` named `shopping_cart`:\n\n```bash(~)\n$ cd ~\n$ mkdir -p bloc/shopping_cart\n```\n\nChange directories to the `shopping_cart` directory:\n\n```bash(~)\n$ cd bloc/shopping_cart\n$ pwd\n/Users/<YOUR_USERNAME>/bloc/shopping_cart\n```\n\nWe have nothing in our `shopping_cart` directory at this point. Create a file using `touch`and name it `apple.txt`:\n\n```bash(~/bloc/shopping_cart)\n$ touch apple.txt\n$ ls\napple.txt\n```\n\nCurrently, `apple.txt` is not under version control, but we can use Git to track the changes to this file and our `shopping_cart` directory over time.\n\nInitialize this directory as a repository by using `git init`:\n\n```bash(~/bloc/shopping_cart)\n$ git init .\nInitialized empty Git repository in /Users/yourusername/bloc/shopping_cart/.git/\n```\n\nWe can verify that the repository was initialized properly by doing an `ls -al`. We see a hidden directory named `.git` in the `bloc/shopping_cart` directory:\n\n```bash(~/bloc/shopping_cart)\n$ ls -al\ntotal 0\ndrwxr-xr-x   4 yourusername  staff  136 Mar 17 16:10 .\ndrwxr-xr-x   5 yourusername  staff  170 Mar 17 16:02 ..\ndrwxr-xr-x  10 yourusername  staff  340 Mar 17 16:11 .git\n-rw-r--r--   1 yourusername  staff    0 Mar 17 16:07 apple.txt\n```\n\n## Git Commands\n\n### Git Status\n\nWe can also use the `git status` command to verify the repository was initialized properly. The output of the command shows current information about a repository:\n\n```bash(~/bloc/shopping_cart)\n\n$ git status\n-On branch master\n\nInitial commit\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\tapple.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n\nThe output shows `apple.txt` is \"untracked\", developers will commonly refer to an untracked file as \"not being checked in\".\n\n### Git Add\n\nThe `shopping_cart` directory is now a repository but we still don't have any files checked in. Using our running analogy, we are at the grocery store and we have our shopping cart, but we haven't put anything in it yet! We must tell Git which files we want to put under version control. Use the `git add` command to put `apple.txt` under version control:\n\n```bash(~/bloc/shopping_cart)\n$ git add apple.txt\n```\n\nRun `git status`:\n\n```bash(~/bloc/shopping_cart)\n$ git status\nOn branch master\n\nInitial commit\n\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n\n        new file:   apple.txt\n```\n\nWe *staged* `apple.txt`. Using our grocery store example, the staging state would be analogous to putting an item in the shopping cart before checking out. We still have time to think about whether we really want to buy this item from the store before we actually pay for it. Anything that is not staged will not be committed, just as anything we didn't put in our shopping cart will not be bought.\n\nLet's create another file named `banana.txt` using `touch`:\n\n```bash(~/bloc/shopping_cart)\n$ touch banana.txt\n$ ls\napple.txt  banana.txt\n```\n\nRun `git status` again:\n\n```bash(~/bloc/shopping_cart)\n$ git status\nOn branch master\n\nInitial commit\n\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n\n        new file:   apple.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        banana.txt\n```\n\nNotice from the result of the `git status` command we issued, the `banana.txt` file is *unstaged*. The file is in the `shopping_cart` directory, but not under version control.\n\n### Git Commit\n\nNow that `apple.txt` is under version control, we have the ability to take snapshots of the file at any given time. To take a snapshot of the `apple.txt` file we use the `git commit` command:\n\n```bash(~/bloc/shopping_cart)\n$ git commit -m \"Create the apple.txt file\"\n[master (root-commit) 5b1d5c8] Create the apple.txt file\n 1 file changed, 0 insertions(++), 0 deletions(-)\n create mode 100644 apple.txt\n```\n\nBy issuing the commit command, we have instructed Git to save the current state of the `apple.txt` file. Committing is like checking out at the grocery store in that once the item is committed it is a part of the permanent collection of items in our shopping cart when we leave the store. Also take note of the tense we used for the commit message, \"Create the apple.txt file\". We use the _imperative mood_. This philosophy is drawn directly from the [Git guidelines](http://git.kernel.org/cgit/git/git.git/tree/Documentation/SubmittingPatches?id=HEAD):\n\n> Describe your changes in imperative mood, as if you are giving orders to the codebase to change its behavior; for example, \"make xyz do abc\" instead of \"[This patch] makes xyz do abc\" or \"[I] changed xyz to do abc\". Make sure your explanation can be understood without external resources.\n\nLet's stage and commit `banana.txt`:\n\n```bash(~/bloc/shopping_cart)\n$ git add banana.txt\n$ git commit -m \"Add banana.txt\"\n```\n\n### Git Log and Git Show\n\nWe can visualize the commit by using another command named `git log`:\n\n```bash(~/bloc/shopping_cart)\n$ git log\ncommit 70914a2f007f13fa0b27676fb8e9512157b324d4\nAuthor: yourusername <yourusername@example.com>\nDate:   Mon Jun 1 15:30:51 2015 -0700\n\n    Add banana.txt\n\ncommit 30fef231aa765caaac7bd0d84d69c09aa82ab03b\nAuthor: yourusername <yourusername@example.com>\nDate:   Mon Jun 1 15:23:08 2015 -0700\n\n    Create the apple.txt file\n```\n\nThe Git log shows our two commits. Inspect the latest commit by issuing the Git show command:\n\n```bash(~/bloc/shopping_cart)\n$ git show --pretty=\"format:\" --name-only HEAD\n\nbanana.txt\n```\n\nThe output shows `banana.txt` as the only file in the commit. The gnarly strings `30fef231aa765caaac7bd0d84d69c09aa82ab03b` and `70914a2f007f13fa0b27676fb8e9512157b324d4 ` are the unique identifiers for each commit called the `hash`. The `hash` that you see will be different from this one, but the important concept is that each commit has a unique identifier. The `hash` is similar to the receipt you get when you check out of the grocery store. It is an identifier for the groceries that you have decided to buy that has meta information like date and time.\n\n## Using .gitignore to Ignore Files\n\nA grocery store has many items that we don't want to bring home such as tomatoes. Let's imagine that when we got our shopping cart, it already had tomatoes in it. We're too lazy to remove the tomatoes from our cart so we ignore them when we checkout. Similarly, in Git, you can harness the power of the `.gitignore` file to ignore any files that you may not want under version control. Create a file named `tomatoes.txt` in the `shopping_cart` directory:\n\n```bash(~/bloc/shopping_cart)\n$ touch tomatoes.txt\n```\n\nRun `git status`:\n\n```bash(~/bloc/shopping_cart)\n$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        tomatoes.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n\n`tomatoes.txt` is untracked, but we never want to add it and we don't want Git to complain. Create a `.gitignore` file to do just that:\n\n```bash(~/bloc/shopping_cart)\n$ touch .gitignore\n$ echo \"tomatoes.txt\" >> .gitignore\n```\n\nPerform another `git status`:\n\n```bash(~/bloc/shopping_cart)\n$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        .gitignore\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n\nGit no longer complains about `tomatoes.txt` being untracked, but it does see there's a new file named `.gitignore`. Add the `.gitignore` file to the repository:\n\n```bash(~/bloc/shopping_cart)\n$ git add .gitignore\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   .gitignore\n\n$ git commit -m \"Add .gitignore\"\n[master 5888285] Add .gitignore\n 1 file changed, 1 insertion(+)\n create mode 100644 .gitignore\n```\n\nGit now knows to both ignore `tomatoes.txt` and also add the `.gitignore` file to our repository.\n\n### Git Remove\n\nGit's `rm` command can be used to remove items from our repository. For example, if we wanted to remove a file named `rotten_apples.txt`, we would run the following command (don't actually run this command):\n\n```bash(~/bloc/shopping_cart)\n$ git rm rotten_apples.txt\n\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        deleted:    rotten_apples.txt\n```\n\n## Branches\n\nA simple way to visualize a Git repository is to imagine a tree. Our main branch, usually master, is the trunk of the tree.\n\n<center>\n![Tree](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/git-checkpoint-assets/repository-diagram.png)\n</center>\n\nRepositories default to the `master` branch. It is the official record of production-ready code and shouldn't include any bugs or dysfunctional code. When introducing a new feature or experimenting with code, it is a good idea to work on a separate branch. A branch provides an isolated environment to work in without disturbing existing code.\n\nTo create a new branch, use the Git checkout command with the `-b` option to specify the branch. This command will create the specified branch, and switch to it at the same time. Create a new branch on our local repository named `new_grocery_list`:\n\n```bash(~/bloc/shopping_cart)\n$ git checkout -b new_grocery_list\nSwitched to a new branch 'new_grocery_list'\n```\n\nWe can view all the existing branches by issuing the `git branch` command:\n\n```bash(~/bloc/shopping_cart)\n$ git branch\n  master\n* new_grocery_list\n```\n\nWe created a branch named `new_grocery_list` as well as \"checked it out\", which effectively means we switched to that branch. By switching to the `new_grocery_list` we are operating on the branch without affecting the `master` branch, it is completely independent. When created, the `new_grocery_list` branch contains the same files as the `master` branch. Execute the `ls` command on the command line to illustrate this:\n\n```bash(~/bloc/shopping_cart)\n$ ls\napple.txt  banana.txt  tomatoes.txt\n```\n\nNote that the contents of the directory are unchanged. Use the following commands to create a file named `orange.txt` in the `new_grocery_list` branch, add it, and then commit it:\n\n```bash(~/bloc/shopping_cart)\n$ touch orange.txt\n$ git status\nOn branch new_grocery_list\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        orange.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n$ git add orange.txt\n$ git status\nOn branch new_grocery_list\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   orange.txt\n\n$ git commit -m \"Add orange.txt on new_grocery_list\"\n[new_grocery_list 1064da0] Add orange.txt on new_grocery_list\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100755 orange.txt\n```\n\n## Help\n\n* [GitHub has extensive resources](https://training.github.com/resources/videos/)\n* [Interactive command line on GitHub](https://try.github.io/levels/1/challenges/1)\n* Tutorial Video Below\n\n<center><iframe src=\"//fast.wistia.net/embed/iframe/8pr6qazlyr\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script></center>",
          "assignment": "* From master, create a new branch named `shopping_cart_assignment`:\n\n```bash(~/bloc/shopping_cart)\n$ git checkout master\n$ git checkout -b shopping_cart_assignment\n```\n\n* Remove `apple.txt` from the repository using `git rm`:\n\n```bash(~/bloc/shopping_cart)\n$ git rm apple.txt\n```\n\n* Add the text \"Git Checkpoint Assignment.\" to `banana.txt`.\n* Create a file named `lettuce.txt` and add the output of the `git diff` command as the contents:\n\n```bash(~/bloc/shopping_cart)\n$ git diff > lettuce.txt\n```\n\n* Commit the changes you have made.\n* Run `cat lettuce.txt` to print the contents of `lettuce.txt`.\n* Copy the output into a Markdown code block and send it to your Mentor for review.",
          "roadmap_section_id": 120,
          "active_index": 15,
          "checkpoint_type": "normal",
          "position": 15,
          "points": 1,
          "ref": "ab85702e-e777-4463-a01a-15ac49eea960|0"
        },
        {
          "id": 1610,
          "name": "Developer Tools: GitHub",
          "summary": "GitHub: manage and share Git repositories",
          "body": "<center>\n![Octocat](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/git-checkpoint-assets/baracktocat.jpg)\n</center>\n\n## GitHub\n\n[GitHub](https://github.com) is a web service which maintains a copy of a repository in the cloud. If you haven't already, take a few moments to [create a GitHub account](https://github.com/join). Think of GitHub as a pantry (or refrigerator) in the grocery store example we used from the Git checkpoint. We bought our groceries (created our repository) and want to share them with others. We can put our groceries in our pantry (GitHub) at home for others to consume.\n\n### Connect GitHub to Bloc\n\nLet's connect your GitHub account to Bloc. Go to your account page in Bloc:\n\n![Bloc Account Section](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/git-checkpoint-assets/account.png)\n\nScroll down to the text box that says \"GITHUB HANDLE\". Put your GitHub username in:\n\n![GitHub Handle](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/git-checkpoint-assets/github_username.png)\n\nContinue to scroll down until you see the \"Update Account\" button. Press the button and your GitHub account should now be connected to Bloc:\n\n![Update Account](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/git-checkpoint-assets/update_account.png)\n\n### GitHub Authentication\n\nThere are two ways to authenticate with GitHub when interacting with repositories from the command line. If you're using SSH, then you can set up SSH keys. If you're using HTTPS, then you can use [password caching](https://help.github.com/articles/caching-your-github-password-in-git/). In this guide, we have used SSH as our means of interacting with GitHub. If you don't have a reason to use HTTPS, use SSH.\n\n### SSH Keys\n\nGenerate an SSH key for your machine by following [these instructions](https://help.github.com/articles/generating-ssh-keys#platform-mac).\n\n> If you're using Cloud9 your SSH Key is already generated and can be retrieved from your account settings. Copy the key and start with step 4.\n\nOnce the key is generated, follow the remaining steps in GitHub's guide to add them to your account. After the keys are set up, we can actually push the data to GitHub.\n\n### HTTPS Password Caching\n\nIf you choose to use HTTPS, then use [this guide](https://help.github.com/articles/caching-your-github-password-in-git/) to set up password caching.\n\n### Setting a Remote Repository\n\nHow do we get our groceries to the pantry, or rather how do we get the items in a repository to GitHub? Git has a built in command called `push` that will take care of this for us.\n\nBut where are we pushing our data to? First, we need to set up the repository on GitHub itself. Go to GitHub, log in, find the \"+\" mark on the top right of the screen and select \"New repository\".\n\n<center>\n![New Repository](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/git-checkpoint-assets/github_new_repo.gif)\n</center>\n\nName the repository `the_pantry`. Type any description. We can optionally use GitHub's convenient prebuilt `.gitignore` file feature. Since our repository already has a `.gitignore` we created manually, let's leave it as `None`:\n\n![.gitignore](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/git-checkpoint-assets/github_gitignore.png)\n\n> The selections in the `Add .gitignore` dropdown populate `.gitignore` with a list of known files per project type that don't need to be version controlled.\n\nWe can now view the repository on GitHub at this URL:\n\n```\nhttps://github.com/YOUR_GITHUB_USERNAME/the_pantry\n```\n\nAfter we create the repository on GitHub, we need to create our local repository and point it at GitHub.\n\nCreate a directory named `bloc` if you don't already have one and a sub-directory in `bloc` entitled `the_pantry`:\n\n```bash(~)\n$ cd\n$ mkdir -p bloc/the_pantry\n```\n\nChange directories to the `the_pantry` directory:\n\n```bash(~)\n$ cd bloc/the_pantry\n$ pwd\n/Users/<YOUR_USERNAME>/bloc/the_pantry\n```\n\nRun the following commands, replacing `YOUR_GITHUB_USERNAME` with your GitHub username:\n\n```bash(~/bloc/the_pantry)\n$ git init .\n$ git remote add origin git@github.com:YOUR_GITHUB_USERNAME/the_pantry.git\n```\n\nVerify that the remote server is set correctly by running the following command:\n\n```bash(~/bloc/the_pantry)\n$ git remote -v\norigin  git@github.com:YOUR_GITHUB_USERNAME/the_pantry.git (fetch)\norigin  git@github.com:YOUR_GITHUB_USERNAME/the_pantry.git (push)\n```\n\nWe can also verify that the remote is set properly by examining Git's configuration file:\n\n```bash(~/bloc/the_pantry)\n$ cat .git/config\n[core]\n        repositoryformatversion = 0\n        filemode = true\n        bare = false\n        logallrefupdates = true\n        ignorecase = true\n        precomposeunicode = true\n[remote \"origin\"]\n        url = git@github.com:YOUR_GITHUB_USERNAME/the_pantry.git\n        fetch = +refs/heads/*:refs/remotes/origin/*\n```\n\nThe configuration file shows a remote server that we have named \"origin\". This is the default name used for remote repositories. Its URL points to our repository on GitHub. We want to push the data to this remote repository, but before we do that we need a way to authenticate with GitHub.\n\n### Git Push\n\nLet's add a file to `the_pantry`:\n\n```bash(~/bloc/the_pantry)\n$ echo \"# the_pantry\" >> README.md\n$ git add README.md\n$ git commit -m \"first commit\"\n```\n\nNow that we have pointed our local repository to GitHub and have authentication set properly, push the data to the remote repository:\n\n```bash(~/bloc/the_pantry)\n$ git push origin master\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 226 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@github.com:YOUR_GITHUB_USERNAME/the_pantry.git\n * [new branch]      master -> master\n```\n\nWe told Git to push our local `master` branch to a remote branch named `master` towards \"origin\" which we set up previously. We have successfully stowed our groceries in the fridge and pantry.\n\n### Pull Requests\n\nOne of the easiest ways to share a commit on a branch is by creating a [pull request](https://help.github.com/articles/using-pull-requests). Pull requests can only exist on branches that aren't the main branch. Create a new branch off of master called `my_new_branch`, make a trivial change and then push it to GitHub:\n\n```bash(~/bloc/the_pantry)\n$ git checkout master\n$ git checkout -b my_new_branch\n$ touch my_new_branch_file.txt\n$ git add my_new_branch_file.txt\n$ git commit -m \"Add a new file\"\n$ git push origin my_new_branch\n```\n\nOnce you've pushed the branch, visit the repository page on GitHub and there should be a green button that says \"Compare & pull request\".\n\n![compare and pull request](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/git-checkpoint-assets/github_pr.png)\n\nClick it \"Compare & pull request\". We are presented with a the \"Open a pull request screen\".\n\n![Open a pull request](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/git-checkpoint-assets/github_open_pr.png)\n\nWe aren't actually going to submit this pull request. If we did, we would want base to be set to the branch we want to merge to. For example if we wanted to merge `my_new_branch` to `master` we would set base to `master`.\n\nSince this pull request was only meant to be a lesson, you should delete the branch rather than merging the pull request:\n\n```bash(~/bloc/the_pantry)\n$ git checkout master\n$ git branch -D my_new_branch\n$ git push origin --delete my_new_branch\n```\n\n`git branch -D my_new_branch` will delete your local copy of the branch while `git push origin --delete my_new_branch` will delete the remote copy.\n\n### Merging\n\nMerging combines two branches into one. Merge conflicts happen when the same file or part of a file is changed on two different branches and then said branches are merged back together. Git doesn't know which changes it should take as authoritative. We will illustrate merge conflicts using our grocery store example. First, make sure you are on the `new_grocery_list` branch and add some content to `orange.txt`, then commit it:\n\n\n```bash(~/bloc/the_pantry)\n$ git checkout -b new_grocery_list\n$ echo \"I'm in new_grocery_list\" > orange.txt\n$ git add orange.txt\n$ git commit -m \"Merge conflict\"\n```\n\nNext, checkout the `master` branch in the `the_pantry` repository:\n\n```bash(~/bloc/the_pantry)\n$ git checkout master\n```\n\nCreate the `orange.txt` file on `master` with the content below using the `echo` command, then commit your changes to `orange.txt`:\n\n```bash(~/bloc/the_pantry)\n$ touch orange.txt\n$ echo \"I'm in master\" > orange.txt\n$ git add orange.txt\n$ git commit -m \"Merge conflict\"\n[master 93261a2] Merge conflict\n 2 files changed, 1 insertion(+), 1 deletion(-)\n create mode 100755 orange.txt\n```\n\nThe next step is to merge the `new_grocery_list` branch into `master`:\n\n```bash(~/bloc/the_pantry)\n$ git merge new_grocery_list\nAuto-merging orange.txt\nCONFLICT (add/add): Merge conflict in orange.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n```\n\nThere is a conflict and Git doesn't know which content in the file is authoritative. Open the `orange.txt` file in a text editor. It will look like this:\n\n```\n<<<<<<< HEAD\nI'm in master.\n=======\nI'm in new_grocery_list\n>>>>>>> new_grocery_list\n```\n\nThe content from the `master` branch is above the `=======` and the content from `new_grocery_list` is below the `=======`. \"HEAD\" is a paradigm Git uses to refer to the topmost commit on the current operating branch. We have to make the decision as to what content we want in the file by deleting what we don't want and then saving the file. We can keep all of the content by just removing the lines:`<<<<<<< HEAD`, `=======`, and `>>>>>>> new_grocery_list`.\n\nRemove the content in `master` and leave the content from `new_grocery_list`. Thus the file should look as such:\n\n```\nI'm in new_grocery_list\n```\n\nAfter the file is edited, we need to stage it then commit to mark the conflict as resolved:\n\n```bash(~/bloc/the_pantry)\n$ git add orange.txt\n$ git commit -m \"Fix merge conflict\"\n[master 538d044] Fix merge conflict\n```\n\nPush the merged `master` branch, and the `new_grocery_list` branch to GitHub:\n\n```bash(~/bloc/the_pantry)\n$ git push origin master\n$ git push origin new_grocery_list:new_grocery_list\n```\n\n### Git Clone\n\nWe have successfully pushed content to GitHub. This allows other developers on our team to see changes or *clone* them to their local computer so they can collaborate. Let's simulate what the perspective of a potential team member would look like. First, change to the directory above `the_pantry` and create a directory named `the_pantry_clone`:\n\n```bash(~/bloc)\n$ cd ..\n$ mkdir the_pantry_clone\n$ cd the_pantry_clone\n```\n\nNext, copy the SSH link from `the_pantry` by navigating to it on GitHub and selecting \"SSH clone URL\" on the lower right hand part of the browser as seen below:\n\n<center>\n![Git Clone](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/git-checkpoint-assets/clone.gif)\n</center>\n\nWith the link copied, go back to the command line and execute the `git clone` command below. Don't forget the period `.` at the end. It tells Git to copy the contents of the repository directly into the current working directory.\n\n ```bash(~/bloc/the_pantry_clone)\n $ git clone git@github.com:YOUR_GITHUB_USERNAME/the_pantry.git .\n ```\n\nWe cloned the initial repository into `the_pantry_clone`. Make a change to `apple.txt`, push the change and view it on GitHub:\n\n```bash(~/bloc/the_pantry_clone)\n$ git checkout master\n$ echo \"Change from clone\" >> apple.txt\n$ git add apple.txt\n$ git commit -m \"Change from clone\"\n$ git push origin master\n```\n\nGitHub shows the new commit in the `master` branch. This is a basic example of the type of workflow that Git and GitHub provide.\n\n<center>\n![](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/git-checkpoint-assets/github_clone.png)\n</center>\n\n### Help\n\n* [GitHub has extensive resources](https://training.github.com/resources/videos/).",
          "assignment": "* Create a new branch named `the_pantry_assignment` from `master` in the `the_pantry_clone` repository.\n* Add the text \"GitHub Checkpoint Assignment\" to `README.md`.\n* Stage and commit `README.md`.\n* Push `the_pantry_assignment` to GitHub.\n* Submit a pull request on GitHub from `the_pantry_assignment` to `master`.\n* Merge the pull request to `master` on GitHub.\n* Switch back to Bloc.\n* In the submission section, select `the_pantry` and \"Merge pull request #1\" as your commit.\n* Submit this commit to your mentor for review.",
          "roadmap_section_id": 120,
          "active_index": 16,
          "checkpoint_type": "normal",
          "position": 16,
          "points": 1,
          "ref": "1e193f32-c7c1-49ae-923d-13c2a2f59632|0"
        },
        {
          "id": 1611,
          "name": "Atom",
          "summary": "Atom: a text editor for coding",
          "body": "<center>![welcome-to-atom](https://bloc-global-assets.s3.amazonaws.com/images-rails/atom/welcome-to-atom.png)</center>\n\n## Why Atom?\n\n> If you've set up your environment using a cloud IDE, we suggest sticking with its default text editor. Instead of installing Atom, go to the assignment and complete it.\n\nThere are many editors you can use to write code. A robust text editor can make coding more efficient and pleasant. There are many options which all have merit, but the text editor of choice at Bloc is [Atom](https://atom.io/). Atom is a text editor that's modern, approachable, customizable, open source, and free. It is built and maintained by GitHub.\n\nIf you have a **local** environment setup, the first step is to [download Atom](https://atom.io) and install it.\n\n## Take Atom for a Test Drive\n\nOpen Atom and create a new file named `hello_world.rb`. Type the following lines of code in the editor:\n\n```ruby(hello_world.rb)\ndef hello_world\n  puts \"hello world\"\nend\n```\n\nAtom automatically highlights and colors important syntax elements of the code. Syntax highlighting improves the readability and context of code. It also helps us find mistakes in code.\n\n## Atom Command Line Shortcut\n\nYou can use Atom to open files from the command line, which is extremely useful. To open a file in Atom, use the `atom` command that was installed with Atom:\n\n```bash(Terminal)\n$ atom hello_world.rb\n```\n\n`atom` can also be used to open an entire directory:\n\n```bash(Terminal)\n$ atom .\n```\n\n## Package Manager\n\nAtom ships with a built-in package manager which makes it easy to install plugins that make Atom pleasant and productive to work with. Hit `CMD+SHFT+P` if you're on a Mac or `CTRL+SHFT+P` if you're using a Windows machine. Start typing \"Install Package\", select \"Setting View: Install Packages and Themes\" and hit `enter`. This opens the \"Install\" section of \"Setting\":\n\n<center>![install package](https://bloc-global-assets.s3.amazonaws.com/images-rails/atom/install-packages.png)</center>\n\nIn the search box, enter \"minimap\", click enter and scroll down to the \"minimap\" package and install it:\n\n<center>![install package](https://bloc-global-assets.s3.amazonaws.com/images-rails/atom/install-mini-map.png)</center>\n\n`minimap` displays a smaller map of the current file to the right of the main window. This is helpful for navigating large files.\n\nThere are many other Atom packages and themes, experiment with changing the default Atom theme.\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Atom](https://atom.io/) | Atom is a sophisticated text editor for code, markup, and prose. |\n| [`atom` command](https://atom.io/docs/latest/getting-started-atom-basics#opening-modifying-and-saving-files) | The `atom` command opens files and directories in Atom, from the command line. |\n| [Atom Package Manager](https://atom.io/packages) | The Atom Package Manager makes it simple to find, install, and keep packages up-to-date. |",
          "assignment": "Atom is just one text editor among many others you can use. In this assignment, we'll explore another, Vim. Vim is a command line based text editor, and is installed on almost all Unix and Unix-like operating systems. It is a powerful text editor which you will inevitably encounter during your development journey. If you don't have Vim installed on your computer, search the internet for installation instructions or reach out to your mentor for help on how to get it installed.\n\n1. Open your command line and create a new file with Vim:\n```bash(Terminal)\n$ vim hello_world_with_vim.rb\n```\n\n2. Vim has [several modes](http://en.wikibooks.org/wiki/Learning_the_vi_Editor/Vim/Modes) in which it can operate. By default it starts in normal mode. To enter text in the file, switch to insert mode by hitting the `i` key.\n\n3. Enter the following code:\n  ```ruby(hello_world_with_vim.rb)\n  def hello_world\n    puts \"hello world, vim is cool!\"\n  end\n  ```\n\n4. To leave insert mode and return to normal mode, hit the `ESC` key.\n\n5. To save the file and close Vim, enter: `:wq`. This tells Vim to write the changes to disk, and then quit. The `:wq` command is one of many available [vim commands](http://www.fprintf.net/vimCheatSheet.html).\n\n6. Read what you created:\n  ```bash(Terminal)\n  $ cat hello_world_with_vim.rb\n  ```\n\n7. We've barely scratched the surface of Vim's power. Explore the [vimtutor](http://linuxcommand.org/man_pages/vimtutor1.html) to discover more of the power Vim offers developers.\n\nMessage your mentor the contents of `hello_world_with_vim.rb` to complete this assignment.",
          "roadmap_section_id": 120,
          "active_index": 17,
          "checkpoint_type": "normal",
          "position": 17,
          "points": 1,
          "ref": "31ff4ff1-e992-44ee-96f6-889b573b483e|0"
        },
        {
          "id": 1625,
          "name": "Address Bloc: Basic Ruby App",
          "summary": "Basic Ruby App: Running a Ruby App from the command line",
          "body": "<!-- { ids:[1625], name:'Address Bloc: Basic Ruby App', summary:'Basic Ruby App: Running a Ruby App from the command line' } -->\n> “I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming, and to be happy. That is the primary purpose of Ruby language.”\n>\n> — Yukihiro Matsumoto, the creator of Ruby\n\n## Introduction\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/fejbqamrfs\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWe've spent the last several checkpoints learning Ruby in the browser, but now it's time to start using it locally. Over the next six checkpoints we'll build our first Ruby application, an address book application called Address Bloc. We'll learn how to run a Ruby program from the command line, create an interactive menu, represent the address book and entries with Ruby models, import entries from a file, search the address book, and testing.\n\n## IRB\n\nThe best tool to start working with Ruby locally is the Interactive Ruby Shell (IRB). IRB allows us to immediately execute Ruby commands on the fly.\n\n> While working through the Ruby browser exercises you might have wondered how Ruby developers can memorize the massive collection of Ruby classes and methods. The secret is; they don't! If you ask a Ruby developer about an obscure class or method, you're likely to see them run IRB and start experimenting with it to remind themselves what it does.\n\nStart IRB from the command line:\n\n```bash(Terminal)\n$ irb\nirb(main):001 >\n```\n\n> `irb(main):001 >` is the IRB prompt. `:001` is the current line number.\n\nYou can use IRB as a simple calculator:\n\n```bash(Terminal)\nirb(main):001 > 3 + 3\n => 6\nirb(main):002 >\n```\n\n`=> 6` is the value returned after we add `3` and `3` together.\n\nOr to create and use variables:\n\n```bash(Terminal)\nirb(main):002 > name = \"John Jay\"\n => \"John Jay\"\nirb(main):003 > name.length\n => 8\nirb(main):004 >\n```\n\nOr even to define and call methods. Let's create the [classic \"Hello, World! program](http://en.wikipedia.org/wiki/%22Hello,_World!%22_program) in IRB:\n\n```bash(Terminal)\nirb(main):004 > def hello\nirb(main):005?>   puts \"Hello, World!\"\nirb(main):006?>   end\n => :hello\n irb(main):007 > hello\n Hello, World!\n  => nil\n```\n\n> `hello` doesn't return a value. Instead, it returns `nil`, as the `=> nil` line shows.\n\nLet's watch a video that demonstrates how to use IRB from the command line:\n\n<center>\n<a href=\"//fast.wistia.net/embed/iframe/ow4pjc3b7x?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Objects Solutions</a>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>\n\n## Running a Ruby Program\n\nIRB is a great tool for experimentation and learning, but when you exit IRB everything you wrote will be erased. To save code you'll write it in a Ruby file, which ends with an `.rb` extension. Exit IRB using the `exit` command and then create a new Ruby file:\n\n```bash(Terminal)\n$ touch hello_world.rb\n```\n\nAnd then adding Ruby code inside of it:\n\n```ruby(hello_world.rb)\n+def hello_world\n+  puts \"Hello, World!\"\n+end\n+\n+hello_world\n```\n\nThat's it! We've created our first stand-alone Ruby program.\n\nRuby is an [interpreted language](http://en.wikipedia.org/wiki/Interpreted_language), which means we can execute it directly, without needing to compile it first. Running it is simple as:\n\n```bash(Terminal)\n$ ruby hello_world.rb\nHello, World!\n```\n\n## Command-line Arguments\n\nIt's often useful to be able to pass arguments to our programs when we run them, via command-line arguments:\n\n```bash(Terminal)\n$ ruby hello_world.rb arg1 arg2 arg3\n```\n\nCommand-line arguments have many uses. They can be used to pass in the name of files to modify, provide options to change how the program is executed, or just pass in simple values to be used. Let's modify the hello world program so that can say hello to any number of people:\n\n```ruby(hello_world.rb)\n def hello_world\n # #1\n+  ARGV.each do |arg|\n+    puts \"Hello, #{arg}!\"\n+  end\n-  puts \"Hello, World!\"\n end\n\nhello_world\n```\n\n__#1__, Command-line variables are stored in an array called `ARGV`. We can access and treat `ARGV` just like any other array.\n\nRun the improved program and provide some people to say hello to via command-line arguments:\n\n```bash(Terminal)\n$ ruby hello_world.rb Kermit Piggy Statler Waldorf Janice Fozzie Camilla\n```\n\n## AddressBloc\n\nNow that we've explored IRB and written our first Hello World program, it's time to start Address Bloc. Follow the [Git Checkpoint Workflow resource to create a repository](https://www.bloc.io/resources/git-checkpoint-workflow#create-a-repository) to create a repository on GitHub and clone it locally. Name it \"address-bloc\".\n\n`cd` into `address-bloc` and create a new Git feature branch. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\nAddress Bloc will consist of multiple Ruby files, but for now we'll create the main Ruby program to run AddressBloc:\n\n```bash(Terminal)\n$ touch address_bloc.rb\n```\n\nOpen `address_bloc.rb` and add a message to welcome users to Address Bloc:\n\n```ruby(address_bloc/address_bloc.rb)\n+puts \"Welcome to AddressBloc!\"\n```\n\nRun Address Bloc:\n\n```bash(Terminal)\n$ ruby address_bloc.rb\nWelcome to AddressBloc!\n$\n```\n\nWe've laid the foundation for our first Ruby program. In the next checkpoint, we'll add more functionally and create an interactive menu for Address Bloc users.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.\n\n## Recap\n| **Concept** | **Description** |\n| :-- | :-- |\n| [IRB](http://ruby-doc.org/stdlib-2.0/libdoc/irb/rdoc/IRB.html) | IRB is a tool used to interactively execute Ruby expressions read from the standard input. |\n| `ruby` | The `ruby` command invokes the Ruby interpreter to run Ruby programs from the command line. |",
          "assignment": "Write a program named `greeting.rb` that takes multiple command-line arguments. The first argument should be the greeting to be used. The rest of the arguments should be the names of people to greet. The program should print out a greeting for each person. For example:\n\n```bash(Terminal)\n$ ruby greeting.rb Hey Sterling Cheryl Lana\n```\n\nshould output:\n\n```bash(Terminal)\nHey Sterling\nHey Cheryl\nHey Lana\n```\n\nand\n\n```bash(Terminal)\n$ ruby greeting.rb Yo Cyril Archer Krieger\n```\n\nshould output:\n\n```bash(Terminal)\nYo Cyril\nYo Archer\nYo Krieger\n```\n\nCreate `greeting.rb` in your `code` directory. Once your assignment is complete, submit your code to your mentor via the Discussion tab.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/zup5t4wk2r?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Address Bloc: Basic Ruby App Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 18,
          "checkpoint_type": "normal",
          "position": 18,
          "points": 1,
          "ref": "234dee98-19c4-447c-8f66-2483988dec90|0"
        },
        {
          "id": 1626,
          "name": "Address Bloc: Models",
          "summary": "Models: storing data in a structured interface for easy manipulation",
          "body": "<!-- { ids:[1626], name:'Address Bloc: Models', summary:'Models: storing data in a structured interface for easy manipulation' } -->\n\n> “Maybe there's more to life than being really, really, really ridiculously good looking?”\n>\n> — Derek Zoolander, Model\n\n## Introduction\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/4je0ptx3ym\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nAddress Bloc will need to [model](http://en.wikipedia.org/wiki/Data_modeling) an internal address book and all its entries. Models provide a structured interface to the data source in a project which allows for easier manipulation of the underlying data.\n\nWe'll practice [Test-Driven Development (TDD)](http://www.agiledata.org/essays/tdd.html) by creating tests before we write functional code. TDD might seem like a backward way to write code, but programming this way encourages us to think carefully about expected behavior and desired design. The resulting code base tends to be very modular and easy to change, making the app's development smoother and more sustainable. It keeps our work's scope tight, making it hard to drift into tangential or irrelevant changes.\n\nFor testing, we'll use the popular and powerful testing framework [RSpec](http://rspec.info/). Install it using the `gem` command:\n\n```bash(Terminal)\n$ gem install rspec\n```\n\n> After installing the gem, consider running the `rspec --init` command to generate an `.rspec` file, which should contain the default color setting of `--color`. This will colorize the RSpec output. Additionally, consider installing the [Nyan Cat Formatter](https://github.com/mattsears/nyan-cat-formatter) because it's fun.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## The `Entry` Model\n\nWe'll start by creating a model to store our address book entries, `Entry`.\n\nLet's create directories to store our models and specs (RSpec's names for tests):\n\n```bash(Terminal)\n$ cd address-bloc\n$ mkdir models\n$ mkdir spec\n```\n\nCreate two files: one for `Entry`, and one for `entry_spec.rb`:\n\n```bash(Terminal)\n$ touch models/entry.rb\n$ touch spec/entry_spec.rb\n```\n\n### `Entry` Attributes\n\nWe'll keep our tests in the `spec` directory. Open `entry_spec.rb` and add the following:\n\n```ruby(spec/entry_spec.rb)\n+require_relative '../models/entry'\n+\n+RSpec.describe Entry do\n+\n+end\n```\n\nAll we have here is the skeleton of our test file. We'll use [RSpec](http://rspec.info/) to test our code. We can run the spec by using `rspec` with the following command:\n\n```bash(Terminal)\n$ rspec spec/entry_spec.rb\nentry_spec.rb:3:in `<top (required)>': uninitialized constant Entry (NameError)\n...\n```\n\nOur output shows a `NameError` which indicates that our spec failed when we executed it. This is because we reference `Entry` in the spec, but `Entry` is not defined anywhere in Address Bloc. Let's define `Entry` in `models/entry.rb` by creating a _stub_ of the class. A [stub](https://en.wikipedia.org/wiki/Method_stub) in programming terminology is an empty class, or method. A stub is sort of like a pencil sketch for a painting: we create a sketch of what we're going to paint first and then fill in the rest with actual paint later.\n\n```ruby(models/entry.rb)\n+class Entry\n+\n+end\n```\n\nLet's execute our spec again:\n\n```bash(Terminal)\n$ rspec spec/entry_spec.rb\nNo examples found.\n\nFinished in 0.00015 seconds (files took 0.1186 seconds to load)\n0 examples, 0 failures\n```\n\nRSpec tells us that there are no examples found. This is because we haven't added a test to `entry_spec.rb`. The term `example` in this context is synonymous with test.\n\nLet's create our first set of tests for `Entry`. `Entry` will need attributes, including `name`, `phone_number`, and `email`. Our first specs will test that `Entry` responds to these attributes. Open `entry_spec.rb` and add the following:\n\n```ruby(models/entry.rb)\n require_relative '../models/entry'\n \n # #1\n RSpec.describe Entry do\n   # #2\n+  describe \"attributes\" do\n     # #3\n+    it \"responds to name\" do\n+      entry = Entry.new\n       # #4\n+      expect(entry).to respond_to(:name)\n+    end\n \n+    it \"responds to phone number\" do\n+      entry = Entry.new\n+      expect(entry).to respond_to(:phone_number)\n+    end\n+\n+    it \"responds to email\" do\n+      entry = Entry.new\n+      expect(entry).to respond_to(:email)\n+    end\n+  end\n end\n+\n```\n\n__#1__ is the standard first line of an RSpec test file. We are saying that the file is a spec file and that it tests `Entry`.\n\nAt __#2__, we use `context` to give our test structure and communicate that all specs inside it belong to the same context. In this case, we're using it to communicate that the specs in the context will test `Entry` attributes.\n\nAt __#3__, we separate our individual tests using the `it` method. Each `it` represents a unique test.\n\nAt __#4__ each RSpec test ends with one or more `expect` method, which we use to declare the expectations for the test. If those expectations are met, our test passes, if they are not, it fails.\n\n> Under the hood, `expect(entry).to respond_to(:name)` will check whether `entry.name` is valid code. One could have tried to run `entry.name` directly, but RSpec provides us with a set of methods, such as `expect` , `to` and `respond_to`, to better express our intents. It is known as a [domain-specific language](https://en.wikipedia.org/wiki/Domain-specific_language) (DSL). A DSL is a specialized language in which a class of problems (here, testing) is expressed succinctly: the method names match the vocabulary of the problem domain and the resulting code is highly descriptive.\n\nRun the entry specs from the command-line using the `rspec` command, the spec we want to run, and the file we're testing:\n\n```bash(Terminal)\n$ rspec spec/entry_spec.rb\n```\n\nYou should see three failing tests, each with output similar to the following:\n\n```bash(Terminal)\n  1) Entry attributes should respond to name\n     Failure/Error: expect(entry).to respond_to(:name)\n       expected #<Entry:0x007fcb0340c790> to respond to :name\n```\n\nFailing tests are what we expect to see since we haven't added those attributes to `Entry`. We're currently in the \"red\" phase of the TDD [Red-Green-Refactor cycle](http://www.jamesshore.com/Blog/Red-Green-Refactor.html). Now it's time to turn our tests green. We expect an `Entry` instance to have a few methods for accessing a name, a phone number and an email. Let's leverage `attr_accessor` to handle those attributes:\n\n```ruby(models/entry.rb)\n class Entry\n-\n+  # These must be accessors since we mutate them\n+  attr_accessor :name, :phone_number, :email\n end\n```\n\nRun your tests again and watch them pass!\n\n```bash(Terminal)\n$ rspec spec/entry_spec.rb\n...\n\nFinished in 0.00122 seconds (files took 0.1039 seconds to load)\n3 examples, 0 failures\n$\n```\n\nWatch the following video to see the above steps in practice:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/9zvar8xnqc\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n### `Entry` Initializer\n\nAn entry without initialized attributes isn't useful. Modify the tests so they assume entries will always be created with values for the `name`, `phone_number`, and `email` attributes:\n\n```ruby(models/entry.rb)\n RSpec.describe Entry do\n   describe \"attributes\" do\n     it \"responds to name\" do\n-      entry = Entry.new\n+      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:name)\n     end\n \n     it \"responds to phone number\" do\n-      entry = Entry.new\n+      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:phone_number)\n     end\n \n     it \"responds to email\" do\n-      entry = Entry.new\n+      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:email)\n     end\n   end\n```\n\nRunning the tests again will result in failures because we haven't defined an `initialize` method that takes three arguments:\n\n```bash(Terminal)\nrspec spec/entry_spec.rb\nFFF\n\nFailures:\n\n  1) Entry attributes should respond to name\n     Failure/Error: entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n     ArgumentError:\n     ...\n```\n\nAdd the `initialize` method to `Entry`:\n\n```ruby(models/entry.rb)\n class Entry\n   # These must be accessors since we mutate them\n   attr_accessor :name, :phone_number, :email\n+\n+  def initialize(name, phone_number, email)\n+  end\n+\n end\n```\n\nRun the tests again to confirm that they pass. We wrote only the *minimal* implementation required for the tests to pass. Although the code doesn't do anything with the arguments, we are able to call `Entry.new` with three parameters.\n\n### Testing the attributes\n\nThe core idea is to be able to read an attribute's value. Let's add three tests:\n\n```ruby(spec/entry_spec.rb)\n       expect(entry).to respond_to(:name)\n     end\n \n+    it \"reports its name\" do\n+      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n+      expect(entry.name).to eq('Ada Lovelace')\n+    end\n+\n     it \"responds to phone number\" do\n       entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:phone_number)\n     end\n \n+    it \"reports its phone_number\" do\n+      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n+      expect(entry.phone_number).to eq('010.012.1815')\n+    end\n+\n     it \"responds to email\" do\n       entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:email)\n     end\n+\n+    it \"reports its email\" do\n+      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n+      expect(entry.email).to eq('augusta.king@lovelace.com')\n+    end\n   end\n end\n```\n\nRunning the tests again will report three failures because we never set the attributes. Let's add the required code to make them pass:\n\n```ruby(models/entry.rb)\n   attr_accessor :name, :phone_number, :email\n \n   def initialize(name, phone_number, email)\n+    @name = name\n+    @phone_number = phone_number\n+    @email = email\n   end\n \n end\n```\n\nMake sure to run the tests and check they all pass.\n\nAfter we go from red to green, it's beneficial to ask whether there's some refactoring we can do. This time, the `Entry` class looks clean and consistent with the tests, so there's no need for any refactoring.\n\nThe tests now showcase serious duplication though, as we are repeating the same `Entry.new(…)` instruction. Fortunately, RSpec allows us to keep our tests DRY (Don't Repeat Yourself) by defining efficient helper methods using `let`. Instead of creating an `entry` local variable within each test, let's define an `entry` method once:\n\n```ruby(spec/entry_spec.rb)\n \n RSpec.describe Entry do\n   describe \"attributes\" do\n+    let(:entry) { Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com') }\n+\n     it \"responds to name\" do\n-      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:name)\n     end\n \n     it \"reports its name\" do\n-      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry.name).to eq('Ada Lovelace')\n     end\n \n     it \"responds to phone number\" do\n-      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:phone_number)\n     end\n \n     it \"reports its phone_number\" do\n-      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry.phone_number).to eq('010.012.1815')\n     end\n \n     it \"responds to email\" do\n-      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry).to respond_to(:email)\n     end\n \n     it \"reports its email\" do\n-      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n       expect(entry.email).to eq('augusta.king@lovelace.com')\n     end\n   end\n```\n\nThe term \"refactoring\" only applies to code, but enhancing tests like that is a good habit to make. Run them all again to ensure they still pass.\n\n### The `to_s` Method\n\nTo build the menu we'll need a method to return a string representation of an `Entry`, to be displayed in the terminal. It's standard convention to name such a method `to_s`, short for \"(convert) to string\". Create a test for `to_s`:\n\n```ruby(spec/entry_spec.rb)\n       expect(entry.email).to eq('augusta.king@lovelace.com')\n     end\n   end\n+\n   # #5\n+  describe \"#to_s\" do\n+    it \"prints an entry as a string\" do\n+      entry = Entry.new('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n+      expected_string = \"Name: Ada Lovelace\\nPhone Number: 010.012.1815\\nEmail: augusta.king@lovelace.com\"\n   # #6\n+      expect(entry.to_s).to eq(expected_string)\n+    end\n+  end\n end\n```\n\nAt __#5__, we use a new context to separate the `to_s` test from the initializer tests. The `#` in front of `to_s` indicates that it is an instance method.\n\nAt __#6__, we use `eq` to check that `to_s` returns a string equal to `expected_string`.\n\nRun the tests and we'll see that three still pass, but our new test fails because we haven't defined `to_s`. Let's do that now:\n\n```ruby(models/entry.rb)\n     @email = email\n   end\n \n   # #7\n+  def to_s\n+    \"Name: #{name}\\nPhone Number: #{phone_number}\\nEmail: #{email}\"\n+  end\n end\n```\n\nAt __#7__, we create the string we want. The `\\n` character is the `newline` character. It prints a [newline](https://en.wikipedia.org/wiki/Newline) to the console.\n\nRun the tests again to confirm that they pass.\n\n## The `AddressBook` Model\n\nWe need an address book model to store entries. Create the address book model and specs:\n\n```bash(Terminal)\n$ touch models/address_book.rb\n$ touch spec/address_book_spec.rb\n```\n\nCreate the skeleton of `AddressBook`:\n\n```ruby(models/address_book.rb)\n+class AddressBook\n+\n+end\n```\n\n### `AddressBook` Attributes\n\n`AddressBook` needs an attribute to hold the array of entries. The `entries` array will store entries. It also provides an easy way to add, remove, and count entries.\n\nCreate a test to confirm that `AddressBook` responds to `entries`:\n\n```ruby(spec/address_book_spec.rb)\n+require_relative '../models/address_book'\n+\n+RSpec.describe AddressBook do\n+  describe \"attributes\" do\n+    it \"responds to entries\" do\n+      book = AddressBook.new\n+      expect(book).to respond_to(:entries)\n+    end\n+  end\n+\n+end\n```\n\nRun the specs and we'll see the expected failure:\n\n```bash(Terminal)\n$ rspec spec/address_book_spec.rb\n```\n\nMake this spec pass by adding a read-only `entries` attribute to `AddressBook`:\n\n```ruby(spec/address_book_spec.rb)\n class AddressBook\n+  attr_reader :entries\n \n end\n```\n\nRun the specs again and see that they pass.\n\n`AddressBook` should initialize `entries` as an empty array so that it's ready to be used. Add a couple new tests to confirm this behavior:\n\n```ruby(spec/address_book_spec.rb)\n       book = AddressBook.new\n       expect(book).to respond_to(:entries)\n     end\n+\n+    it \"initializes entries as an array\" do\n+      book = AddressBook.new\n+      expect(book.entries).to be_an(Array)\n+    end\n+\n+    it \"initializes entries as empty\" do\n+      book = AddressBook.new\n+      expect(book.entries.size).to eq(0)\n+    end\n   end\n \n end\n```\n\nRunning the specs will confirm that our two new tests fail. Let's make them pass:\n\n```ruby(models/address_book.rb)\n class AddressBook\n   attr_reader :entries\n \n+  def initialize\n+    @entries = []\n+  end\n end\n```\n\nHaving an array of entries is only useful if we can add items to that array. We need a method, `add_entry`, to update our `entries` array. Let's add some tests to define the expected behavior:\n\n```ruby(spec/address_book_spec.rb)\n     end\n   end\n \n-end\n+  describe \"#add_entry\" do\n+    it \"adds only one entry to the address book\" do\n+      book = AddressBook.new\n+      book.add_entry('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n+\n+      expect(book.entries.size).to eq(1)\n+    end\n+\n+    it \"adds the correct information to entries\" do\n+      book = AddressBook.new\n+      book.add_entry('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\n+      new_entry = book.entries[0]\n+\n+      expect(new_entry.name).to eq('Ada Lovelace')\n+      expect(new_entry.phone_number).to eq('010.012.1815')\n+      expect(new_entry.email).to eq('augusta.king@lovelace.com')\n+    end\n+  end\n+end\n+\n```\n\nWe've wrapped these tests in a separate context to keep our specs organized. We've also included multiple expects in the second test, if any of them fail, then the entire `it` test will fail.\n\nRun the specs again to confirm that the new tests fail. Now let's turn them green by creating `add_entry`. To keep `entries` nicely ordered we'll code `add_entry` to insert entries in [lexicographical order](http://en.wikipedia.org/wiki/Lexicographical_order).\n\n```ruby(models/address_book.rb)\n # #8\n+require_relative 'entry'\n+\n class AddressBook\n   attr_reader :entries\n \n   def initialize\n     @entries = []\n   end\n-end\n+\n+  def add_entry(name, phone_number, email)\n     # #9\n+    index = 0\n+    entries.each do |entry|\n     # #10\n+      if name < entry.name\n+        break\n+      end\n+      index += 1\n+    end\n     # #11\n+    entries.insert(index, Entry.new(name, phone_number, email))\n+  end\n+end\n```\n\nAt __#8__, we tell Ruby to load the library named `entry.rb` relative to `address_book.rb`'s file path using [`require_relative`](http://ruby-doc.org/core-2.1.2/Kernel.html#method-i-require_relative).\nAt __#9__, we create a variable to store the insertion `index`.\nAt __#10__, we compare `name` with the name of the current `entry`. If `name` lexicographically proceeds `entry.name`, we've found the `index` to insert at. Otherwise we increment `index` and continue comparing with the other entries.\nAt __#11__, we insert a new entry into `entries` using the calculated `index.\n\nRun the specs a final time and confirm that they pass.\n\n## Conclusion\n\nNice work! We've now created both models AddressBloc will need using TDD. TDD allowed us to keep our code focused and ensured complete test coverage. With our `Entry` and `AddressBook` models, we're ready to start creating a menu for users to use.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| Model | Models provide an interface for getting and setting data. |\n| [RSpec](http://rspec.info/) | RSpec is a [behavior-driven development (BDD)](http://en.wikipedia.org/wiki/Behavior-driven_development) framework for the Ruby programming language. |\n| [Test-Driven Development](http://en.wikipedia.org/wiki/Test-driven_development) | Test-Driven development (TDD) is a software development process that relies on the repetition of a very short development cycle. First we write a failing test case. Then we produce the minimum amount of code to pass the test. Finally, we refactor the new code. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nIn addition to adding entries to `AddressBook`, let's create a method, `remove_entry(name, phone_number, email)`, to remove entries.\n\n* Write your tests first. The tests should confirm that a single entry is removed when `remove_entry(name, phone_number, email)` is called. You can use `entries.size` to determine if an item was successfully removed.\n\n* Iterate over `entries` until you find the match. Use the index of the match to remove the entry from `entries`. Use the following method definition for `remove_entry`:\n\n```ruby(models/address_book.rb)\n...\n\n  def remove_entry(name, phone_number, email)\n    # Implementation goes here\n  end\n\n...\n```\n\n* Confirm that all your tests pass.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/n4fad0on89?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Media Queries Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 19,
          "checkpoint_type": "normal",
          "position": 19,
          "points": 1,
          "ref": "2eaf559c-0aa9-4320-bc05-b2cc92a7c20f|0"
        },
        {
          "id": 1627,
          "name": "Address Bloc: Menu",
          "summary": "Menu: a command-line menu that allows users to manipulate data",
          "body": "<!-- { ids:[1627], name:'Address Bloc: Menu', summary:'Menu: a command-line menu that allows users to manipulate data' } -->\n\n> “I don't want to hear the specials. If they're so special, put 'em on the menu.”\n>\n> — Jerry Seinfeld\n\n## Introduction\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/n8dqh64ffd\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWith models to store and retrieve data, we have the foundation we need to make Address Bloc an _interactive_ experience. We will give users a command-line menu that allows them to view entries, create entries, search for a specific entry, import entries from a file, and exit the program. To do this, we'll create a `MenuController` to process user selections, update the models, and present information to the user.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Create MenuController\n\nCreate a directory to store `MenuController`:\n\n```bash(Terminal)\n$ cd address-bloc\n$ mkdir controllers\n$ touch controllers/menu_controller.rb\n```\n\n`MenuController` will need to connect to `AddressBook`. It will also need methods to display the main menu and process user input:\n\n```ruby(controllers/menu_controller.rb)\n # #1\n+require_relative '../models/address_book'\n+\n+class MenuController\n+  attr_reader :address_book\n+\n+  def initialize\n+    @address_book = AddressBook.new\n+  end\n+\n+  def main_menu\n     # #2\n+    puts \"Main Menu - #{address_book.entries.count} entries\"\n+    puts \"1 - View all entries\"\n+    puts \"2 - Create an entry\"\n+    puts \"3 - Search for an entry\"\n+    puts \"4 - Import entries from a CSV\"\n+    puts \"5 - Exit\"\n+    print \"Enter your selection: \"\n+\n     # #3\n+    selection = gets.to_i\n+    puts \"You picked #{selection}\"\n+  end\n+end\n```\n\nAt __#1__, include `AddressBook` using `require_relative`.\nAt __#2__, display the main menu options to the command line.\nAt __#3__, retrieve user input from the command line using `gets`. `gets` reads the next line from [standard input](http://en.wikipedia.org/wiki/Standard_streams#Standard_input_.28stdin.29).\n\nLet's watch a video that explains the difference between `puts` and `gets`:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/j2lrcy9oid\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nUse `MenuController` in the driver program we created:\n\n```ruby(address_bloc.rb)\n+require_relative 'controllers/menu_controller'\n+\n # #4\n+menu = MenuController.new\n # #5\n+system \"clear\"\n puts \"Welcome to AddressBloc!\"\n # #6\n+menu.main_menu\n```\n\nAt __#4__, create a new `MenuController` when `AddressBloc` starts.\nAt __#5__, use `system \"clear\"` to clear the command line.\nAt __#6__, call `main_menu` to display the menu.\n\nGive `AddressBloc` a quick test run:\n\n```bash(Terminal)\n$ ruby address_bloc.rb\nWelcome to AddressBloc!\nMain Menu - 0 entries\n1 - View all entries\n2 - Create an entry\n3 - Search for an entry\n4 - Import entries from a CSV\n5 - Exit\nEnter your selection:\n```\n\n## Handling User Input\n\n`MenuController` asks for user input, and then exits. Update `main_menu` to process user input and stub out the methods we'll need:\n\n```ruby(controllers/menu_controller.rb)\n     print \"Enter your selection: \"\n \n     selection = gets.to_i\n-    puts \"You picked #{selection}\"\n+\n     # #7\n+    case selection\n+      when 1\n+        system \"clear\"\n+        view_all_entries\n+        main_menu\n+      when 2\n+        system \"clear\"\n+        create_entry\n+        main_menu\n+      when 3\n+        system \"clear\"\n+        search_entries\n+        main_menu\n+      when 4\n+        system \"clear\"\n+        read_csv\n+        main_menu\n+      when 5\n+        puts \"Good-bye!\"\n         # #8\n+        exit(0)\n       # #9\n+      else\n+        system \"clear\"\n+        puts \"Sorry, that is not a valid input\"\n+        main_menu\n+    end\n+  end\n+\n   # #10\n+  def view_all_entries\n+  end\n+\n+  def create_entry\n+  end\n+\n+  def search_entries\n+  end\n+\n+  def read_csv\n   end\n end\n```\n\nAt __#7__, use a [`case` statement operator](http://ruby-doc.com/docs/ProgrammingRuby/html/tut_expressions.html#S5) to determine the proper response to the user's input.\nAt __#8__, terminate the program using `exit(0)`. `0` signals the program is exiting without an error.\nAt __#9__, use an `else` to catch invalid user input and prompt the user to retry.\nAt __#10__, stub the rest of the methods called in `main_menu`.\n\nRun `AddressBloc` again. Confirm that you can make selections and that the program will continue to run until you tell it to exit.\n\n## Create an Entry\n\nAn address book is only useful if we can create new entries. Let's give our users a way to add entries to `AddressBloc`:\n\n```ruby(controllers/menu_controller.rb)\n   end\n \n   def create_entry\n+    system \"clear\"\n+    puts \"New AddressBloc Entry\"\n     # #12\n+    print \"Name: \"\n+    name = gets.chomp\n+    print \"Phone number: \"\n+    phone = gets.chomp\n+    print \"Email: \"\n+    email = gets.chomp\n+\n     # #13\n+    address_book.add_entry(name, phone, email)\n+\n+    system \"clear\"\n+    puts \"New entry created\"\n   end\n \n   def search_entries\n```\n\nAt __#11__, clear the screen for before displaying the create entry prompts.\nAt __#12__, use `print` to prompt the user for each `Entry` attribute. `print` works just like `puts`, except that it doesn't add a newline.\nAt __#13__, add a new entry to `address_book` using `add_entry` to ensure that the new entry is added in the proper order.\n\n## View Entries\n\nNow that we can add entries, we want to be able to view them as well:\n\n```ruby(controllers/menu_controller.rb)\n   end\n \n   def view_all_entries\n     # #14\n+    address_book.entries.each do |entry|\n+      system \"clear\"\n+      puts entry.to_s\n     # #15\n+      entry_submenu(entry)\n+    end\n+\n+    system \"clear\"\n+    puts \"End of entries\"\n   end\n \n   def create_entry\n```\n\nAt __#14__, iterate through all entries in `AddressBook` using `each`.\nAt __#15__, we call `entry_submenu` to display a submenu for each entry. Let's add this method at the bottom of `MenuController`.\n\n```ruby(controllers/menu_controller.rb)\n \n   def read_csv\n   end\n+\n+  def entry_submenu(entry)\n     # #16\n+    puts \"n - next entry\"\n+    puts \"d - delete entry\"\n+    puts \"e - edit this entry\"\n+    puts \"m - return to main menu\"\n+\n     # #17\n+    selection = gets.chomp\n+\n+    case selection\n     # #18\n+      when \"n\"\n     # #19\n+      when \"d\"\n+      when \"e\"\n     # #20\n+      when \"m\"\n+        system \"clear\"\n+        main_menu\n+      else\n+        system \"clear\"\n+        puts \"#{selection} is not a valid input\"\n+        entry_submenu(entry)\n+    end\n+  end\n end\n```\n\n__#16__, display the submenu options.\n__#17__, `chomp` removes any trailing whitespace from the string `gets` returns. This is necessary because `\"m \"` or `\"m\\n\"` won't match `\"m\"`.\n__#18__, when the user asks to see the next entry, we can do nothing and control will be returned to `view_all_entries`.\nAt __#19__, we'll handle deleting and editing in another checkpoint, for now the user will be shown the next entry.\nAt __#20__, we return the user to the main menu.\n\nRun `AddressBloc` and test adding and viewing users.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| Controller | [Controllers](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller#Components) process user input, update the model, and presents model information. |\n| [Standard input](http://en.wikipedia.org/wiki/Standard_streams#Standard_input_.28stdin.29) | Standard input is data going into a program. By default standard input is expected from the same keyboard which started the program. |\n| [`case` statement operator](http://ruby-doc.org/docs/keywords/1.9/Object.html#method-i-case) | Ruby's `case` statement operator is used to manage more complicated control flow. It can be used as a cleaner alternative to multiple `if` statements. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nModify `main_menu` to give users the ability to view a specific entry by number:\n\n* Add a new option to the main menu: \"View Entry Number n\".\n\n* Once the user selects the new option, ask for the entry number and display that entry to the user.\n\n* Handle invalid input by prompting the user to enter a valid entry number.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/b26jrdybz9?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Media Queries Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 20,
          "checkpoint_type": "normal",
          "position": 20,
          "points": 1,
          "ref": "e08339c5-a3cb-4a7b-af7b-fb908f4a7423|0"
        },
        {
          "id": 1628,
          "name": "Address Bloc: Reading CSVs",
          "summary": "Reading CSVs: importing data from CSV files",
          "body": "<!-- { ids:[1628], name:'Address Bloc: Reading CSVs', summary:'Reading CSVs: importing data from CSV files' } -->\r\n\r\n<center>\r\n![To write it, it took three months; to conceive it three minutes; to collect the data in it all my life. - F. Scott Fitzgerald](https://bloc-global-assets.s3.amazonaws.com/images-rails/24-arguments-and-csv/24-banner.jpg)\r\n</center>\r\n\r\n## Introduction\r\n\r\n<center>\r\n  <iframe src=\"https://fast.wistia.net/embed/iframe/5j4oi4p1ox\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\r\n</center>\r\n\r\n## Populating Address Bloc with Data\r\n\r\nOpen the command line and navigate to the Address Bloc project:\r\n\r\n```bash(~)\r\n$ cd ~/address-bloc\r\n```\r\n\r\n## Git\r\n\r\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint for details](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint).\r\n\r\n## Test\r\n\r\nWe'll use test-driven development to write the part of Address Bloc that will pull in data. First we'll write a test for `import_from_csv`.\r\n\r\nUltimately, we want the method to create entries in our `AddressBook` class. Let's assume that `AddressBook` will have five initial entries:\r\n\r\n```ruby(spec/address_book_spec.rb)\r\n require_relative '../models/address_book'\r\n \r\n RSpec.describe AddressBook do\r\n   # #1\r\n+  let(:book) { AddressBook.new }\r\n+\r\n   # #2\r\n   describe \"attributes\" do\r\n     it \"responds to entries\" do\r\n-      book = AddressBook.new\r\n       expect(book).to respond_to(:entries)\r\n     end\r\n \r\n     it \"initializes entries as an array\" do\r\n-      book = AddressBook.new\r\n       expect(book.entries).to be_an(Array)\r\n     end\r\n \r\n     it \"initializes entries as empty\" do\r\n-      book = AddressBook.new\r\n       expect(book.entries.size).to eq(0)\r\n     end\r\n   end\r\n \r\n   describe \"#add_entry\" do\r\n     it \"adds only one entry to the address book\" do\r\n-      book = AddressBook.new\r\n       book.add_entry('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\r\n \r\n       expect(book.entries.size).to eq(1)\r\n     end\r\n \r\n     it \"adds the correct information to entries\" do\r\n-      book = AddressBook.new\r\n       book.add_entry('Ada Lovelace', '010.012.1815', 'augusta.king@lovelace.com')\r\n       new_entry = book.entries[0]\r\n \r\n       expect(new_entry.email).to eq('augusta.king@lovelace.com')\r\n     end\r\n   end\r\n+\r\n+  # Test that AddressBook's .import_from_csv() method is working as expected\r\n+  describe \"#import_from_csv\" do\r\n+    it \"imports the correct number of entries\" do\r\n       # #3\r\n+      book.import_from_csv(\"entries.csv\")\r\n+      book_size = book.entries.size\r\n+\r\n+      # Check the size of the entries in AddressBook\r\n+      expect(book_size).to eq 5\r\n+    end\r\n+\r\n+  end\r\n end\r\n```\r\n\r\nAt **#1**, we create new instance of the AddressBook model and assign it to the variable named `book` using the `let` syntax provided by RSpec. This lets us use `book` in all our tests, removing the duplication of having to instantiate a new `AddressBook` for each test.\r\n\r\nAt **#2**, we see `describe` and `it` statements which are an RSpec paradigm to explain what we are testing. `it` explains the functionality of the method we're testing in a human readable form. RSpec will take the content from `describe` and `it` and output them nicely to the command line when we execute the test. [Read more about the differences between them](http://betterspecs.org/).\r\n\r\nAt **#3**, after the `describe` and `it` statements, we call the `import_from_csv` method on the `book` object which is of type `AddressBook` (our data model). We pass `import_from_csv` the string `entries.csv` as a parameter. `CSV` files are a fairly typical way of dealing with data and you can read more about them [`here`](http://en.wikipedia.org/wiki/Comma-separated_values). On the next line we reference the `AddressBook.entries` variable to get its size. This variable will be an [array](http://en.wikipedia.org/wiki/Array). Next, we save the size of the `AddressBook.entries` to our local variable `book_size`.\r\n\r\nWatch the following video to see us walk through the refactoring steps above:\r\n\r\n<center>\r\n  <iframe src=\"https://fast.wistia.net/embed/iframe/6bclroewv8\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\r\n</center>\r\n\r\nRun the spec. We should see it fail:\r\n\r\n```\r\n$ rspec spec/address_book_spec.rb\r\n.....F\r\n\r\nFailures:\r\n\r\n  1) AddressBook#import_from_csv imports the correct number of entries\r\n     Failure/Error: book.import_from_csv(\"entries.csv\")\r\n\r\n     NoMethodError:\r\n       undefined method `import_from_csv' for #<AddressBook:0x007ff393940618 @entries=[]>\r\n     # ./spec/address_book_spec.rb:40:in `block (3 levels) in <top (required)>'\r\n\r\nFinished in 0.00545 seconds (files took 0.16404 seconds to load)\r\n6 examples, 1 failure\r\n\r\nFailed examples:\r\n\r\nrspec ./spec/address_book_spec.rb:39 # AddressBook#import_from_csv imports the correct number of entries\r\n```\r\n\r\nLet's stub `import_from_csv` to get rid of the `NoMethodError`.\r\n\r\n## Stub\r\n\r\nOpen `AddressBook` and add the following:\r\n\r\n```ruby(models/address_book.rb)\r\n require_relative 'entry'\r\n+require \"csv\"\r\n \r\n class AddressBook\r\n   attr_reader :entries\r\n ...\r\n     end\r\n     entries.insert(index, Entry.new(name, phone_number, email))\r\n   end\r\n+\r\n+  def import_from_csv(file_name)\r\n+    # Implementation goes here\r\n+  end\r\n end\r\n```\r\n\r\nChange the working directory back to the project root if you're not already in it:\r\n\r\n```bash(Terminal)\r\n$ cd ~/address-bloc\r\n```\r\n\r\nRun the spec we just created:\r\n\r\n```bash(Terminal)\r\n$ rspec spec/address_book_spec.rb\r\n.....F\r\n\r\nFailures:\r\n\r\n  1) AddressBook#import_from_csv imports the correct number of entries\r\n     Failure/Error: expect(book_size).to eq 5\r\n\r\n       expected: 5\r\n            got: 0\r\n\r\n       (compared using ==)\r\n     # ./spec/address_book_spec.rb:44:in `block (3 levels) in <top (required)>'\r\n\r\nFinished in 0.02073 seconds (files took 0.11983 seconds to load)\r\n6 examples, 1 failure\r\n\r\nFailed examples:\r\n\r\nrspec ./spec/address_book_spec.rb:39 # AddressBook#import_from_csv imports the correct number of entries\r\n```\r\n\r\nWe see that the spec fails. This is logical since `import_from_csv` is stubbed out but has no implementation. Let's add another test:\r\n\r\n```ruby(spec/address_book_spec.rb)\r\n       expect(book_size).to eq 5\r\n     end\r\n \r\n     # #4\r\n+    it \"imports the 1st entry\" do\r\n+      book.import_from_csv(\"entries.csv\")\r\n+      # Check the first entry\r\n+      entry_one = book.entries[0]\r\n+\r\n       # #5\r\n+      expect(entry_one.name).to eq \"Bill\"\r\n+      expect(entry_one.phone_number).to eq \"555-555-4854\"\r\n+      expect(entry_one.email).to eq \"bill@blocmail.com\"\r\n+    end\r\n   end\r\n+\r\n end\r\n```\r\n\r\nAt **#4**, we access the first entry in the array of entries that our `AddressBook` stores.\r\n\r\n> Remember, arrays in Ruby use zero based numbering. The first element is located at index zero, the second element at index one, and so on.\r\n![Arrays](https://bloc-global-assets.s3.amazonaws.com/images-rails/24-arguments-and-csv/Arrays.png)\r\n\r\nAt **#5**, we've added three `expect`s to verify that the first entry has the name \"Bill\", the phone number \"555-555-4854\", and the email address \"bill@blocmail.com\". If we run this test, it will still fail. Using the same pattern above, we can add four similar tests:\r\n\r\n```ruby(spec/address_book_spec.rb)\r\n       expect(entry_one.phone_number).to eq \"555-555-4854\"\r\n       expect(entry_one.email).to eq \"bill@blocmail.com\"\r\n     end\r\n-  end\r\n \r\n+    it \"imports the 2nd entry\" do\r\n+      book.import_from_csv(\"entries.csv\")\r\n+      # Check the second entry\r\n+      entry_two = book.entries[1]\r\n+      expect(entry_two.name).to eq \"Bob\"\r\n+      expect(entry_two.phone_number).to eq \"555-555-5415\"\r\n+      expect(entry_two.email).to eq \"bob@blocmail.com\"\r\n+    end\r\n+ \r\n+    it \"imports the 3rd entry\" do\r\n+      book.import_from_csv(\"entries.csv\")\r\n+      # Check the third entry\r\n+      entry_three = book.entries[2]\r\n+      expect(entry_three.name).to eq \"Joe\"\r\n+      expect(entry_three.phone_number).to eq \"555-555-3660\"\r\n+      expect(entry_three.email).to eq \"joe@blocmail.com\"\r\n+    end\r\n+ \r\n+    it \"imports the 4th entry\" do\r\n+      book.import_from_csv(\"entries.csv\")\r\n+      # Check the fourth entry\r\n+      entry_four = book.entries[3]\r\n+      expect(entry_four.name).to eq  \"Sally\"\r\n+      expect(entry_four.phone_number).to eq \"555-555-4646\"\r\n+      expect(entry_four.email).to eq \"sally@blocmail.com\"\r\n+    end\r\n+ \r\n+    it \"imports the 5th entry\" do\r\n+      book.import_from_csv(\"entries.csv\")\r\n+      # Check the fifth entry\r\n+      entry_five = book.entries[4]\r\n+      expect(entry_five.name).to eq \"Sussie\"\r\n+      expect(entry_five.phone_number).to eq \"555-555-2036\"\r\n+      expect(entry_five.email).to eq \"sussie@blocmail.com\"\r\n+    end\r\n+  end\r\n end\r\n```\r\n\r\nWe've added tests to test for four more entries. Our test now expects our data to have five total entries with varying names, numbers, and email addresses.\r\n\r\nOur tests have a large amount of [redundancy](http://en.wikipedia.org/wiki/Redundancy_%28engineering%29) (code duplication). Let's use a helper method to check each entry and reduce the clutter:\r\n\r\n```ruby(spec/address_book_spec.rb)\r\n RSpec.describe AddressBook do\r\n   let(:book) { AddressBook.new }\r\n \r\n   # #6\r\n+  def check_entry(entry, expected_name, expected_number, expected_email)\r\n+    expect(entry.name).to eq expected_name\r\n+    expect(entry.phone_number).to eq expected_number\r\n+    expect(entry.email).to eq expected_email\r\n+  end\r\n+\r\n   describe \"attributes\" do\r\n     it \"responds to entries\" do\r\n       expect(book).to respond_to(:entries)\r\n       book.import_from_csv(\"entries.csv\")\r\n       # Check the first entry\r\n       entry_one = book.entries[0]\r\n-\r\n-      expect(entry_one.name).to eq \"Bill\"\r\n-      expect(entry_one.phone_number).to eq \"555-555-4854\"\r\n-      expect(entry_one.email).to eq \"bill@blocmail.com\"\r\n+      check_entry(entry_one, \"Bill\", \"555-555-4854\", \"bill@blocmail.com\")\r\n     end\r\n \r\n     it \"imports the 2nd entry\" do\r\n       book.import_from_csv(\"entries.csv\")\r\n       # Check the second entry\r\n       entry_two = book.entries[1]\r\n-      expect(entry_two.name).to eq \"Bob\"\r\n-      expect(entry_two.phone_number).to eq \"555-555-5415\"\r\n-      expect(entry_two.email).to eq \"bob@blocmail.com\"\r\n+      check_entry(entry_two, \"Bob\", \"555-555-5415\", \"bob@blocmail.com\")\r\n     end\r\n  \r\n     it \"imports the 3rd entry\" do\r\n       book.import_from_csv(\"entries.csv\")\r\n       # Check the third entry\r\n       entry_three = book.entries[2]\r\n-      expect(entry_three.name).to eq \"Joe\"\r\n-      expect(entry_three.phone_number).to eq \"555-555-3660\"\r\n-      expect(entry_three.email).to eq \"joe@blocmail.com\"\r\n+      check_entry(entry_three, \"Joe\", \"555-555-3660\", \"joe@blocmail.com\")\r\n     end\r\n  \r\n     it \"imports the 4th entry\" do\r\n       book.import_from_csv(\"entries.csv\")\r\n       # Check the fourth entry\r\n       entry_four = book.entries[3]\r\n-      expect(entry_four.name).to eq  \"Sally\"\r\n-      expect(entry_four.phone_number).to eq \"555-555-4646\"\r\n-      expect(entry_four.email).to eq \"sally@blocmail.com\"\r\n+      check_entry(entry_four, \"Sally\", \"555-555-4646\", \"sally@blocmail.com\")\r\n     end\r\n  \r\n     it \"imports the 5th entry\" do\r\n       book.import_from_csv(\"entries.csv\")\r\n       # Check the fifth entry\r\n       entry_five = book.entries[4]\r\n-      expect(entry_five.name).to eq \"Sussie\"\r\n-      expect(entry_five.phone_number).to eq \"555-555-2036\"\r\n-      expect(entry_five.email).to eq \"sussie@blocmail.com\"\r\n+      check_entry(entry_five, \"Sussie\", \"555-555-2036\", \"sussie@blocmail.com\")\r\n     end\r\n   end\r\n end\r\n```\r\n\r\nAt **#6**, we create a helper method named `check_entry` which consolidates the redundant code. We can now pass in the particular name, number, and email address we want into this reusable helper method. We have our basic tests set up. The next step is to build the implementation of the `import_from_csv` method.\r\n\r\n## Implement\r\n\r\nLet's add the code to `AddressBook`:\r\n\r\n```ruby(models/address_book.rb)\r\n     entries.insert(index, Entry.new(name, phone_number, email))\r\n   end\r\n \r\n   # #7\r\n   def import_from_csv(file_name)\r\n     # Implementation goes here\r\n+    csv_text = File.read(file_name)\r\n+    csv = CSV.parse(csv_text, headers: true, skip_blanks: true)\r\n   # #8\r\n+    csv.each do |row|\r\n+      row_hash = row.to_hash\r\n+      add_entry(row_hash[\"name\"], row_hash[\"phone_number\"], row_hash[\"email\"])\r\n+    end\r\n   end\r\n end\r\n```\r\n\r\nLet's break down the code above.\r\n\r\nAt **#7**, we defined `import_from_csv`. The method starts by reading the file, using `File.read`. The file will be in a `CSV` format. We use the `CSV` class to [parse](https://en.wikipedia.org/wiki/Parsing) the file. The result of `CSV.parse` is an object of type `CSV::Table`.\r\n\r\nAt **#8**, we [iterate](http://en.wikipedia.org/wiki/Iteration) over the `CSV::Table` object's rows. On the next line we create a [hash](http://en.wikipedia.org/wiki/Hash) for each row. We convert each `row_hash` to an `Entry` by using the `add_entry` method which will also add the Entry to the AddressBook's entries.\r\n\r\n## Create a Data Source for Address Bloc\r\n\r\nAs we have already alluded to, we'll use a `CSV` file in our Address Bloc Ruby app. We have a functional test and a functional `import_from_csv` method. If you run the test we just created, it will fail since `entries.csv` does not exist and the code attempts to use this as its `CSV` file. Let's create the `entries.csv` file.\r\n\r\nPlace the `entries.csv` file in the same directory as the `address_bloc.rb` file. Open a text editor and enter the following into the file:\r\n\r\n```\r\nname,phone_number,email\r\nBill,555-555-4854,bill@blocmail.com\r\nBob,555-555-5415,bob@blocmail.com\r\nJoe,555-555-3660,joe@blocmail.com\r\nSally,555-555-4646,sally@blocmail.com\r\nSussie,555-555-2036,sussie@blocmail.com\r\n```\r\n\r\nRun the `address_book_spec.rb`:\r\n\r\n```bash(Terminal)\r\n$ rspec spec/address_book_spec.rb\r\n.\r\n\r\nFinished in 0.00514 seconds (files took 0.10853 seconds to load)\r\n11 examples, 0 failures\r\n```\r\n\r\nThe test passes so we know that the implementation is reading `entries.csv` and storing its values properly.\r\n\r\n## Recap\r\n\r\n| **Concept** | **Description** |\r\n| :-- | :-- |\r\n| TDD | We stubbed out `import_from_csv` to act as a placeholder. Then we defined the expected behavior of `import_from_csv` using tests. We built the tests first so that they could constrain the structure of `import_from_csv`. This forced us to build the method in a way that fulfilled our desired outcome. We call this practice [Test Driven Development](http://en.wikipedia.org/wiki/Test-driven_development). With our tests in place, we built the implementation of `import_from_csv` until the tests passed. |\r\n| Data Source | Lastly, we connected the actual data to our application by creating the `CSV` file and ran the test using the real data. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\r\n\r\nWe may want to parse another `CSV` file at some point.\r\n\r\n* Add tests to `address_book_spec.rb` that will use data from a new `CSV` file named `entries_2.csv` (do not delete the existing tests in `address_book_spec.rb`).\r\n* Add a `CSV` file named `entries_2.csv` with three entries (do not delete `entries.csv`).\r\n* Ensure the new test passes with the new data.\r\n\r\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\r\n\r\n---\r\n\r\n### Solution\r\n\r\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\r\n\r\n<center>\r\n  <a href=\"//fast.wistia.net/embed/iframe/1uwuuxuff0?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Media Queries Solution</a>\r\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\r\n</center>",
          "roadmap_section_id": 120,
          "active_index": 21,
          "checkpoint_type": "normal",
          "position": 21,
          "points": 1,
          "ref": "1b48c472-dd5c-4d0b-84d5-ea2b65cf4979|0"
        },
        {
          "id": 1629,
          "name": "Address Bloc: Searching",
          "summary": "Searching: finding entries in AddresBloc",
          "body": "<!-- { ids:[1629], name:'Address Bloc: Searching', summary:'Searching: finding entries in AddresBloc' } -->\n![Larry Page](https://bloc-global-assets.s3.amazonaws.com/images-rails/25-search/25-banner.jpg)\n\n> “The ultimate search engine would basically understand everything in the world, and it would always give you the right thing. And we're a long, long ways from that.”\n>\n> — Larry Page, cofounder of Google Inc.\n\n## Introduction\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/mswxr58d5d\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWhat use is an address book if it's not searchable? Let's add the ability to search Address Bloc.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint for details](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint).\n\nWe'll use a technique called *binary search* to implement our search functionality. We'll learn more about binary search as this checkpoint continues.\n\n## Test\n\nLet's create some tests that will help define `binary_search`'s behavior. Since we are testing a method that is a part of `AddressBook`, our tests belong in `address_book_spec.rb`:\n\n```ruby(spec/address_book_spec.rb)\n       check_entry(entry_five, \"Sussie\", \"555-555-2036\", \"sussie@blocmail.com\")\n     end\n   end\n+\n+  # Test the binary_search method\n+  describe \"#binary_search\" do\n+    it \"searches AddressBook for a non-existent entry\" do\n+      book.import_from_csv(\"entries.csv\")\n+      entry = book.binary_search(\"Dan\")\n+      expect(entry).to be_nil\n+    end\n+  end\n end\n```\n\nRun the test and verify that it fails:\n\n```bash(Terminal)\n $ rspec spec/address_book_spec.rb\n ...........F\n\n Failures:\n\n   1) AddressBook#binary_search searches AddressBook for a non-existent entry\n      Failure/Error: entry = book.binary_search(\"Dan\")\n\n      NoMethodError:\n        undefined method `binary_search' for #<AddressBook:0xc756ab3>\n      # ./spec/address_book_spec.rb:94:in `(root)'\n```\n\nWe see an undefined method error since `binary_search` is undefined.\n\n## Stub\n\nLet's add the [stub](http://en.wikipedia.org/wiki/Method_stub) of `binary_search` to `AddressBook`. It will return `nil` for now:\n\n```ruby(models/address_book.rb)\n       add_entry(row_hash[\"name\"], row_hash[\"phone_number\"], row_hash[\"email\"])\n     end\n   end\n+\n+  # Search AddressBook for a specific entry by name\n+  def binary_search(name)\n+  end\n end\n```\n\n## Test Again\n\nRun the test again. The test searches for `Entry` \"Dan\" that does not exist and our stubbed out `binary_search` returned `nil`, thus the test passes:\n\n```bash(Terminal)\n$ rspec spec/address_book_spec.rb\n............\n\nFinished in 0.0037 seconds (files took 0.10661 seconds to load)\n12 examples, 0 failures\n```\n\n## More Tests\n\nLet's add another test:\n\n```ruby(spec/address_book_spec.rb)\n       entry = book.binary_search(\"Dan\")\n       expect(entry).to be_nil\n     end\n+\n+    it \"searches AddressBook for Bill\" do\n+      book.import_from_csv(\"entries.csv\")\n+      entry = book.binary_search(\"Bill\")\n+      expect(entry).to be_a Entry\n+      check_entry(entry, \"Bill\", \"555-555-4854\", \"bill@blocmail.com\")\n+    end\n   end\n end\n```\n\nWe added a test for \"Bill\". We expect `binary_search` to return an object of type `Entry`. We also use `check_entry` to validate our expectation that this object has its attributes set properly. Run the tests again:\n\n```bash(Terminal)\n$ rspec spec/address_book_spec.rb\n............F\n\nFailures:\n\n  1) AddressBook#binary_search searches AddressBook for Bill\n     Failure/Error: expect(entry).to be_a Entry\n       expected nil to be a kind of Entry\n     # ./spec/address_book_spec.rb:101:in `(root)'\n\nFinished in 0.204 seconds (files took 0.608 seconds to load)\n13 examples, 1 failure\n\nFailed examples:\n\nrspec ./spec/address_book_spec.rb:98 # AddressBook#binary_search searches AddressBook for Bill\n\n```\n\nOur new test fails since `binary_search` still returns`nil`, but it will pass when we write the implementation of the method.\n\nRepeat this pattern for the other entries in `entries.csv`:\n\n```ruby(spec/address_book_spec.rb)\n       expect(entry).to be_a Entry\n       check_entry(entry, \"Bill\", \"555-555-4854\", \"bill@blocmail.com\")\n     end\n+\n+    it \"searches AddressBook for Bob\" do\n+      book.import_from_csv(\"entries.csv\")\n+      entry = book.binary_search(\"Bob\")\n+      expect(entry).to be_a Entry\n+      check_entry(entry, \"Bob\", \"555-555-5415\", \"bob@blocmail.com\")\n+    end\n+\n+    it \"searches AddressBook for Joe\" do\n+      book.import_from_csv(\"entries.csv\")\n+      entry = book.binary_search(\"Joe\")\n+      expect(entry).to be_a Entry\n+      check_entry(entry, \"Joe\", \"555-555-3660\", \"joe@blocmail.com\")\n+    end\n+\n+    it \"searches AddressBook for Sally\" do\n+      book.import_from_csv(\"entries.csv\")\n+      entry = book.binary_search(\"Sally\")\n+      expect(entry).to be_a Entry\n+      check_entry(entry, \"Sally\", \"555-555-4646\", \"sally@blocmail.com\")\n+    end\n+\n+    it \"searches AddressBook for Sussie\" do\n+      book.import_from_csv(\"entries.csv\")\n+      entry = book.binary_search(\"Sussie\")\n+      expect(entry).to be_a Entry\n+      check_entry(entry, \"Sussie\", \"555-555-2036\", \"sussie@blocmail.com\")\n+    end\n+\n   end\n end\n```\n\nFinally, add a test for an entry that is similar to something that we know exists, but not exactly the same:\n\n```ruby(spec/address_book_spec.rb)\n       check_entry(entry, \"Sussie\", \"555-555-2036\", \"sussie@blocmail.com\")\n     end\n \n+    it \"searches AddressBook for Billy\" do\n+      book.import_from_csv(\"entries.csv\")\n+      entry = book.binary_search(\"Billy\")\n+      expect(entry).to be_nil\n+    end\n   end\n end\n```\n\nLet's run our spec again and see the list of failing tests:\n\n```bash(Terminal)\n $ rspec spec/address_book_spec.rb\n ............FFFFF\n\n Failures:\n\n   1) AddressBook#binary_search searches AddressBook for Bill\n      Failure/Error: expect(entry).to be_a Entry\n        expected nil to be a kind of Entry\n      # ./spec/address_book_spec.rb:101:in `(root)'\n\n   2) AddressBook#binary_search searches AddressBook for Bob\n      Failure/Error: expect(entry).to be_a Entry\n        expected nil to be a kind of Entry\n      # ./spec/address_book_spec.rb:108:in `(root)'\n\n   3) AddressBook#binary_search searches AddressBook for Joe\n      Failure/Error: expect(entry).to be_a Entry\n        expected nil to be a kind of Entry\n      # ./spec/address_book_spec.rb:115:in `(root)'\n\n   4) AddressBook#binary_search searches AddressBook for Sally\n      Failure/Error: expect(entry).to be_a Entry\n        expected nil to be a kind of Entry\n      # ./spec/address_book_spec.rb:122:in `(root)'\n\n   5) AddressBook#binary_search searches AddressBook for Sussie\n      Failure/Error: expect(entry).to be_a Entry\n        expected nil to be a kind of Entry\n      # ./spec/address_book_spec.rb:129:in `(root)'\n\n Finished in 0.257 seconds (files took 0.649 seconds to load)\n 17 examples, 5 failures\n ...\n```\n\n## Implement\n\nSince the `add_entry` method inserts items alphabetically, we can use a search algorithm that is optimal for sorted lists. Many [search algorithms](http://en.wikipedia.org/wiki/Search_algorithm) exist, but we'll implement [binary search](http://en.wikipedia.org/wiki/Binary_search_algorithm) in Address Bloc. `binary_search` uses a [divide and conquer](http://en.wikipedia.org/wiki/Divide_and_conquer_algorithms) design pattern. Add the following code to implement `binary_search`:\n\n```ruby(models/address_book.rb)\n \n   # Search AddressBook for a specific entry by name\n   def binary_search(name)\n     # #1\n+    lower = 0\n+    upper = entries.length - 1\n+\n     # #2\n+    while lower <= upper\n       # #3\n+      mid = (lower + upper) / 2\n+      mid_name = entries[mid].name\n+\n       # #4\n+      if name == mid_name\n+        return entries[mid]\n+      elsif name < mid_name\n+        upper = mid - 1\n+      elsif name > mid_name\n+        lower = mid + 1\n+      end\n+    end\n+\n     # #5\n+    return nil\n   end\n end\n```\n\nAt **#1**, we save the index of the leftmost item in the array in a variable named `lower`, and the index of rightmost item in the array in `upper`. If we think of the array in terms of left-to-right where the leftmost item is the zeroth index and the rightmost item is the `entries.length-1` index.\n\nAt **#2**, we loop while our `lower` index is less than or equal to our `upper` index.\n\nAt **#3**, we find the middle index by taking the sum of `lower` and `upper` and dividing it by two. Ruby will truncate any decimal numbers, so if `upper` is five and `lower` is zero then `mid` will get set to two. Then we retrieve the name of the entry at the middle index and store it in `mid_name`.\n\nAt **#4**, we compare the name that we are searching for, `name`, to the name of the middle index, `mid_name`. We use the `==` operator when comparing the names which makes the search [case sensitive](http://en.wikipedia.org/wiki/Case_sensitivity)\n\n* If `name` is equal to `mid_name` we've found the name we are looking for so we return the entry at index `mid`.\n* If `name` is alphabetically before `mid_name`, then we set `upper` to `mid - 1` because the name must be in the lower half of the array.\n* If `name` is alphabetically after `mid_name`, then we set `lower` to `mid + 1` because the name must be in the upper half of the array.\n\nAt **#5**, if we divide and conquer to the point where no match is found, we return `nil`.\n\nRunning the specs a final time shows them all passing:\n\n```bash(Terminal)\n rspec spec/address_book_spec.rb\n .................\n\n Finished in 0.326 seconds (files took 1.23 seconds to load)\n 17 examples, 0 failures\n```\n\nThe following video elaborates on binary search in greater detail:\n\n<iframe src=\"//fast.wistia.net/embed/iframe/vcvrxz808k\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe>\n<script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n\nLet's walk through `binary_search` using the values in `entries.csv` as our sorted list and search for \"Bill\".\n\n![Step One](https://bloc-global-assets.s3.amazonaws.com/images-rails/25-search/binary_search_one.jpg)\n<br >\n![Step Two](https://bloc-global-assets.s3.amazonaws.com/images-rails/25-search/binary_search_two.jpg)\n<br >\n![Step Three](https://bloc-global-assets.s3.amazonaws.com/images-rails/25-search/binary_search_three.jpg)\n\n`binary_search` took three steps to find \"Bill\" with five entries.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| TDD | We stubbed out `binary_search` to act as a placeholder. Then we built tests to define the expected behavior of `binary_search`. |\n| Binary Search | With our tests in place, we built the implementation of `binary_search` until the tests passed. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nAs we alluded to, many search algorithms exist. Your assignment is to create a method that performs an iterative search:\n\n* Start by stubbing `iterative_search` in `address_book.rb`.\n\n* Create tests for `iterative_search` in `address_book_spec.rb`. You can use the same pattern we used for testing `binary_search`.\n\n* Fill in the body of `iterative_search`:\n\n> Starting from the first entry in `AddressBook.entries`, iterate over the entries until you find the match. When the match is found, return it. If no match is ever found, return `nil`.\n\n* Ensure the new tests pass with your `iterative_search` method.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\nAfter submitting your commit, consider the following questions:\n\n- Which algorithm is more efficient: binary search or iteration? How do you know?\n- How might you measure the difference?\n\nMessage your mentor with your answers (at the very least, your thoughts) to these questions.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/xprszf32k9?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Media Queries Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 22,
          "checkpoint_type": "normal",
          "position": 22,
          "points": 1,
          "ref": "36cd1964-fef7-428e-a139-291ed33a2aa6|0"
        },
        {
          "id": 1630,
          "name": "AddressBloc: Menu Continued",
          "summary": "Menu Continued: putting the finishing touches on the command-line menu",
          "body": "<!-- { ids:[1630], name:'AddressBloc: Menu Continued', summary:'Menu Continued: putting the finishing touches on the command-line menu' } -->\n<center>![Reef Knot](https://bloc-global-assets.s3.amazonaws.com/images-rails/menu-continued/banner.jpg)</center>\n\n> “The closer one gets to the speed of light, the slower time travels. The exact thing is true when completing a book.”\n>\n> — [Daniel Ionson](https://www.facebook.com/daniel.ionson)\n\n## Introduction\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/vf7ajnmwvh\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n\nWe're almost done! We need to write the rest of the methods in `menu_controller.rb` to connect the user interface of Address Bloc to the methods in `AddressBook`.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint for details](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint).\n\n## Import\n\nStart by writing the body of the stubbed `read_csv` method:\n\n```ruby(controllers/menu_controller.rb)\n   end\n \n   def read_csv\n     # #1\n+    print \"Enter CSV file to import: \"\n+    file_name = gets.chomp\n+\n     # #2\n+    if file_name.empty?\n+      system \"clear\"\n+      puts \"No CSV file read\"\n+      main_menu\n+    end\n+\n     # #3\n+    begin\n+      entry_count = address_book.import_from_csv(file_name).count\n+      system \"clear\"\n+      puts \"#{entry_count} new entries added from #{file_name}\"\n+    rescue\n+      puts \"#{file_name} is not a valid CSV file, please enter the name of a valid CSV file\"\n+      read_csv\n+    end\n   end\n \n   def entry_submenu(entry)\n```\n\nAt **#1**, we prompt the user to enter a name of a `CSV` file to import. We get the filename from [`STDIN`](http://en.wikipedia.org/wiki/Standard_streams) and call the `chomp` method which removes [`newlines`](http://en.wikipedia.org/wiki/Newline).\n\nAt **#2**, we check to see if the file name is empty. If it is then we return the user back to the main menu by calling `main_menu`.\n\nAt **#3**, we import the specified file with `import_from_csv` on `address_book`. We then clear the screen and print the number of entries that were read from the file. All of these commands are wrapped in a `begin/rescue` block. `begin` will protect the program from crashing if an exception is thrown.\n\n> An exception is like a yellow card in soccer. When a player commits a foul, the referee gives the player a warning by issuing a yellow card, but the player is allowed to continue to play.\n\nIn Ruby, if the program performs an operation that is illegal (such as dividing a rational number by zero) then Ruby will throw an exception, but the program is allowed to continue executing at the `rescue` statement. Our `begin` and `rescue` block catches potential exceptions and handles them by printing an error message and calling `import_from_csv` again.\n\nLet's explore Ruby exception handling:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/b2u1cdn3x6\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Delete\n\nLet's add the ability to delete an entry:\n\n```ruby(controllers/menu_controller.rb)\n         entry_submenu(entry)\n     end\n   end\n+\n+  def delete_entry(entry)\n+    address_book.entries.delete(entry)\n+    puts \"#{entry.name} has been deleted\"\n+  end\n+\n end\n+\n```\n\nWe remove `entry` from `address_book` and print out a message to the user that says `entry` has been removed. Let's add the ability to edit an entry.\n\n## Edit\n\n```ruby(controllers/menu_controller.rb)\n     puts \"#{entry.name} has been deleted\"\n   end\n \n+  def edit_entry(entry)\n     # #4\n+    print \"Updated name: \"\n+    name = gets.chomp\n+    print \"Updated phone number: \"\n+    phone_number = gets.chomp\n+    print \"Updated email: \"\n+    email = gets.chomp\n     # #5\n+    entry.name = name if !name.empty?\n+    entry.phone_number = phone_number if !phone_number.empty?\n+    entry.email = email if !email.empty?\n+    system \"clear\"\n     # #6\n+    puts \"Updated entry:\"\n+    puts entry\n+  end\n+\n end\n```\n\nAt **#4**, we perform a series of `print` statements followed by `gets.chomp` assignment statements. Each `gets.chomp` statement gathers user input and assigns it to an appropriately named variable.\n\nAt **#5**, we use `!attribute.empty?` to set attributes on entry only if a valid attribute was read from user input.\n\nAt **#6**, we print out `entry` with the updated attributes.\n\n## Connect the Delete and Edit Methods\n\nWe wrote `delete_entry` and `edit_entry` but we still need to connect them to `main_menu`. An entry can only be deleted or edited directly from the submenu. Let's connect them directly from `entry_submenu`:\n\n```ruby(controllers/menu_controller.rb)\n     case selection\n       when \"n\"\n       when \"d\"\n         # #7\n+        delete_entry(entry)\n       when \"e\"\n         # #8\n+        edit_entry(entry)\n+        entry_submenu(entry)\n       when \"m\"\n         system \"clear\"\n         main_menu\n```\n\nAt **#7**, when a user is viewing the submenu and they press `d`, we call `delete_entry`. After the entry is deleted, control will return to `view_all_entries` and the next entry will be displayed.\n\nAt **#8**, we call `edit_entry` when a user presses `e`. We then display a sub-menu with `entry_submenu` for the entry under edit.\n\n## Search\n\nThe last task is to write the remainder of `search_entries`.\n\n```ruby(controllers/menu_controller.rb)\n   end\n \n   def search_entries\n     # #9\n+    print \"Search by name: \"\n+    name = gets.chomp\n     # #10\n+    match = address_book.binary_search(name)\n+    system \"clear\"\n     # #11\n+    if match\n+      puts match.to_s\n+      search_submenu(match)\n+    else\n+      puts \"No match found for #{name}\"\n+    end\n   end\n \n   def read_csv\n```\n\nAt **#9**, we get the name that the user wants to search for and store it in `name`.\n\nAt **#10**, we call `search` on `address_book` which will either return a match or `nil`, it will never return an empty string since `import_from_csv` will fail if an entry does not have a name.\n\nAt **#11**, we check if `search` returned a match. This expression evaluates to _false_ if `search` returns `nil` since `nil` evaluates to _false_ in Ruby. If `search` finds a match then we call a helper method called `search_submenu`. `search_submenu` displays a list of operations that can be performed on an `Entry`. We want to give the user the ability to delete or edit an entry and return to the main menu when a match is found. Let's write `search_submenu`:\n\n```ruby(controllers/menu_controller.rb)\n     puts entry\n   end\n \n+  def search_submenu(entry)\n     # #12\n+    puts \"\\nd - delete entry\"\n+    puts \"e - edit this entry\"\n+    puts \"m - return to main menu\"\n     # #13\n+    selection = gets.chomp\n+\n     # #14\n+    case selection\n+      when \"d\"\n+        system \"clear\"\n+        delete_entry(entry)\n+        main_menu\n+      when \"e\"\n+        edit_entry(entry)\n+        system \"clear\"\n+        main_menu\n+      when \"m\"\n+        system \"clear\"\n+        main_menu\n+      else\n+        system \"clear\"\n+        puts \"#{selection} is not a valid input\"\n+        puts entry.to_s\n+        search_submenu(entry)\n+    end\n+  end\n end\n```\n\nAt **#12**, we print out the submenu for an entry.\n\nAt **#13**, we save the user input to `selection`.\n\nAt **#14**, we use a `case` statement and take a specific action based on user input. If the user input is `d` we call `delete_entry` and after it returns we call `main_menu`. If the input is `e` we call `edit_entry`. `m` will return the user to the main menu. If the input does not match anything (see the `else` statement) then we clear the screen and ask for their input again by calling `search_submenu`.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| `begin` and `rescue` | `begin` and `rescue` blocks are Ruby's implementation of try/catch blocks in other languages. [Exception handling](http://en.wikipedia.org/wiki/Exception_handling) is a very important part of any programming language and allows your program to dynamically rebound from any sort of unexpected error that gets *raised* during execution. `begin/rescue` blocks should not be abused. They should only be used when we know that there is a chance that a particular exception may occur. |\n| `View` | A `View` \"requests information from the model that it uses to generate an output representation to the user\" in [`MVC`](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller). In Address Bloc, the command line menu we built operates as our `View` in the `MVC` pattern. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n* Create a menu option to delete all entries. Name it something extreme like `detonate`, `demolish` or `nuke`.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/yt6g7ou6sk?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Menu Continued Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 23,
          "checkpoint_type": "normal",
          "position": 23,
          "points": 1,
          "ref": "3d58606c-2cc1-42d4-b05d-3d634dc3a120|0"
        },
        {
          "id": 1890,
          "name": "Programming Reinforcement: Checkpoint 2",
          "summary": "Reinforce Ruby programming and problem solving fundamentals through curated exercises",
          "body": "<!-- { ids:[1777,1782,1890], name:'Programming Reinforcement: Checkpoint 2', summary:'Reinforce Ruby programming and problem solving fundamentals through curated exercises' } -->\n\n<mentor-checkpoint-note>The programming reinforcement checkpoints in the Frontend and Rails courses are not the same. In order to be career support eligible, students must complete them all <b>before graduating a course</b>. They gradually increase in difficulty, so we recommend doing them in order.</mentor-checkpoint-note>\n\nEach foundation checkpoint introduces new concepts, patterns, and assignments. We designed Bloc’s curriculum to push you to your learning limits. With that in mind, we’ve included breaks between lessons to reinforce programming concepts; this is the second of those breaks, known as Programming Reinforcement checkpoints.\n\nIn these checkpoints, you will complete coding challenges that help you master Ruby and learn to think like a programmer. After you complete the challenges, you will meet with your mentor to discuss your solutions.\n\n- [Challenges](#challenges)\n- [Bonus Challenge: Word A10n Abbreviation](#bonus-challenge)\n- [Assignment](#assignment)\n\t- [For Mentors](#for-mentors)\n\n<a name=\"challenges\"></a>\n## Challenges\n\nYou must solve these three Kata (challenges) before submitting the checkpoint. At this point in your program, your skill level meets or exceeds that required by each Kata. While they may challenge you, know that you are capable of completing each one.\n\n>Your mentor may help you, but we strongly encourage you attempt these on your own.\n\n| Kata                                                                                                             | Difficulty[*](#difficulty) | Hint                                                                                                                                     |\n|:-----------------------------------------------------------------------------------------------------------------|:---------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------|\n| [Tube Strike Options](http://www.codewars.com/kata/tube-strike-options-calculator/train/ruby)                    | 7                          | Pay close attention to the units (kilometers per hour) and use division to recover the length of time for each method of transportation. |\n| [Character Counter](http://www.codewars.com/kata/character-counter/train/ruby)                                   | 7                          | You can use `downcase` on a String to convert all characters to lower-case.                                                              |\n| [Most Frequent Item Count](http://www.codewars.com/kata/find-count-of-most-frequent-item-in-an-array/train/ruby) | 7                          | You can track the number of character appearances in a Hash.                                                                             |\n\n<a name=\"difficulty\"></a>\n\\*<sub> Difficult problems have lower ratings.</sub>\n\n<a name=\"bonus-challenge\"></a>\n## Bonus Challenge: [Word A10n Abbreviation](http://www.codewars.com/kata/word-a10n-abbreviation/train/ruby)\n\n>This bonus challenge is optional, but we strongly encourage you to attempt it.\n\nThis challenge is difficult. It asks you to replace all words of length four or greater found within a String with their abbreviated forms. For example, “Hello,” becomes “H3o.” You must replace the characters between the first and last letters with the number of characters removed.\n\nThis method must work with full sentences, including punctuation. Where hyphens are present (`-`), your code will abbreviate words on either side of the hyphens independently. Here are some examples:\n\n```ruby\nAbbreviator.abbreviate('Animals')\n#=> 'A5s'\n\nAbbreviator.abbreviate('How are you today?')\n#=> 'How are you t3y?'\n\nAbbreviator.abbreviate('Tony Stark is an anti-hero.')\n#=> 'T2y S3k is an a2i-h2o.'\n\nAbbreviator.abbreviate('Remember, this is abbreviation, this is important!')\n#=> 'R6r, t2s is a10n, t2s is i7t!'\n```\n\nYou may consider a solution that loops through the String, replacing one word at a time until it completes the work. That is one viable option, but one of the most cumbersome. We recommend investigating [regular expressions](https://www.bloc.io/resources/regular-expressions-regex) and [testing them](http://rubular.com/).\n\nString has methods, [`split`](http://ruby-doc.org/core-2.2.3/String.html#method-i-split) for example, that allow you to supply a regular expression (regex) to select and replace a String’s contents.\n\n<a name=\"assignment\"></a>",
          "assignment": "- Complete all [mandatory challenges](#challenges).\n  - Submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to each of your solutions as part of your assignment.\n- Attempt the [Bonus Challenge](#bonus-challenge).\n  - Keep a log as you work through it and consider these questions when writing your report:\n    - What approaches did you try?\n    - Did you ever restart the process? If so, why?\n    - What steps did you take to solve the problem before you began coding?\n    - What was the most challenging aspect of the problem?\n    - Etc.\n  - If you complete the [Bonus Challenge](#bonus-challenge), submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to your solution.\n- Discuss your solutions and your struggles with your mentor.\n\n>Articulating your problem solving process is a valuable skill on the job and during technical interviews.\n\nRemember to click **Submit Final** on every challenge you complete, and notify your mentor when you do so. For challenges you *do not* complete, you may ask your mentor to review them with you.\n\n<a name=\"for-mentors\"></a>\n### For Mentors\n\nConsult this [document for reference](https://www.bloc.io/resources/ruby-programming-reinforcement-mentor-s-guide) for this and all future Ruby Programming Reinforcement checkpoints.",
          "roadmap_section_id": 120,
          "active_index": null,
          "checkpoint_type": "career_prep",
          "position": null,
          "points": 1,
          "ref": "43bd339b-49fa-4418-8283-c92e7fdefe20|0"
        },
        {
          "id": 1631,
          "name": "Rails: Basic Rails App",
          "summary": "Basic Rails App: creating and deploying a new Rails app",
          "body": "<center>\n  ![public-index](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-basic-rails-app/rubyrails.png)\n</center>\n\n> “Rails is the most well thought-out web development framework I’ve ever used. Nobody has done it like this before.”\n>\n> — [James Duncan Davidson](https://en.wikipedia.org/wiki/James_Duncan_Davidson)\n\n## Bloccit\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/8f520xus4k\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nIn this checkpoint, you'll start a new project, similar to [Reddit](http://www.reddit.com/), named Bloccit.\n\nJust like Reddit, Bloccit will be an app where people can post, vote on, share and save links and comments. Bloccit will have many features needed to make it a cool web app, but the first thing you need to do is design a basic user-interface (UI) as a foundation to build on.\n\n## Create Bloccit\n\nThe first step is to create a new Rails app. Run the `rails new` command in the `code` directory we created earlier:\n\n```bash(Terminal)\n$ cd code\n$ rails new bloccit -T\n```\n\nThe app name is `bloccit`. The `-T` option specifies that the app should not be created with standard test packages since we'll be testing our app with `RSpec`.\n\nWhen we ran the `rails new` command, we should've seen a long output in your console. Among other things, `rails new` creates the Rails app structure. Open the project in the editor to explore the Rails app structure.\n\nWe should see a full Rails app structure. We'll explore the various directories as we progress through the Roadmap. We'll begin to make changes, but before you do, we'll want to establish the README, and update the database file and Git repositories\n\n## Create a New README\n\nA `README` file should describe what the app or program does. It should also provide directions on how to install it, run tests, or anything else that another developer would need to know.\n\nRename the `README` to use Markdown:\n\n```bash(Terminal)\n$ mv README.rdoc README.md\n```\n\nOpen `README.md` and update it with the following content:\n\n```md\n+## Bloccit: a Reddit replica to teach the fundamentals of web development and Rails.\n+\n+Made with my mentor at [Bloc](http://bloc.io).\n```\n\n> Feel free to change the style or content of `README.md` as you see fit.\n\n## Create the Development Database\n\nReplace the contents of your `Gemfile` with the following:\n\n```ruby(Gemfile)\n+source 'https://rubygems.org'\n+\n+# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'\n+gem 'rails', '4.2.5'\n+\n # #1\n+group :production do\n+  gem 'pg'\n+end\n+\n # #2\n+group :development do\n+  gem 'sqlite3'\n+end\n+\n+# Use SCSS for stylesheets\n+gem 'sass-rails', '~> 5.0'\n+# Use Uglifier as compressor for JavaScript assets\n+gem 'uglifier', '>= 1.3.0'\n+# Use CoffeeScript for .coffee assets and views\n+gem 'coffee-rails', '~> 4.1.0'\n+# Use jquery as the JavaScript library\n+gem 'jquery-rails'\n+# Turbolinks makes following links in your web application faster. Read more: https://github.com/rails/turbolinks\n+gem 'turbolinks'\n```\n\nAt __#1__ and __#2__ we specify different databases for our Development and Production environments. We use `sqlite3` for our Development environment because it is an easy to use database perfect for rapid testing. Heroku only supports Postgres, so we use `pg` in our Production environment.\n\nBecause we changed your `Gemfile`, we must update our application with `bundle install --without production`. This command installs everything specified in the `Gemfile` and ensures that all of the gems work harmoniously. The `--without production` option ignores gems in `group :production`. These gems aren't needed or used in our Development environment. Our Production environment will automatically run `bundle install` when we deploy, and will account for gems declared in `group :production` at that point. On the command line, in the root `Bloccit` directory, type:\n\n```bash(Terminal)\n$ bundle install --without production\n```\n\nRun the following command in your terminal to create the database:\n\n```bash(Terminal)\n$ rake db:create\n```\n\nThis creates a new local database for our app to use. We have to run this command after creating a new app, or after dropping an existing database.\n\n## The Asset Pipeline\n\nAs stated in the [Rails Guide](http://guides.rubyonrails.org/asset_pipeline.html):\n\n> The asset pipeline provides a framework to concatenate and minify, or compress, JavaScript and CSS assets. It also adds the ability to write these assets in other languages such as CoffeeScript, Sass, and ERB.\n\nThe purpose of the asset pipeline is to make Rails apps fast by default while allowing developers to write \"assets\" (images, styles, and JavaScript, mostly) in a variety of languages.\n\nRails 4 requires some minor configuration changes to properly serve assets on Heroku:\n\n```ruby(Gemfile)\n ...\n group :production do\n   gem 'pg'\n+  gem 'rails_12factor'\n end\n\n group :development do\n   gem 'sqlite3'\n end\n ...\n```\n\nWe added `rails_12factor` to the Gemfile; let's install it in our application:\n\n```bash(Terminal)\n$ bundle install\n```\n\nHeroku provides a [detailed explanation](https://devcenter.heroku.com/articles/rails-4-asset-pipeline) of the Rails 4 configuration changes.\n\n## Test Locally\n\nStart the Rails server from your command line:\n\n```bash(Terminal)\n$ rails s\n```\n\n> If you're [using Cloud9](https://www.bloc.io/resources/cloud9-on-rails), remember to start the Rails server with the `-p $PORT -b $IP` flags.\n\nNavigate to [localhost:3000](http://localhost:3000/) to make sure the app is working locally.\n\n> Starting the web server with `rails s` will leave your terminal in an \"open\" state. That is, you won't see a command prompt until you stop the server. Open your app on localhost and view it next to the terminal where you started the server. Refresh the page on localhost, and you'll see the server logs update in your terminal. While you're running the Rails web server, the terminal logs all activity in your app.\n\n## Git and GitHub\n\nSign into your [GitHub](https://github.com/) account and create a new repo named `bloccit`. You've already created a README, so make sure the \"Initialize this repository with a README\" is _unchecked_.\n\nCommit and push your code up to your GitHub repo:\n\n> If your Rails server is still running, you can either stop it by pressing `CTRL-C` or leave it running and open a new Terminal tab. Either way, you'll need a Terminal prompt before moving forward.\n\n```bash(Terminal)\n$ git init\n$ git add .\n$ git commit -m 'First commit and README update'\n$ git remote add origin git@github.com:<user name>/<repo_name>.git\n$ git push -u origin master\n```\n\n> Use the URL from GitHub's instructions.\n\nReload the repo homepage on GitHub. It should display the content from `README.md` at the bottom of the page and you should see all of this repo's files.\n\n## Deploying to Heroku\n\nIt is time to deploy and share your app with the world. There are many choices for deploying and hosting Rails applications, and Bloc recommends the popular [Heroku](https://www.heroku.com/) platform. Heroku makes it easy to manage and deploy Rails apps using the command line.\n\n[Sign up for a free Heroku account](http://api.heroku.com/signup). Then install the [Heroku Toolbelt](https://toolbelt.heroku.com) for your OS. This toolbelt will allow you to run Heroku commands from the command line.\n\n> If you're using Cloud9, the Heroku toolbelt is already installed.\n\nLog into your new Heroku account:\n\n```bash(Terminal)\n$ heroku login\n```\n\nAfter you've logged in, create a new application in Heroku:\n\n```bash(Terminal)\n$ heroku create\n```\n\n> Because we did not specify a name with `heroku create`, Heroku created one for us.\n\nWe have a Production environment to `push` our application to. Type this command to push the code from the master branch of your Git repo to Heroku:\n\n```bash(Terminal)\n$ git push heroku master\n```\n\n> It may take a few minutes for the new application to propagate in Heroku. If you receive an error that says `Permission denied (publickey)`, [go here](https://devcenter.heroku.com/articles/keys#adding-keys-to-heroku) to learn how to fix it.\n\nHere is a video recap of how to deploy to Heroku:\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/xbb8g1je9s\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nYou can see the web address for your application in Production by typing the following:\n\n```bash(Terminal)\n$ heroku apps:info\n```\n\nCongratulations, you've deployed an application to your Production environment. For now, you'll receive an error message when you visit your Heroku URL.  This is because the static index page [is not used in production](https://devcenter.heroku.com/articles/getting-started-with-rails4#welcome-page). We'll fix that soon.\n\nMake sure you've added your [GitHub](https://github.com) account to your Bloc account page. Use the \"Submit your work\" tab to submit your first Bloccit commit for your mentor to review.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [`rails new`](http://guides.rubyonrails.org/command_line.html#rails-new) | `rails new` creates a new Rails application with the entire default Rails directory structure. |\n| [README](http://en.wikipedia.org/wiki/README) | A `README` is a text file commonly distributed with a program. It contains information that describes what the program does, provides directions on how to install it, run tests, or anything else that another developer would need to know. |\n| [Asset Pipeline](http://guides.rubyonrails.org/asset_pipeline.html) | The asset pipeline provides a framework to concatenate and minify, or compress JavaScript and CSS assets. It also adds the ability to write these assets in other languages such as CoffeeScript, Sass, and ERB. |\n| [`rails server`](http://guides.rubyonrails.org/command_line.html#rails-server) | The `rails server` command launches a small web server named WEBrick, which comes bundled with Ruby. |\n| [Heroku](https://www.heroku.com/) | Heroku (pronounced her-OH-koo) is a platform-as-a-service (PaaS) that enables developers to build and run applications entirely in the cloud. |\n| [Gems](http://guides.rubygems.org/what-is-a-gem/)  | Gems are Ruby libraries that can be used to extend or modify functionality within a Ruby application. |\n| [Rails Environments](http://teotti.com/use-of-rails-environments/) | Rails ships with three environments: \"Development\", \"Test\", and \"Production\". These environments are used to tell your app to behave differently in different circumstances, primarily by setting different configuration options and variables. |",
          "assignment": "After starting the Rails server, we can use `Ctrl-C` to shutdown the server. A common issue encountered by Rails developers is starting the Rails server and then accidentally closing the command line window in which it is running. The Rails server is still running in the background, but with the command line window closed, you can no longer use `Ctrl-C` to shut it down.  You could restart your computer, which kills all running processes. However, there is a better way, and we'll explore that in this assignment.\n\n1. Simulate losing track of your Rails server by starting it using the `-d` option:\n  > If you're using Cloud9, remember to start the Rails server with the `-p $PORT -b $IP` flags.\n\n  ```bash(Terminal)\n  $ rails s -d\n  ```\n\n  Using <thead></thead> `-d` option starts the Rails server as a [daemon](http://en.wikipedia.org/wiki/Daemon_%28computing%29), a computer program that runs as a background process.\n\n2. Start your Rails server again. You will see an error message:\n\n  ```bash(Terminal)\n  $ A server is already running. Check [local path]/tmp/pids/server.pid.\n  $ Exiting\n  ```\n\n3. To kill the lost server, find its [process id (PID)](http://en.wikipedia.org/wiki/Process_identifier) using the [`lsof` command](http://linux.die.net/man/8/lsof). `lsof -i :3000` returns the PID of the process using port 3000 (the port Rails server uses).\n  > If you're using Cloud9, the server will be running on whatever port number is in the `$PORT` environment variable, which may not be 3000.  Instead of lsof -i :3000, use `lsof -i :$PORT` to find the PID.\n\n4. We have the PID for your lost Rails server; terminate it using the [`kill -9 PID` command](http://linux.die.net/man/1/kill) using the PID we found with `lsof`.\n\nOnce you have completed the steps in this assignment, message your mentor with questions you have about the Rails server. If you have questions about starting the server, stopping the server, server logs, PID, etc. be sure to discuss them with your mentor before moving to the next checkpoint.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/yxaws8lqqm?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Basic Rails App Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 24,
          "checkpoint_type": "normal",
          "position": 24,
          "points": 1,
          "ref": "35062631-a937-46d0-824d-9ee425fa5bb2|0"
        },
        {
          "id": 1632,
          "name": "Rails: Static Pages",
          "summary": "Static Pages: using controllers and views to provide a static landing page",
          "body": "<center>\n  ![static](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-static-pages/static.jpg)\n</center>\n\n> “I make static art, not dynamic art. That's what I do.”\n>\n> — [Michael Heizer](http://en.wikipedia.org/wiki/Michael_Heizer)\n\n## Static Views\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/vvsobl2zzc\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWe have a working Rails app, but other than the default index page there's not much to show. The purpose of this checkpoint is to build static views, and in the process we'll learn the fundamentals of MVC architecture.\n\n## MVC Architecture\n\nMVC, which is an acronym for \"Model View Controller\", is the basic architectural pattern that guides the creation of all Rails applications. You worked with basic MVC when you built Address Bloc. In this checkpoint, we'll focus on views and controllers and learn about models later.\n\nA view is equivalent to a web page, and a controller determines what view should be shown. Consider the diagram below and focus on the flow of the request and response, as they pertain to views and controllers.\n\n![rails_mvc](https://bloc-global-assets.s3.amazonaws.com/images-rails/25-static-pages/rails_mvc.png)\n\nWhen you visit a website, you initiate a chain of actions. In an MVC application, a request is handled by a controller, which receives information from the model layer, and then uses that information to display a view.\n\nMVC architecture is analogous to the basic function in a restaurant:\n\n1. A customer (user) places an order with the waiter (controller).\n2. The waiter informs the kitchen (model) of the order.\n3. After the kitchen makes the order, the waiter serves the dish (view) to a customer.\n\n> The waiter doesn't need to know how the order will be prepared, or how it will be consumed, and that's just fine. Controllers, like waiters, should only be concerned with passing things to other parties.\n\nWe review MVC components and examples of their corresponding code in the next video:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/4kyyo3l6bz\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Generating a Controller and Views\n\nThe best way to understand the relationship between controllers and views is to create them. We could create controller and view files manually, but Rails provides a handy generator which ensures that _all_ necessary files are generated for a given controller. To generate a controller and its views, type the following on your command line in your project's directory:\n\n```bash(Terminal)\n$ rails generate controller welcome index about\n```\n\nThe output should look like this:\n\n```bash(Terminal)\n      create  app/controllers/welcome_controller.rb\n       route  get \"welcome/about\"\n       route  get \"welcome/index\"\n      invoke  erb\n      create    app/views/welcome\n      create    app/views/welcome/index.html.erb\n      create    app/views/welcome/about.html.erb\n      invoke  helper\n      create    app/helpers/welcome_helper.rb\n      invoke  assets\n      invoke    coffee\n      create      app/assets/javascripts/welcome.coffee\n      invoke    scss\n      create      app/assets/stylesheets/welcome.scss\n```\n\nWe passed three arguments to the `rails generate` command. The first argument represents the controller name, which is `welcome`. The next two arguments (`index` and `about`) represent views corresponding with the `welcome` controller. We could've named the controller and views anything, but the names should correspond with their primary function, as a best practice.\n\n## Exploring Controllers and Views\n\nOpen your project in your text editor. You should see a file named `welcome_controller.rb` in `app/controllers/`. You should also see the two views you created in `app/views/welcome/`. The generator created some code:\n\n```ruby(app/controllers/welcome_controller.rb)\nclass WelcomeController < ApplicationController\n  def index\n  end\n\n  def about\n  end\nend\n```\n\n`WelcomeController` is a Ruby class, and contains two empty methods that correspond to view names. These identically named methods and views are an example of a Rails convention called [default rendering](http://guides.rubyonrails.org/layouts_and_rendering.html#rendering-by-default-convention-over-configuration-in-action). When a controller method's purpose is to invoke a view, _it must be named with respect to the view_. The `index` method in the `WelcomeController` will invoke the **index** view inside the `app/views/welcome` directory.\n\nOpen the **index** and **about** views and read the placeholder code:\n\n```erb(app/views/welcome/index.html.erb)\n<h1>Welcome#index</h1>\n<p>Find me in app/views/welcome/index.html.erb</p>\n```\n\n```erb(app/views/welcome/about.html.erb)\n<h1>Welcome#about</h1>\n<p>Find me in app/views/welcome/about.html.erb</p>\n```\n\nStart the Rails server from your command line:\n\n```bash(Terminal)\n$ rails s\n```\n\nVisit [localhost:3000/welcome/index](http://localhost:3000/welcome/index) and  [localhost:3000/welcome/about](http://localhost:3000/welcome/about) to view the HTML code that was created by the controller generator.\n\n## Routing in Rails\n\nThe controller generator created the basic code needed for the `WelcomeController` and its views, and it also created code in the `config/routes.rb` file:\n\n```ruby(config/routes.rb)\nRails.application.routes.draw do\n  get \"welcome/index\"\n\n  get \"welcome/about\"\n  ...\nend\n```\n\nThis code creates HTTP `GET` routes for the **index** and **about** views. HTTP is the protocol that the Internet uses to communicate with websites. The `get` action corresponds to the HTTP `GET` verb. `GET` requests are used to retrieve information identified by the URL.\n\n> The HTTP protocol has other actions which we'll explore later.\n\nIf `routes.rb` doesn't specify a `GET` action, the view will not be served because the application won't know what to `get` when a user sends a request. Test this by commenting out these lines:\n\n```ruby(config/routes.rb)\n  # get \"welcome/index\"\n\n  # get \"welcome/about\"\n```\n\nRestart the server and visit [localhost:3000/welcome/index](http://localhost:3000/welcome/index). We'll see a Rails \"Routing Error\" page. This error occurs when our app doesn't understand what we're requesting, because there is no corresponding `get` action.\n\nUncomment those two lines and **delete all the other commented lines in the file**. Add a `root` path to the `routes.rb` file:\n\n```ruby(config/routes.rb)\n Rails.application.routes.draw do\n   get \"welcome/index\"\n\n   get \"welcome/about\"\n\n+  root 'welcome#index'\n ...\n end\n```\n\nThe `root` method allows us to declare the default page the app loads when we navigate to the home page URL. Test it by going to `localhost:3000`. You should see the welcome **index** view by default.\n\n> `root` is a method that takes a hash as an argument, here using the \"implied hash\" syntax. The line could be rewritten without using an implied hash as: `root({to: 'welcome#index'})`. You'll see implied hashes frequently in Rails because they enhance readability.\n\nView your app's available routes by typing `rake routes` from the command line. Stop the Rails server (`CTRL+C`) and give it a try. You should see the following output:\n\n```bash(Terminal)\n$ rake routes\n       Prefix Verb URI Pattern              Controller#Action\nwelcome_index GET /welcome/index(.:format) welcome#index\nwelcome_about GET /welcome/about(.:format) welcome#about\n         root GET /                        welcome#index\n```\n\n* The first column represents the route name: `welcome_index`\n* The second column represents the HTTP action associated with the route: `GET`\n* The third column represents the URI pattern, which is the URL used to request the view: `/welcome/index`\n* The fourth column represents the route destination, which translates to the controller and associated view: `welcome#index`\n\n> By default, Rails will present a searchable list of valid routes if an invalid route is requested. This is handy for troubleshooting large applications with many routes, and is also a nice fail-safe. Try it on `localhost`:\n\n![fake-routes](http://bloc-global-assets.s3.amazonaws.com/images-rails/25-static-pages/rake-routes.png)\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku.\n\n## Recap\n| **Concept** | **Description** |\n| :-- | :-- |\n| [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) | MVC (Model–view–controller) is an architectural pattern that divides a given application into three interconnected parts with distinct responsibilities. |\n| [Git Branching](http://git-scm.com/book/en/Git-Branching) | Diverges the master branch, so that you can work on new features without affecting the master branch. Git branches require little memory or disk space, making branching operations nearly instantaneous. |\n| [`rails generate`](http://guides.rubyonrails.org/command_line.html#rails-generate) | The `rails generate` command creates controllers from templates. The `generate` command can also generate controller actions and their corresponding views. |\n| [Controller](http://guides.rubyonrails.org/action_controller_overview.html#what-does-a-controller-do-questionmark) | Controllers are represented by the C in MVC. Controllers process requests and produce the appropriate output. Controllers communicate with the database and perform CRUD actions where necessary, via models. |\n| [Views](http://guides.rubyonrails.org/action_view_overview.html) | Views are responsible for rendering templates. View templates are written using embedded Ruby in tags and integrated with HTML. |\n| [`rake routes`](http://guides.rubyonrails.org/routing.html#inspecting-and-testing-routes) | The `rake routes` command lists all routes, in the same order as `routes.rb`. |\n| [localhost](http://en.wikipedia.org/wiki/Localhost) | **localhost** is a hostname that represents \"this computer\". |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nUse what you learned in this checkpoint to create a Contact page, do not use `rails generate`:\n\n1. Manually create `app/views/welcome/contact.html.erb`.\n2. Manually create the route to your new page in `routes.rb`.\n3. Add a `contact` action to `WelcomeController`.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/hbrjtl9t5d?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Static Pages Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 25,
          "checkpoint_type": "normal",
          "position": 25,
          "points": 1,
          "ref": "9bd7e8b1-4a3f-4631-89f5-3fa07b97122f|0"
        },
        {
          "id": 1733,
          "name": "Rails: Testing",
          "summary": "Testing: writing Rails features using Test-Driven Development",
          "body": "<center>\n  ![Testing](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-testing/testing.png)\n</center>\n\n> “Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.”\n>\n> — Martin Golding\n\n## Why We Test\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/24m9zodgw5\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nTest code is used to state expectations that are to be met when production code - the code that runs an application - is executed. Test code raises errors when its stated expectations are not met by production code. The two primary reasons to write test code are:\n\n1. To ensure that production code does what it's intended to do; and\n2. To ensure that production code doesn't break when you **refactor** it. [Refactoring](https://en.wikipedia.org/wiki/Code_refactoring) is \"the process of restructuring existing computer code – changing the factoring – without changing its external behavior\".\n\n> Like life, the one constant in programming is change. Code will evolve in ways you can't predict. If you have multiple dependencies, a small change to one file can create unexpected consequences in many files.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## RSpec\n\nThere are several testing frameworks for developing web applications with Rails, but we'll focus on [RSpec](http://rspec.info/) because it is the canonical framework, and thus the most likely framework you will encounter as a professional Rails developer.\n\nAdd the `rspec-rails` gem to your Gemfile:\n\n```ruby(Gemfile)\n source 'https://rubygems.org'\n\n # Bundle edge Rails instead: gem 'rails', github: 'rails/rails'\n gem 'rails', '4.2.5'\n\n group :production do\n   gem 'pg'\n   gem 'rails_12factor'\n end\n\n group :development do\n   gem 'sqlite3'\n end\n\n+group :development, :test do\n+  gem 'rspec-rails', '~> 3.0'\n+end\n\n # Use SCSS for stylesheets\n gem 'sass-rails', '~> 5.0'\n # Use Uglifier as compressor for JavaScript assets\n gem 'uglifier', '>= 1.3.0'\n # Use CoffeeScript for .coffee assets and views\n gem 'coffee-rails', '~> 4.1.0'\n # Use jquery as the JavaScript library\n gem 'jquery-rails'\n # Turbolinks makes following links in your web application faster. Read more: https://github.com/rails/turbolinks\n gem 'turbolinks'\n```\n\n> We added `rspec-rails` to the `:development` and `:test` groups because we want its tasks and generators to be available in both environments. We specified a version (`~> 3.0`) to maintain predictable behavior despite new RSpec releases.\n\nRun `bundle` from the command line to update your application with the installation of RSpec. Use the RSpec generator to configure Bloccit for testing:\n\n```bash(Terminal)\n$ rails generate rspec:install\n      create  .rspec\n      create  spec\n      create  spec/spec_helper.rb\n      create  spec/rails_helper.rb\n```\n\nThis generator creates a spec directory where we will write our tests.\n\n> RSpec will now automatically add test files for our models and controllers when we run `rails generate model...` or `rails generate controller...`.\n\n## The Test Database\n\nTests should be run in isolation because they can alter data stored in a database. That is, if we were to run tests in a Production environment, the tests could alter _production_ data - that would be a very bad thing to do. Running tests in isolation is somewhat standard behavior for web development in general, so by default Rails designates a separate database for testing.\n\nThe test database is _completely empty_ before you run your specs. Therefore, a spec must create the necessary data to test functionality. When the test is complete, the data is destroyed.\n\n> The Test database is isolated from the Development and Production databases. RSpec empties the Test database before running each spec. **Each test must create the data it needs.**\n\n## Test-Driven Development\n\nTest-Driven Development is the process of writing tests _before_ writing production code. Writing tests first might sound illogical, but it has many advantages:\n\n* Only the production code needed to pass a test is written. This leads to a leaner and more efficient codebase because you only code what you need – nothing more and nothing less.\n* Test-Driven Development allows developers to segment problems into small and testable steps.\n* Testing early and often allows developers to catch bugs earlier, preventing more expensive problems later when the codebase is large and hard to navigate.\n* Writing tests for code that doesn't exist can produce a [flow state](http://en.wikipedia.org/wiki/Flow_%28psychology%29). Writing tests _before_ writing production code can systematize your thought process, forcing you to be more explicit about how a function or page should behave.\n\n## Red, Green, Refactor\n\nThe TDD process involves three steps:\n\n1. Write a failing test for production functionality that does not exist. (Red)\n  - Ensure that the test _actually fails_. This verifies two aspects of the test: first, it demonstrates that the new spec does not pass with the existing code you've written, saving you from writing unnecessary code; second, it precludes the possibility that your test always passes, which could be an indication of a poorly-written test.\n2. Create the production functionality such that the test passes. (Green)\n3. Refactor the production code to make it cleaner and more sustainable. With a well-written test, you can refactor production code with the confidence that you will not break the application. If you refactor your code in such a way that would break the application, your test would fail and you would know to fix the problem that caused the failure.\n\n> We call this three-step process \"Red, Green, Refactor\", because of the colored command line output of running tests.\n\n## Basic Testing Principles\n\n1. __Keep tests as low-level as possible__: Test models thoroughly (we'll learn about models soon), test controllers moderately, and test complete application flow lightly. If we know the foundation (models) of our application is solid, we can put more trust in higher functions like controller actions and application flow.\n2. __Respect object limits__: When testing an object, try not to test any other objects, even if they're related. Narrow the scope of the test to be as small and self-contained as possible.\n3. __Don't test \"how\", test \"what\"__: We want to test what a method returns, not how it returns it. The internal implementation of a method is subjective, and while we believe in idioms and programming style, it is not the test's job to assess those things - only to assess what the code returns.\n4. __Write [DRY](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself) tests__: Wherever possible, avoid repetition in tests, just like production code.\n5. __Test early and often__: Tests function as our safety net, but they can't help us if we don't use them. At a minimum, we'll want to run our specs before each commit. Running tests before each commit allows us to reduce bugs proactively before we add them to the codebase.\n\n## Our First Test\n\nLet's create our first set of specs to test the `WelcomeController` actions. Generate a spec for `WelcomeController`:\n\n```bash(Terminal)\n$ rails generate rspec:controller welcome\n      create  spec/controllers/welcome_controller_spec.rb\n```\n\nThis command generates a spec file - `welcome_controller_spec.rb` - and places it in the `spec/controllers` directory. All specs will be written in the `spec` directory and are nested according to which part of the codebase they test. Open `welcome_controller_spec.rb` and add a test for the `index` action:\n\n```ruby(spec/controllers/welcome_controller_spec.rb)\n require 'rails_helper'\n\n # #1\n RSpec.describe WelcomeController, type: :controller do\n+  describe \"GET index\" do\n+    it \"renders the index template\" do\n # #2\n+      get :index\n # #3\n+      expect(response).to render_template(\"index\")\n+    end\n+  end\n end\n```\n\n- At __#1__, we describe the subject of the spec, `WelcomeController`.\n- We use `get`, at __#2__, to call the `index` method of `WelcomeController`.\n- At __#3__, we `expect` the controller's `response` to render the `index` template.\n\nRun `welcome_controller_spec.rb` to confirm that the new test passes:\n\n```bash(Terminal)\n$ rspec spec/controllers/welcome_controller_spec.rb\n.\n\nFinished in 0.0162 seconds (files took 2.75 seconds to load)\n1 example, 0 failures\n```\n\n> If you receive a message that says \"...db/schema.rb doesn't exist yet\" disregard it for now. We'll address it in a later checkpoint.\n\nLet's add a similar test for the `about` method:\n\n```ruby(spec/controllers/welcome_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe WelcomeController, type: :controller do\n   describe \"GET index\" do\n     it \"renders the index template\" do\n       get :index\n       expect(response).to render_template(\"index\")\n     end\n   end\n+\n+  describe \"GET about\" do\n+    it \"renders the about template\" do\n+      get :about\n+      expect(response).to render_template(\"about\")\n+    end\n+  end  \nend\n```\n\nRun the spec again:\n\n```bash(Terminal)\n$ rspec spec/controllers/welcome_controller_spec.rb\n..\n\nFinished in 0.0199 seconds (files took 2.96 seconds to load)\n2 examples, 0 failures\n```\n\nCongratulations, your first two tests are a complete success! You'll find that seeing green results from your tests can be very satisfying and therapeutic.\n\nThe following video demonstrates the principles of TDD in more detail:\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/a2xe9743ca\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [RSpec](http://rspec.info/) | RSpec is a test framework written in and for Ruby. |\n| [Rails Test Database](http://guides.rubyonrails.org/testing.html#the-test-environment) | Rails' dedicated test database allows developers to initiate and interact with test data in isolation so that production data is not compromised. |\n| [Test-Driven Development](http://en.wikipedia.org/wiki/Test-driven_development) | Test-Driven Development (TDD) is a software development process where test code is written prior to production code. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nCreate an FAQ page using TDD, do not use `rails generate`, instead, create the necessary files manually:\n\n1. Add a test to `welcome_controller_spec.rb` to test the `faq` action\n2. Run test to see it fail. If you don't see a test fail in the expected way, it's hard to trust that it is testing what you intended.\n3. Add the FAQ route to `routes.rb`\n4. Run test again. You should see a new failure.\n5. Add an `faq` action to `WelcomeController`\n6. Run test again.\n7. Create `app/views/welcome/faq.html.erb`\n8. Run `welcome_controller_spec.rb` to confirm the new test passes\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/m6tf4nykvk?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Testing Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 26,
          "checkpoint_type": "normal",
          "position": 26,
          "points": 1,
          "ref": "9caba88a-2181-4a63-80f5-39a7f8376bba|0"
        },
        {
          "id": 1634,
          "name": "Rails: HTML and CSS",
          "summary": "HTML and CSS: common HTML tags and CSS",
          "body": "![Taylor Swift Style](https://bloc-global-assets.s3.amazonaws.com/images-rails/hmtl-and-css/ts-style.png)\n\n> “We never go out of style.”\n>\n> — Taylor Swift\n\n## Structure and Style\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/rs1jc9hmbs\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nThe two basic building blocks of web development are HTML (Hypertext Markup Language) and CSS (Cascading Style Sheets). They provide the structure (HTML) and the style (CSS) for all web pages.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## HTML\n\n![header-links](https://bloc-global-assets.s3.amazonaws.com/images-rails/hmtl-and-css/header-links.gif)\n\nHTML is code that a browser can interpret and display as a web page. HTML by itself is not dynamic, but when used in conjunction with a language like Ruby and a framework like Rails, it can be _rendered_ dynamically. Based on the type of request made by a user, an app will respond with different HTML.\n\n### Modifying HTML\n\nYou've already seen the basic HTML generated by the `rails generate controller` command. For example, your `index` view looks like this:\n\n```erb(app/views/welcome/index.html.erb)\n<h1>Welcome#index</h1>\n<p>Find me in app/views/welcome/index.html.erb</p>\n```\n\nModify the __index__ view with custom HTML:\n\n```erb(app/views/welcome/index.html.erb)\n-<h1>Welcome#index</h1>\n-<p>Find me in app/views/welcome/index.html.erb</p>\n+<h1>Welcome to Bloccit</h1>\n+<p>This is the home page for Bloccit.</p>\n```\n\n> Try not to copy and paste. Writing code will enhance your cognitive and muscle memory.\n\nModify the __about__ view in the same fashion:\n\n```erb(app/views/welcome/about.html.erb)\n-<h1>Welcome#about</h1>\n-<p>Find me in app/views/welcome/about.html.erb</p>\n+<h1>About Bloccit</h1>\n+<p>Created by: Me</p>\n```\n\nAn HTML tag is composed of a term, such as [`h1`](http://www.w3schools.com/tags/tag_hn.asp) or [`p`](http://www.w3schools.com/tags/tag_p.asp), written between brackets `< >`. Text between HTML tags will be formatted according to their tag specification. Most HTML tags must be closed with `</ >`.\n\n### HTML, Ruby, and `application.html.erb`\n\nThe __index__ and __about__ views have an `.html.erb` file extension. This file extension allows us to use HTML and Ruby (ERB stands for \"embedded Ruby\") in the same file. By integrating Ruby code with HTML, we can dynamically change the behavior of static HTML code, based on user input.\n\nNearly every view in a Rails application will have some unique HTML and Ruby code, but there is also common code that needs to be included in _all views_. Rather than repeating the same code in every view, we use `application.html.erb`. Each view (like __index__ and __about__) is called from, and rendered inside, `application.html.erb`. In this way, you can think of `application.html.erb` as a container file that has HTML and Ruby code needed to run every view in a Rails app.\n\nTo help you understand the rendering process in `application.html.erb`, consider the following actions:\n\n1. A user requests a view\n2. The controller corresponding to the requested view invokes `application.html.erb`\n3. `application.html.erb` inserts the appropriate view using `yield`\n4. The complete web page is rendered and returned to the user\n\n`yield` is used to invoke a block, which renders a given view inside the `application.html.erb` container. Code between `<%` and `%>` is interpreted as Ruby. If the `<% %>` contains an `=`, such as `<%= %>`, the result of the Ruby code is printed to the screen (i.e. rendered as HTML). If there is no `=` (only `<% %>`) then the Ruby code will be _executed_ but not printed.\n\nModify the `application.html.erb` file to include additional HTML and Ruby that we need in every view in Bloccit:\n\n```erb(app/views/layouts/application.html.erb)\n <!DOCTYPE html>\n <html>\n <head>\n   <title>Bloccit</title>\n   <%= stylesheet_link_tag    \"application\", media: \"all\" %>\n   <%= javascript_include_tag \"application\" %>\n   <%= csrf_meta_tags %>\n </head>\n <body>\n+  <ul>\n+     <li><%= link_to \"Home\", welcome_index_path %></li>\n+     <li><%= link_to \"About\", welcome_about_path %></li>\n+  </ul>\n\n   <%= yield %>\n\n </body>\n </html>\n```\n\nThe `<ul>` and `<li>` tags render content as bulleted lists; ([`ul`](http://www.w3schools.com/tags/tag_ul.asp)) stands for \"unordered list\"). Inside of the [`<li>`](http://www.w3schools.com/tags/tag_li.asp) (list item) tags, you called Rails' `link_to` method. `link_to` is a helper method available in views, and returns a valid HTML hyperlink (called an [anchor tag](http://www.w3schools.com/tags/tag_a.asp)). For example:\n\n```erb\n<%= link_to \"Home\", welcome_index_path %>\n```\n\nWill render the following HTML:\n\n```erb\n<a href=\"/welcome/index\">Home</a>\n```\n\n### Rails Helper Methods\n\n`link_to` is a Rails helper method that returns a string of HTML code. `link_to` takes two arguments, a string (`\"Home\"`) which will be the display name of the hyperlink, and a path (`welcome_index_path`). `welcome_index_path` is a Rails method, generated by the `routes` file. Type `rake routes` on your command line again, and you'll see that the route name in the first column is `welcome_index`. When you add `_path` to the route name, it's recognized as a helper method that returns `\"/welcome/index\"`.\n\n> We could have typed `link_to \"Home\", \"/welcome/index\"` instead. The resulting link would have been identical, but Rails helpers are generally easier to use, and idiomatically correct.\n\nStart the Rails server and make sure that you are directed to the correct pages when you click the \"Home\" and \"About\" links.\n\n```bash(Terminal)\n$ rails s\n```\n\n> Rather than starting and stopping your server frequently, you can open multiple tabs in your terminal. You can leave one open for Git and Rails commands and one for the Rails server. Remember, if you change a route or a config file, or add a new Ruby gem, you'll need to restart your server. For all other changes - like changes to controller, view, or model files, a restart is _not_ necessary.\n\n## CSS\n\n![css](https://bloc-global-assets.s3.amazonaws.com/images-rails/hmtl-and-css/header-links-bootstrapped.png)\n\nCSS (Cascading Style Sheets) is the language used to style and position HTML elements on a web page. CSS has a simple syntax with three different types of elements: selectors, properties, and values.\n\n### CSS Selectors\n\nA CSS selector designates the HTML tag to be modified. Let's use CSS to modify the font color of `<h1>` tags :\n\n```scss(app/assets/stylesheets/welcome.scss)\n ...\n+h1 {\n+  color: red;\n+}\n```\n\nView the __index__ and __about__ pages. The content between the `<h1>` tags should be red now. There are a few important things to note about the code above:\n\n1. The CSS we added was in the `welcome.scss` file. When we ran `rails generate controller`, `welcome.scss` was created. By Rails convention, each controller has a corresponding stylesheet and view.\n2. Similar to the `.html.erb` extension, the `.scss` extension provides us with some additional syntax options (known as [Sass](http://sass-lang.com/)) to enhance default CSS capabilities. Sass is not a core part of this program, but you'll have a chance to experiment with it in the projects phase with your mentor, if you choose to do so.\n3. We wrote a CSS _selector_ and _declaration_. The selector, `h1`, specifies which element to modify. The declaration, composed of a _property_ (`color`) and _value_ (`red`), specifies how to modify it. We turned all `<h1>` tags red by using the `h1 { }` selector.\n\nThere are two other ways to select HTML elements: `id` selectors and `class` selectors. HTML elements can have `classes` and `ids`. Classes are used to conceptually group elements for styling while IDs are used to uniquely identify elements. We can use either for CSS styling:\n\n```erb\n<h1 class='class-name' id='id-name'>Content</h1>\n```\n\nTo select those elements for styling, we use `.` to refer to a class name and `#` to refer to an ID name. To see how this works, let's create an ID selector, named \"index-title\":\n\n```scss(app/assets/stylesheets/welcome.scss)\n h1 {\n   color: red;\n }\n\n+#index-title {\n+  text-align: center;\n+  font-size: 15px;\n+  color: blue;\n+}\n```\n\nWe'll use the \"index-title\" ID selector to style a `<p>` element:\n\n```erb(app/views/welcome/index.html.erb)\n <h1>Welcome to Bloccit</h1>\n-<p>This is the home page for Bloccit.</p>\n+<p id=\"index-title\">This is the home page for Bloccit.</p>\n```\n\nWe specified `id=\"index-title\"` after the `p` tag. The `id` can be named anything, but must match the name used in the CSS. Refresh the __index__ view to see the newly styled HTML.\n\nNow let's use a class selector to select a group of elements that should be styled the same way:\n\n```scss(app/assets/stylesheets/welcome.scss)\n\n h1 {\n   color: red;\n }\n\n #index-title {\n   text-align: center;\n   font-size: 15px;\n   color: blue;\n }\n\n+.posts {\n+  border: solid;\n+  margin: 5px;\n+  padding: 5px;\n+  height: 200px;\n+}\n```\n\nThe `.posts` class will apply to any element with the corresponding `class` designation. Update the __index__ view to use the `.posts` class:\n\n```erb(app/views/welcome/index.html.erb)\n <h1>Welcome to Bloccit</h1>\n <p id=\"index-title\">This is the home page for Bloccit.</p>\n+<div class=\"posts\">Post 1 goes here.</div>\n+<div class=\"posts\">Post 2 goes here.</div>\n```\n\n### The Box Model\n\nCSS can affect more than the color and size of elements, it can also position them. CSS positioning is based on the Box Model:\n\n![box-model](https://bloc-global-assets.s3.amazonaws.com/images-rails/hmtl-and-css/box-model.gif)\n\nThe Box Model applies to any HTML element, for which each component of the box can be set using CSS. Add the CSS code below, which uses a tag selector to define some box styles for `section`:\n\n```scss(app/assets/stylesheets/welcome.scss)\n...\n+section {\n+  background: #5998ff;\n+  border-style: solid;\n+  border-width: 5px;\n+  margin: 5px 5px 5px 5px;\n+  padding: 5px 5px 5px 5px;\n+}\n```\n\nWe made a thick, solid border with the `border-style` and `border-width` declarations so we can easily see what our box stylings are accomplishing. Then we set the [`margin`](http://www.w3schools.com/css/css_margin.asp) and [`padding`](http://www.w3schools.com/css/css_padding.asp) for our section.\n\n> The `margin` and `padding` values are set clockwise around the box. The first value is the `top`, the second is the `right`, third is `bottom`, and fourth is `left`.\n\nMaking the border visible with the `solid` declaration allows us to see the outline of the `section` element.\n\nAdd a `<section>` element to the __index__ view:\n\n```erb(app/views/welcome/index.html.erb)\n <h1>Welcome to Bloccit</h1>\n <p id=\"index-title\">This is the home page for Bloccit.</p>\n <div class=\"posts\">Post 1 goes here.</div>\n <div class=\"posts\">Post 2 goes here.</div>\n+<section>I am the content in a section element.</section>\n```\n\n![section-css](https://bloc-global-assets.s3.amazonaws.com/images-rails/hmtl-and-css/learning-css-with-bloccit.png)\n\nChange the values of the `margin` and `padding` properties and observe how the box model adjusts. Every HTML element has a box model. When you are trying to make your app look pixel-perfect, you'll find yourself constantly adjusting properties and values of boxes throughout your CSS code.\n\n### CSS Frameworks and Bootstrap\n\nWe've added some simple styles above, but we have a long way to go in making Bloccit look presentable. While you could write comprehensive style sheets from scratch, it's much more efficient to use a CSS framework. A CSS framework comes with many different style and position classes that you can use directly or customize further.\n\nOne of the most popular CSS frameworks is [Bootstrap](http://getbootstrap.com/), which we'll use for Bloccit. Bootstrap also provides layouts, forms, buttons, icons, Javascript functions, and more. Let's start by installing bootstrap and using a few basic style classes:\n\n1. Stop the Rails server, open `Gemfile` and add the [bootstrap-sass](https://github.com/twbs/bootstrap-sass) gem at the bottom of the `Gemfile` (make sure it is **outside** of a `group`):\n\n  ```ruby(Gemfile)\n   ...\n  +gem 'bootstrap-sass'\n  ```\n2. Run `bundle install` to install the new gem.\n3. Rename `application.css` to `application.scss`:\n\n  ```bash(Terminal)\n  $ mv app/assets/stylesheets/application.css app/assets/stylesheets/application.scss\n  ```\n4. Add the following lines to the bottom of `application.scss`, to integrate the newly installed Bootstrap with our application:\n\n  ```scss(app/assets/stylesheets/application.scss)\n  +@import \"bootstrap-sprockets\";\n  +@import \"bootstrap\";\n  ```\n5. Include the Bootstrap file in `app/assets/javascripts/application.js`:\n\n```js(app/assets/javascripts/application.js)\n //= require jquery\n //= require jquery_ujs\n //= require turbolinks\n+//= require bootstrap\n //= require_tree .\n```\n\nTo use Bootstrap's styles, add some of its layout classes to our container HTML:\n\n```erb(app/views/layouts/application.html.erb)\n <!DOCTYPE html>\n <html>\n <head>\n   <title>Bloccit</title>\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n   <%= stylesheet_link_tag    \"application\", media: \"all\" %>\n   <%= javascript_include_tag \"application\" %>\n   <%= csrf_meta_tags %>\n </head>\n <body>\n-  <ul>\n+  <div class=\"container\">\n+    <ul class=\"nav nav-tabs\">\n       <li><%= link_to \"Bloccit\", welcome_index_path %></li>\n       <li><%= link_to \"About\", welcome_about_path %></li>\n     </ul>\n\n     <%= yield %>\n+  </div>\n\n </body>\n </html>\n```\n\nThe \"viewport meta\" tag added inside the `<head>` with a `content` attribute value of `width=device-width, initial-scale=1` instructs browsers on small, high-pixel density screens (such as retina iPhones) to display our pages at a regular, readable size. Without this tag, our pages won't scale properly.\n\n[`container`](http://getbootstrap.com/css/#overview-type-links), [`nav`](http://getbootstrap.com/components/#nav-tabs), and [`nav-tabs`](http://getbootstrap.com/components/#nav-tabs) are classes provided by Bootstrap. By assigning these classes to HTML elements like `<div>` and `<ul>`, you are styling them with default Bootstrap properties and values.\n\nRemove the CSS rules you added to `welcome.scss` as well as the HTML changes you made in the `index` view. They were for demonstration only. Your __index__ view should look like this again:\n\n```erb(app/views/welcome/index.html.erb)\n<h1>Welcome to Bloccit</h1>\n<p>This is the home page for Bloccit.</p>\n```\n\nRestart the Rails server and observe the changes.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Deploy to Heroku with `git push heroku master`.",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nUse CSS and HTML to create a button in your `about.html.erb` page that links to one of your social media accounts:\n\n1. Read about [CSS positioning](http://alistapart.com/article/css-positioning-101) and the [Box Model](http://www.addedbytes.com/articles/for-beginners/the-box-model-for-beginners/) and use what you learn to center the text inside of the button.\n2. Create a CSS class in `welcome.scss` called `.social-btn` and use the attributes you read about to shape and position it. Attributes like display, height, width, background, border, color, text-align and font will help you create a basic button.\n3. Read our resource on Chrome's [Web Inspector](https://www.bloc.io/resources/web-inspector). Start Rails Server and experiment with paddings, margins, and other stylings in the inspector.\n4. Use the `ActionView` helper method [`link_to`](http://guides.rubyonrails.org/getting_started.html#adding-links) to link your button to your favorite social media account. This link should be on the welcome __about__ view.\n\n> Hint: You can pass an external link as the URL parameter to the `link_to` method in a string:\n\n```erb\n<%= link_to \"Follow me\", \"https://www.facebook.com/trybloc\", class: \"social-btn\" %>\n```\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/eujs0yhvk5?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">HTML & CSS Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 27,
          "checkpoint_type": "normal",
          "position": 27,
          "points": 1,
          "ref": "5119216f-127b-4af3-8f25-7ed19c38b5b8|0"
        },
        {
          "id": 1635,
          "name": "Rails: Models",
          "summary": "Models: storing Rails data in a structured interface for easy manipulation",
          "body": "<!-- { ids:[1635], name:'Rails: Models', summary:'Models: storing Rails data in a structured interface for easy manipulation' } -->\n![Derek Zoolander](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-models/banner.jpg)\n\n> People come up to me all the time and say 'you should be a model', or 'you look just like a model,' or 'maybe you should try to be a man who models.' And I always have to laugh because I'm so good looking. Of course I'm a model.\n>\n> — [Derek Zoolander](http://en.wikipedia.org/wiki/Zoolander)\n\n## Models\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/wf4d31ja8p\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nBloccit users will need to be able to _post_ information and _comment_ on those posts. Posts and comments will need to persist; that is, they'll need to be saved to a database so users can interact with them across sessions. When we need to persist data, we should immediately think about data models. Data models, or more simply \"models\", are the \"M\" in MVC architecture. Recall the diagram of MVC architecture to consider a model's place with respect to controllers and views:\n\n<center>![MVC](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-models/MVC.png)</center>\n\nModels are a programmatic representation of a table in a database. Models are also Ruby classes, similar to the classes we programmed earlier in the roadmap. In other words, the `Post` model will handle data pertaining to an instance of the `Post` class.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## `Post`\n\nThe first model we'll create is `Post`. Users should have the ability to submit posts to Bloccit with titles and descriptions, so the `Post` model and its corresponding database table will need two attributes: `title` and `body`.\n\n> An attribute is synonomous with database table column. You can also imagine a database table as a tab on a spreadsheet. Attributes like \"title\" and \"body\" would be column headers on that spreadsheet tab.\n\nUse a generator to create `Post` and its corresponding spec:\n\n```bash(Terminal)\n$ rails generate model Post title:string body:text\n      invoke  active_record\n   identical    db/migrate/20150606010447_create_posts.rb\n   identical    app/models/post.rb\n      invoke    rspec\n      create      spec/models/post_spec.rb\n```\n\nWe used a generator to create a model named \"Post\" with two attributes: `title` and `body`.\n- The `title` attribute is a string data type, because we expect it to be short. That is, we would probably not want to allow post titles with hundreds of characters.  \n- The `body` attribute is a text data type, because we expect a post's body to be verbose. It's possible that a user will need the ability to write hundreds of characters to provide context for a post.\n\nThe programmatic representation of the Post model was created by the generator above, in several files:\n- `post.rb` is a Ruby class which represents the Post model. This class will handle the logic and define the behavior for posts.\n- `post_spec.rb` is the test spec for the Post class.\n- `20150606010447_create_posts.rb` is the database migration file. A migration file defines the action taken on the database for a given model. An application will have many migration files, and comprehensively they serve as a set of instructions for building a database. We'll explore migration files in detail later.\n\nUse `cat` to see the contents of the spec file:\n\n```bash(Terminal)\n$ cat spec/models/post_spec.rb\n require 'rails_helper'\n\n RSpec.describe Post, type: :model do\n   pending \"add some examples to (or delete) #{__FILE__}\"\n end\n```\n\nThis is the template for a simple spec. We'll use TDD to define the behavior for `Post`. Add the following tests:\n\n```ruby(spec/models/post_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Post, type: :model do\n-  pending \"add some examples to (or delete) #{__FILE__}\"\n # #1\n+  let(:post) { Post.create!(title: \"New Post Title\", body: \"New Post Body\") }\n+\n # #2\n+  describe \"attributes\" do\n+    it \"has title and body attributes\" do\n+      expect(post).to have_attributes(title: \"New Post Title\", body: \"New Post Body\")\n+    end\n+  end\n end\n```\n\n- At **#1**, using the `let` method, we create a new instance of the Post class, and name it `post`. [let](https://www.relishapp.com/rspec/rspec-core/v/2-5/docs/helper-methods/let-and-let) dynamically defines a method (in this case, `post`), and, upon first call *within a spec* (the `it` block), computes and stores the returned value.\n\n- At **#2**, we test whether `post` has attributes named `title` and `body`. This tests whether `post` will return a non-nil value when `post.title` and `post.body` is called.\n\nUse `cat` to see the contents of `post.rb`, which was also created with a basic template:\n\n```bash(Terminal)\n$ cat app/models/post.rb\nclass Post < ActiveRecord::Base\nend\n```\n\nWhen the generator created this template, it made the Post class **inherit** from [ActiveRecord::Base](http://api.rubyonrails.org/classes/ActiveRecord/Base.html). Because we used a model generator, Rails assumed that we wanted our class to be used as a **model**. ActiveRecord::Base essentially handles interaction with the database and allows us to persist data through our class. Run the spec:\n\n```bash(Terminal)\n$ rspec spec/models/post_spec.rb\n```\n\nYou will see a verbose error, but focus on the first line:\n\n```bash(Terminal)\nschema.rb doesn't exist yet. Run `rake db:migrate` to create it, then try again.\n```\n\nRSpec reported that `schema.rb` doesn't exist. `schema.rb` is a file located in the `db` directory that represents an application's complete database architecture; the tables it uses and how those tables relate to each other. We don't have `schema.rb` because we have not yet created the database or any tables. The generator created the migration file, but we haven't executed that file yet. We'll do that now:\n\n```bash(Terminal)\n$ rake db:migrate\n== 20150606010447 CreatePosts: migrating ======================================\n-- create_table(:posts)\n   -> 0.0016s\n== 20150606010447 CreatePosts: migrated (0.0017s) =============================\n```\n\n> Rake is a Ruby build command. It allows us to execute administrative tasks for our application. To see a complete list of rake tasks, type `rake --tasks` from the command line.\n\n`rake db:migrate` created a new table named \"posts\". Let's review the migration file, which is the only file in the `db/migrate` directory (its name begins with a timestamp, and so will differ from the one below):\n\n```ruby(db/migrate/20150606010447_create_posts.rb)\n$ cat db/migrate/20150606010447_create_posts.rb\nclass CreatePosts < ActiveRecord::Migration\n  def change\n    create_table :posts do |t|\n      t.string :title\n      t.text :body\n\n      t.timestamps null: false\n    end\n  end\nend\n```\n\nThe migration is written in Ruby. The migration file is actually a class named `CreatePosts`. When we run the migration, the `change` method calls the `create_table` method. `create_table` takes a block that specifies the attributes we want our table to possess.\n\n> Rails automatically adds timestamp attributes named `created_at` and `updated_at` to the migration. We'll discuss these attributes in depth later.\n\nRun the tests in `post_spec.rb` again:\n\n```bash(Terminal)\n$ rspec spec/models/post_spec.rb\n..\n\nFinished in 0.00817 seconds (files took 1.67 seconds to load)\n2 examples, 0 failures\n```\n\nOur tests passed, so we know that the Post model has the attributes we expected.\n\n## `Comment`\n\nThe `Comment` model needs one attribute - `body` - and a reference to `Post`. Let's create the spec, model, and migration files with the model generator:\n\n```bash(Terminal)\n$ rails generate model Comment body:text post:references\n      invoke  active_record\n      create    db/migrate/20150608215948_create_comments.rb\n      create    app/models/comment.rb\n      invoke    rspec\n      create      spec/models/comment_spec.rb\n```\n\nOpen `comment_spec.rb` and add the following test:\n\n```ruby(spec/models/comment_spec.rb)\n RSpec.describe Comment do\n-  pending \"add some examples to (or delete) #{__FILE__}\"\n+  let(:post) { Post.create!(title: \"New Post Title\", body: \"New Post Body\") }\n+  let(:comment) { Comment.create!(body: 'Comment Body', post: post) }\n+\n+  describe \"attributes\" do\n+    it \"has a body attribute\" do\n+      expect(comment).to have_attributes(body: \"Comment Body\")\n+    end\n+  end\n end\n```\n\nReview `comment.rb`:\n\n```ruby(app/models/comment.rb)\n$ cat app/models/comment.rb\nclass Comment < ActiveRecord::Base\n  belongs_to :post\nend\n```\n\nWe say that _\"a comment belongs to a post\"_ or, conversely, _\"a post has many comments.\"_ Both of these phrases relate to a data concept known as \"relationships\" or \"associations.\"\n\nEach model instance in a Rails app automatically gets an `id` attribute to uniquely identify it. Each `post` will have a unique `id`, as will each `comment`. To make a comment belong to a post, we need to provide the post `id` to the `comment`. This is done using a **foreign key**.\n\nA foreign key is the `id` of one model, used as an attribute in another model, in order to look up the relationship. In the Post/Comment example, this means that the `Comment` model needs to have an attribute named `post_id`. The `post_id` attribute exists so that a `comment` can belong to a `post` (the post specified by its `post_id`). To allow many comments to belong to one `post`, you'd have multiple comment records with the same `post_id`. The diagram below illustrates how the post's `id` attribute relates to a comment's `post_id` attribute:\n\n<center>![Foreign Key Relationship](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-models/foreign_key.png)</center>\n\n> Rails is an opinionated framework that enforces many conventions by design. The foreign key naming convention of `post_id` was enforced when you ran the model generator. The `post_id` attribute was automatically created in the `Comment` model when you generated it with the `post:references` argument.\n\nReview the `create_comments` migration in the `db/migrate` directory and add a foreign key:\n\n```ruby(db/migrate/20140624203804_create_comments.rb)\n class CreateComments < ActiveRecord::Migration\n   def change\n     create_table :comments do |t|\n       t.text :body\n # #3\n       t.references :post, index: true, foreign_key: true\n\n       t.timestamps null: false\n     end\n   end\n end\n```\n\nAt **#3**, the `index` on the references line tells the database to index the `post_id` column, so it can be searched efficiently. This is always a good idea for foreign keys, and is added automatically when you generate with the `references` argument.\n\nIn reviewing the comment and post migrations, we see that the `create_table` method takes a `Symbol` argument which represents the table name, and a block argument that contains the details to be added to the table. This is one of the many reasons why Rails developers can code so efficiently - rather than creating the tables manually, and making sure all the attributes are set properly, we can rely on Rails' model generator to handle this mundane work.\n\nSince we have a new migration file, we shall once again run the migrations, adding the comments table to the database:\n\n```bash(Terminal)\n$ rake db:migrate\n== 20150608215948 CreateComments: migrating ===================================\n-- create_table(:comments)\n   -> 0.0021s\n== 20150608215948 CreateComments: migrated (0.0022s) ==========================\n```\n\nThe results above tell us that the tables and attributes have been created successfully.\n\nRun `comment_spec.rb`:\n\n```bash(Terminal)\n$ rspec spec/models/comment_spec.rb\n.\n\nFinished in 0.01325 seconds (files took 1.78 seconds to load)\n1 example, 0 failures\n```\n\nGit does not create empty directories by default. As a consequence, Rails automatically generates a blank `.keep` file in important directories that start as empty in a new application. Our `app/models` directory has one such file. Now that we've added two files to `app/models`, we should remove it:\n\n```bash(Terminal)\n$ rm app/models/.keep\n```\n\nYou've successfully created two database tables and associated them using a foreign key. In the next section we'll update the models to reflect the attributes and associations we just created in the console.\n\n## Updating `Post`\n\nRemember that when we use a model generator, the resulting model inherits from a class named `ActiveRecord::Base` by default. This inheritance pattern provides methods that the model will need in order to interact with tables in the database. Our comment class already relates to our post class, thanks to the model generator, but the post class does not yet relate to the comment class. Let's create that relation:\n\n```ruby(app/models/post.rb)\n class Post < ActiveRecord::Base\n+  has_many :comments\n end\n```\n\nThe `has_many` method allows a post instance to have many comments related to it, and also provides methods that allow us to retrieve comments that belong to a post.\n\n> This dynamic generation is similar to the way `attr_accessor` generates 'getter' and 'setter' methods for instance variables. We'll explore the precise methods created by `has_many` in the next checkpoint.\n\n## Visualizing the Database\n\nIt can be helpful to think about databases visually: What tables does the database have? What attributes do the tables have? How are the tables related? Here's a sample visualization for the two tables we've created in our application:\n\n<center>![comments-posts](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/24-models/comments-posts-database.png)</center>\n\nWhen we say that a comment belongs to a post, we mean that the comment stores that post's unique identifier in an attribute. The visualization makes this obvious.\n\nIn the proceeding video, we use a popular Ruby IDE, [RubyMine](https://www.jetbrains.com/ruby/), to visualize the database for demonstrative purposes only.\n\n> You do not need to download RubyMine during your Bloc course. Feel free to discuss it with your mentor and of course download it if you both feel like it will be helpful, but it is not a requirement for Bloc.\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/8stk62hgwj\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku.\n\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Active Record Models](http://guides.rubyonrails.org/active_record_basics.html) | Active Record Models are the layer responsible for representing business data and logic. They facilitate the creation and use of objects whose data requires persistent storage to the database. |\n| [Generating Models](http://guides.rubyonrails.org/command_line.html#rails-generate) | The `rails generate` command uses templates to create models, controllers, mailers, and more. When used to generate a model, it creates the Ruby class, test spec, and Active Record database migration. |\n| [Active Record Migrations](http://guides.rubyonrails.org/active_record_migrations.html) | Active Record Migrations allow you to evolve your database schema over time. They use Ruby so that you don't have to write SQL by hand. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nUsers may desire the ability to ask questions in Bloccit. The Questions model will be similar to the Posts model, but Questions should also have a `resolved` attribute that allows an administrator to mark the question as resolved.\n\n1. Create a new model named `Question`. It should have `title:string`, `body:text`, and `resolved:boolean` attributes.\n2. Create another new model named `Answer`. It should reference `Question` and have a `body` attribute.\n3. Write the specs for the `Question` and `Answer` models. The specs should ensure that the model attributes can be called as methods, as we did in the checkpoint with `Post` and `Comment` specs.\n4. Update `Question` so that it `has_many :answers`.\n5. Confirm that `Answer` `belongs_to :question`, in the Rails console.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/i8singb0k4?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Models Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 28,
          "checkpoint_type": "normal",
          "position": 28,
          "points": 1,
          "ref": "952b7e4a-33ca-47dd-bdb5-bb16c17f5899|0"
        },
        {
          "id": 1636,
          "name": "Rails: Object Relational Mapping",
          "summary": "ORM: translating from Ruby to SQL",
          "body": "![Babel Fish](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-orm/babel-fish.jpg)\n\n> “Meanwhile, the poor [Babel fish](http://en.wikipedia.org/wiki/List_of_races_and_species_in_The_Hitchhiker%27s_Guide_to_the_Galaxy#Babel_fish), by effectively removing all barriers to communication between different races and cultures, has caused more and bloodier wars than anything else in the history of creation.”\n>\n> — [Douglas Adams](http://en.wikiquote.org/wiki/Douglas_Adams)\n\n## Object Relational Mapping\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/3657zu3oh5\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nAs we learned in the last checkpoint, a model is a Ruby class that must also be represented as a database table. This implies that Rails must communicate with a database - and it does - but not without some complexity.\n\nCommunication between two systems which \"speak different languages\" is inherently complex because a translation service is required. As a Rails developer, you are essentially using two systems - Rails, which speaks Ruby, and a database, which speaks SQL.\n\nObject Relational Mapping, or ORM is similar to a translation service, in that it provides a way for Rails developers to manipulate a database using Ruby, rather than writing SQL. Rails employs an ORM library named `ActiveRecord` to provide this translation service. To explore how Rails leverages ORM, we'll experiment with the Rails console. Let's watch a video introducing SQL and the `ActiveRecord` ORM:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/xvnu5eokfs\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Rails Console\n\nThe Rails console loads our application in a shell, and provides access to Rails methods, app-specific methods, persisted data, and Ruby. To launch the console from the command line, enter:\n\n```bash(Terminal)\n$ rails c\n```\n\nAnd you should see the following message and prompt, or something very similar:\n\n```ruby(Console)\nLoading development environment (Rails 4.2.5)\n2.2.1 :001 >\n```\n\nBecause the console provides access to our application code, we can create posts and comments within the console, from the command line. Let's create a new post instance:\n\n```ruby(Console)\n> Post.create(title: \"First Post\", body: \"This is the first post in our system\")\n```\n\n> Creating a post would not be possible in IRB because posts and comments are specific to our application. Ruby (which is the only language that IRB understands) would not know what a \"Post\" is, and would throw an error.\n\nHere's what we did:\n\n- Called the `create` method on `Post`. This created a new row in the `posts` table. The `create` method is not Ruby - it's part of the `ActiveRecord` class that `Post` inherits from. The first line in our `post.rb` file - `class Post < ActiveRecord::Base` - declares this inheritance and gives `Post` access to the `create` method.\n- Passed a hash to the `create` method. The hash was comprised of two keys: `title` and `body`, and two values.\n\nEarlier we stated that Rails and the database don't speak the same language - but we just created a new database row via a Rails method, in the Rails console. This is ORM at work. The [`create` method](http://api.rubyonrails.org/classes/ActiveRecord/Persistence/ClassMethods.html) is part of the `ActiveRecord`, which is Rails' ORM library. `create` translates this: `Post.create(title: \"First Post\", body: \"This is the first post in our system\")` into SQL. We'll evaluate the resulting SQL in the next section.\n\n## SQL\n\nStructure Query Language, or SQL, is the common language for all databases. Though some database technologies employ their own flavor of SQL, all SQL flavors are similar in syntax and usage. Active Record is a robust ORM library, and translates Rails code into a specific flavor of SQL, which it detects automatically from the database. This means that we don't need to worry about the nuanced SQL flavors. Let's review the SQL that was executed when we called `create` - it was printed in our Rails console:\n\n```ruby(Console)\n   (0.1ms)  begin transaction\n # #1\n  SQL (0.8ms)  INSERT INTO \"posts\" (\"title\", \"body\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"title\", \"First Post\"], [\"body\", \"This is the first post in our system\"], [\"created_at\", \"2015-06-10 18:30:38.756344\"], [\"updated_at\", \"2015-06-10 18:30:38.756344\"]]\n # #2\n   (0.6ms)  commit transaction\n => #<Post id: 1, title: \"First Post\", body: \"This is the first post in our system\", created_at: \"2015-06-10 18:30:38\", updated_at: \"2015-06-10 18:30:38\">\n```\n\n**At #1**, we add a row to the posts table using the `INSERT INTO` SQL statement. `\"title\", \"body\", \"created_at\", \"updated_at\"`, are the column names (i.e. attributes) on the `posts` table. The list of values after `VALUES (?, ?, ?, ?)` in brackets (`[[\"title\", \"First Post\"] ... ]`) are values that correspond to the column names. The `created_at` and `updated_at` columns are default columns that Rails adds automatically, which is why we didn't need to specify them in the `create` call.\n\n**At #2**, we commit the transaction which executes `INSERT INTO`. Commit statements end a SQL transaction and make all changes permanent. A transaction is one or more SQL statements that a database treats as a single unit.\n\nWe now have one row in the posts table.\n\n## Retrieving Information\n\nIt is important to remember that a row in a table corresponds to an instance of a class. Like a class instance, a row in a database table is unique. ORM allows us to retrieve information stored in a row and map it to a class instance that we create in our application. Let's retrieve a row from the posts table and map it to an instance of the `Post` class:\n\n```ruby(Console)\n> post = Post.first\n\n  # #3\n  Post Load (0.2ms)  SELECT  \"posts\".* FROM \"posts\"  ORDER BY \"posts\".\"id\" ASC LIMIT 1\n => #<Post id: 1, title: \"First Post\", body: \"This is the first post in our system\", created_at: \"2015-06-10 18:30:38\", updated_at: \"2015-06-10 18:30:38\">\n```\n\n**At #3** `Post.first` executes a `SELECT` SQL statement and fetches the first row from the posts table. `SELECT` is used to fetch a set of records from one or more tables.\n\nAfter the first row is fetched, `ActiveRecord` converts the row's data into an instance of `Post`, or a post object. This post object is then assigned to the `post` variable. `ActiveRecord` makes this conversion from a database record to Ruby object possible.\n\nNow that our instance is assigned, print it to view its value:\n\n```ruby(Console)\n> post\n => #<Post id: 1, title: \"First Post\", body: \"This is the first post in our system\", created_at: \"2015-06-10 18:30:38\", updated_at: \"2015-06-10 18:30:38\">\n```\n\n`post` is populated by the first row of data (currently the _only_ row of data) in our posts database table.\n\nLet's add a comment to the post we retrieved:\n\n```ruby(Console)\n> post.comments.create(body: \"First comment!\")\n   (0.1ms)  begin transaction\n  SQL (0.4ms)  INSERT INTO \"comments\" (\"body\", \"post_id\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"body\", \"First comment!\"], [\"post_id\", 1], [\"created_at\", \"2015-06-10 19:50:29.881194\"], [\"updated_at\", \"2015-06-10 19:50:29.881194\"]]\n   (0.7ms)  commit transaction\n => #<Comment id: 1, body: \"First comment!\", post_id: 1, created_at: \"2015-06-10 19:50:29\", updated_at: \"2015-06-10 19:50:29\">\n```\n\nBecause we chained the method calls - `post.comments.create` - ActiveRecord interpreted this as \"create a new comment for the first post\". If we didn't specify the post to create a comment for, ActiveRecord would not have been able to update the `post_id`, which is critical because it defines the relationship between posts and comments. Inspect `post.comments`:\n\n```ruby(Console)\n> post.comments\nComment Load (2.6ms)  SELECT \"comments\".* FROM \"comments\" WHERE \"comments\".\"post_id\" = ?  [[\"post_id\", 1]]\n=> #<ActiveRecord::Associations::CollectionProxy [#<Comment id: 1, body: \"First comment!\", post_id: 1, created_at: \"2015-07-21 12:00:56\", updated_at: \"2015-07-21 12:00:56\">]>\n```\n\n`post.comments` returns an `ActiveRecord::Association` because a comment _depends_ on a given post. We'll explore associations in the next section.\n\n## `ActiveRecord` Associations\n\nWe defined the relationships between posts and comments in their respective classes, with `has_many` and `belongs_to`. These relationships are known as [associations](http://guides.rubyonrails.org/association_basics.html).\n\nThe `belongs_to :post` declaration in `Comment` generates a `post` method for each comment, giving us the ability to call `.post` on an instance of `Comment` and retrieve the associated post. The database stores this relationship, by keeping a `post_id` (foreign key) for each comment.\n\nRetrieve the first comment in the comments table, and assign it to a `comment` variable:\n\n```ruby(Console)\n> comment = Comment.first\n```\n\nFetch the post that is associated with `comment`:\n\n```ruby(Console)\n> comment.post\n  Post Load (0.4ms)  SELECT  \"posts\".* FROM \"posts\" WHERE \"posts\".\"id\" = ? LIMIT 1  [[\"id\", 1]]\n => #<Post id: 1, title: \"First Post\", body: \"This is the first post in our system\", created_at: \"2015-06-10 18:30:38\", updated_at: \"2015-06-10 18:30:38\">\n```\n\nLet's create another comment on `post`:\n\n```ruby(Console)\n> post.comments.create(body: \"Second comment!\")\n```\n\nThe `has_many :comments` declaration in `Post` is the counterpart of `belongs_to :post`. The posts table makes no reference to comments. There's no comment_id column or array of comment_ids in the posts table. Instead, this relationship is stored in the comments table exclusively. A post retrieves its associated comments by fetching all the comments with a post_id that matches the id of the post. Storing the relationship in the comments table is a database strategy to allow data to be intersected or joined in an efficient manner.\n\nNow that we have two comments associated with a single post, let's iterate over them using Ruby:\n\n```ruby(Console)\n# #4\n>  post.comments.each { |comment| p comment.body }\n# #5\n  Comment Load (0.2ms)  SELECT \"comments\".* FROM \"comments\" WHERE \"comments\".\"post_id\" = ?  [[\"post_id\", 1]]\n\"First comment!\"\n\"Second comment!\"\n => [#<Comment id: 1, body: \"First comment!\", post_id: 1, created_at: \"2015-06-10 19:50:29\", updated_at: \"2015-06-10 19:50:29\">, #<Comment id: 2, body: \"Second comment!\", post_id: 1, created_at: \"2015-06-10 22:31:36\", updated_at: \"2015-06-10 22:31:36\">]\n```\n**At #4**, the `|comment|` block argument represents an instance of `Comment` with each iteration.  We call `body` on each comment instance to retrieve the comment's body attribute from the database.\n\n**At #5**, the `SELECT` statement fetches all the comments with the given `post_id`.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Rails Console](http://guides.rubyonrails.org/command_line.html#rails-console) | Provides command line access to a Rails application and Ruby. |\n| [SQL](http://en.wikipedia.org/wiki/SQL) | SQL is a language for communicating with a relational database. |\n| [Object Relational Mapping](http://guides.rubyonrails.org/active_record_basics.html#object-relational-mapping) | Object-Relational Mapping (ORM) is a design pattern that connects the objects of an application to tables in a database. Using ORM, the properties and relationships of objects in an application can be connected to a database without the need to write SQL statements. |\n| [`ActiveRecord`](http://guides.rubyonrails.org/active_record_basics.html) | `ActiveRecord` is Rails' ORM library. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nBy default, the Rails console uses the standard IRB shell, but it can also use alternative shells. One alternative is [Pry](https://github.com/pry/pry), which adds many extra features that aren't available using the IRB shell.\n\n1. Add [`pry-rails`](https://github.com/rweng/pry-rails#installation) to the `:development` group in `Gemfile` and run `bundle` to install it.\n2. Start the Rails console. With `pry-rails` installed, the console will use `Pry` by default.\n3. Type `help` to see a list of the commands Pry provides. Some of the most useful are <a href=\"#pry-commands\">listed below</a>.\n4. Assign the first post to a variable and then print it to view its value.\n5. Use `self.methods.sort` to inspect all the methods on the first post. You can `cd` into an object as though it's a directory, e.g. `cd post`.\n  > To exit the list of methods, use `exit`.\n\n6. Print the `nesting` information for the first post.\n7. Use `self` and `save!` to change the `title` and `body` of the first post.\n8. Issue a standalone `self` to print the post and verify the new `title` and `body`.\n\nCopy the console output of items 4-8 to a [Gist](https://gist.github.com/) named `bloccit-rails-console-assignment` and submit the Gist link to your mentor.\n\n| **<a name=\"pry-commands\"></a>Pry Command** | **Description** |\n| :-- | :-- |\n| `help` | Show a list of commands or information about a specific command. |\n| `cd` | Move into a new context (object or scope). |\n| `ls` | Show the list of vars and methods in the current scope. |\n| `nesting` | Show nesting information. |\n| `reset` | Reset the REPL to a clean state. |\n| `whereami` | Show code surrounding the current context. |\n| `wtf?` | Show the backtrace of the most recent exception. |\n| `exit` | Pop the previous binding. |\n| `exit-program` | Exit Pry unconditionally. |\n| `recognize-path` | See which route matches a URL. |\n| `show-models` | Show all models. |\n| `show-routes` | Show all routes in match order. |\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/vj5cm7x9pf?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">ORM Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 29,
          "checkpoint_type": "normal",
          "position": 29,
          "points": 1,
          "ref": "ecc14564-9c24-4442-9f7a-9bca0cdbf099|0"
        },
        {
          "id": 1637,
          "name": "Rails: Seeding Data",
          "summary": "Seeding Data: creating fake data for use in development",
          "body": "<center>\n  ![Seed](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-seeds/seeds.jpg)\n</center>\n\n> “If you want to grow a giant redwood, you need to make sure the seeds are ok, nurture the sapling, and work out what might potentially stop it from growing all the way along. Anything that breaks it at any point stops that growth.”\n>\n> — [Elon Musk](http://en.wikipedia.org/wiki/Elon_Musk)\n\n## Seed Data\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/x3dz68yq84\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWe've added database records manually through the Rails Console, but in a development environment it's helpful to have lots of data to work with. It would be monotonous to add many records manually, so we'll programmatically add fake data to Bloccit.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Generating Seed Data\n\nOpen `db/seeds.rb` and remove the commented lines. `seeds.rb` is a script (a small utility program) we can run to seed the database with test data. Add the following code:\n\n```ruby(db/seeds.rb)\n+require 'random_data'\n\n+# Create Posts\n+50.times do\n # #1\n+  Post.create!(\n # #2\n+    title:  RandomData.random_sentence,\n+    body:   RandomData.random_paragraph\n+  )\n+end\n+posts = Post.all\n+\n+# Create Comments\n # #3\n+100.times do\n+  Comment.create!(\n # #4\n+    post: posts.sample,\n+    body: RandomData.random_paragraph\n+  )\n+end\n+\n+puts \"Seed finished\"\n+puts \"#{Post.count} posts created\"\n+puts \"#{Comment.count} comments created\"\n```\n\n**At #1**, we use `create!` with a _bang_ (`!`). Adding a `!` instructs the method to raise an error if there's a problem with the data we're seeding.  Using create without a _bang_ could fail without warning, causing the error to surface later.\n\n**At #2**, we use methods from a class that does not exist yet, `RandomData`, that will create random strings for `title` and `body`. Writing code for classes and methods that don't exist is known as \"wishful coding\" and can increase productivity because it allows you to stay focused on one problem at a time.\n\n**At #3**, we call [`times`](http://www.ruby-doc.org/core-2.1.1/Integer.html#method-i-times) on an `Integer` (a number object). This will run a given block the specified number of times, which is 100 in this case. The end result of calling `times` is similar to that of a loop, but in this use-case, it is easier to read and thus more idiomatic.\n\n**At #4**, we call [`sample`](http://www.ruby-doc.org/core-2.1.1/Array.html#method-i-sample) on the array returned by `Post.all`, in order to pick a random post to associate each comment with. `sample` returns a random element from the array every time it's called.\n\n## `RandomData`\n\n`RandomData` does not exist, so let's create it. Create a file named `random_data.rb` in the `lib` (short for \"library\") directory:\n\n```bash(Terminal)\n$ touch lib/random_data.rb\n```\n\nOpen `random_data.rb` and add the following code:\n\n```Ruby\n # #5\n+module RandomData\n # #6\n+  def self.random_paragraph\n+    sentences = []\n+    rand(4..6).times do\n+      sentences << random_sentence\n+    end\n+\n+    sentences.join(\" \")\n+  end\n+\n # #7\n+  def self.random_sentence\n+    strings = []\n+    rand(3..8).times do\n+      strings << random_word\n+    end\n+\n+    sentence = strings.join(\" \")\n+    sentence.capitalize << \".\"\n+  end\n+\n # #8\n+  def self.random_word\n+    letters = ('a'..'z').to_a\n+    letters.shuffle!\n+    letters[0,rand(3..8)].join\n+  end\n+end\n```\n\nAt __#5__, we define `RandomData` as a module because it is a standalone library with no dependencies or inheritance requirements. Modules help keep common functions organized and reusable throughout our application. Unlike classes, we can't instantiate or inherit from modules. Instead we use them as [mixins](https://en.wikipedia.org/wiki/Mixin) to add functions to multiple classes.\n\nAt __#6__, we define `random_paragraph`. We set `sentences` to an array. We create four to six random sentences and append them to `sentences`. We call `join` on `sentences` to combine each sentence in the array, passing a space to separate each sentence. `join` combines each sentence into a full paragraph (as a string).\n\nAt __#7__, we follow the same pattern as we did in #6 to create a sentence with a random number of words. After we generate a sentence, we call `capitalize` on it and append a period. `capitalize` returns a copy of `sentence` with the first character converted to uppercase and the remainder of the sentence converted to lowercase.\n\nAt __#8__, we define `random_word`. We set `letters` to an array of the letters `a` through `z` using `to_a`. We call `shuffle!` on `letters` _in place_. If we were to call `shuffle` without the _bang_ (`!`), then `shuffle` would return an array rather than shuffle in place. We `join` the zeroth through nth item in `letters`. The nth item is the result of `rand(3..8)` which returns a random number greater than or equal to three and less than eight.\n\nLet's make `random_data.rb` accessible to all our of specs going forward. Adding it to `application.rb` autoloads any references to the `lib` directory used by our code:\n\n```ruby(config/application.rb\n ...\n     # Do not swallow errors in after_commit/after_rollback callbacks.\n     config.active_record.raise_in_transactional_callbacks = true\n+    config.autoload_paths << File.join(config.root, \"lib\")\n   end\n end\n```\n\nDrop the database and run `seeds.rb` by typing:\n\n```bash(Terminal)\n$ rake db:reset\nSeed finished\n50 posts created\n100 comments created\n```\n\nOpen the Rails console to randomly check some results:\n\n```ruby(Console)\n$ rails c\n\n> p = Post.find 3\n```\n\nWe called another `ActiveRecord` class method, `find`, on `Post` and passed it a value which represents a unique post id. `find` will return the instance (row) of post data which corresponds to an id of 3. You should see an output with a funny looking `title` and `body` as that's what  `RandomData` created in `seeds.rb`. Run the following methods to view how many comments the given post has:\n\n```ruby(Console)\n> p.comments.count\n```\n\n`count` is an `ActiveRecord` method that can be called on an `ActiveRecord` relation. `p.comments` returns an `ActiveRecord` relation, so `count` is a valid method to call on it.\n\nType `exit` to exit the console.\n\nIn the following video, we demonstrate seeding:\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/hwgk14se88\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Modules](https://en.wikipedia.org/wiki/Modular_programming) | A module is independent code that contains everything necessary to implement only one feature. |\n| [Seeding Data](http://guides.rubyonrails.org/active_record_migrations.html#migrations-and-seed-data) | Rails' seeding feature allows the database to be populated with initial data based on the contents of `seeds.rb`. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nBy running `rake db:seed`, new data is added to your database. Occasionally you'll seed unique data using `seeds.rb` without erasing or duplicating existing data. This concept is called [idempotence](http://en.wikipedia.org/wiki/Idempotence).\n\nIdempotent code can be run many times or one time with identical results. For example, `i = 4` is idempotent but `i = i + 2` is not.\n\nWhen developing web apps, it's important to think about what code is idempotent because code might get run more than once, like when a user refreshes a page.\n\n1. Add a post with a unique **title** and **body** to `seeds.rb`. Before creating a unique post, check whether it already exists in the database using the **title** and **body**. Only seed the post if it doesn't already exist. Use the [`find_or_create_by`](http://apidock.com/rails/v4.2.1/ActiveRecord/Relation/find_or_create_by) method.\n2. Run `rake db:seed` a couple of times, confirm that your unique post has only been seeded once using the Rails console.\n3. Repeat steps one and two to create a comment with a unique **body**. Your comment should use the unique post you created as its post reference. Using the Rails console, confirm that your unique comment is also only seeded once after running `rake db:seed` several times.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/xteele4hvb?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Seeding Data Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 30,
          "checkpoint_type": "normal",
          "position": 30,
          "points": 1,
          "ref": "22a9c2ff-6170-4aa4-bf9c-d5002df7e44f|0"
        },
        {
          "id": 1638,
          "name": "Rails: Introduction to CRUD",
          "summary": "CRUD: introduction to reading data",
          "body": "<!-- { ids:[1638], name:'Rails: Introduction to CRUD', summary:'CRUD: introduction to reading data' } -->\n\n<center>\n  ![CRUD](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-crud-intro/banner.png)\n</center>\n\n> “Physicists analyze systems. Web scientists, however, can create the systems.”\n>\n> — [Tim Berners-Lee](https://en.wikipedia.org/?title=Tim_Berners-Lee)\n\n## Viewing Posts\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/rd67qlucv9\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n  </center>\n\n## Resources\n\n\"Resource\" is a term used to describe an object that needs to be accessible by users and thus requires interactive capabilities.\n\nIt's an abstract term that encapsulates different parts of a Rails application. A resource is not one single entity, but rather, a collection of models, views, controllers, and routes.\n\nFor example, in Bloccit we have posts. We already created a model for our posts, and now we need to write the other pieces to complete the post resource. This includes the views, which visually represent posts within Bloccit; the controller, that will perform operations on a post such as creation or deletion; and the routes, which will map requests from clients (a web browser on a computer or mobile device) to the posts to perform the actions the client requests.\n\nIn this checkpoint, we'll learn how to build resources, and how to interact with them through a concept known as CRUD. CRUD stands for __C__reate __R__ead __U__pdate __D__elete. Bloccit needs to be able to perform CRUD operations on our models (such as posts) so that users can perform these actions from the GUI we present to them (the views).\n\nBloccit also needs routes so that when a client makes a request to our application, such as requesting to delete a post, Bloccit knows where to look to perform that action. In other words, our routes act like a traffic controller. Like a traffic controller telling cars where to go, our routes tell the client requests where to go within Bloccit.\n\nLet's say a user wants to delete a post. From a high level, the user clicks a button that says \"Delete Post\". The button sends a request to our server (application) across the Internet that points to a specific web URL. Our routing maps the URL to a controller action within Bloccit. In this example, the web URL will map to an action that deletes a post.\n\nFor example, imagine the web URL is `www.myapplication.com/posts/1/delete/`. When a user sends a request to that URL, our application looks for the route (using a table which we will explore later) and determines which controller action it should perform. This action in turn interacts with the model and ultimately the database, modifying the state of our application by deleting the post. These pieces work together to form the posts resource within our application.\n\n> This [Stack Overflow post](http://stackoverflow.com/questions/4686945/what-is-a-resource-in-rails) provides further explanation of resources in Rails.\n\n## Git\n\nCreate a new Git branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Generating a Resource\n\nA resource has three components which align to MVC architecture: a model, view(s), and a controller. We'll build a resource for posts first, and because we already have a post model, we'll create a controller next:\n\n```bash(Terminal)\n$ rails generate controller Posts index show new edit\n```\n\nWe passed the controller generator five arguments, including the resource name, `Posts`. Review the following output:\n\n```bash(Terminal)\n      create  app/controllers/posts_controller.rb\n       route  get \"posts/edit\"\n       route  get \"posts/new\"\n       route  get \"posts/show\"\n       route  get \"posts/index\"\n      invoke  erb\n      create    app/views/posts\n      create    app/views/posts/index.html.erb\n      create    app/views/posts/show.html.erb\n      create    app/views/posts/new.html.erb\n      create    app/views/posts/edit.html.erb\n      invoke  rspec\n      create    spec/controllers/posts_controller_spec.rb\n      create    spec/views/posts\n      create    spec/views/posts/index.html.erb_spec.rb\n      create    spec/views/posts/show.html.erb_spec.rb\n      create    spec/views/posts/new.html.erb_spec.rb\n      create    spec/views/posts/edit.html.erb_spec.rb\n      invoke  helper\n      create    app/helpers/posts_helper.rb\n      invoke  assets\n      invoke    coffee\n      create      app/assets/javascripts/posts.coffee\n      invoke    scss\n      create      app/assets/stylesheets/posts.scss\n```\n\nOpen `routes.rb` and view the `get` method calls the controller generator added:\n\n```ruby(config/routes.rb)\nRails.application.routes.draw do\n  get \"posts/index\"\n\n  get \"posts/show\"\n\n  get \"posts/new\"\n\n  get \"posts/edit\"\n\n  get \"welcome/index\"\n  get \"welcome/about\"\n\n  root 'welcome#index'\nend\n```\n\nThe generated `get` method calls create routes for the post resource, but Rails offers a more succinct syntax. Let's refactor `routes.rb` with the `resources` method:\n\n```ruby(config/routes.rb)\n Rails.application.routes.draw do\n-  get \"posts/index\"\n-\n-  get \"posts/show\"\n-\n-  get \"posts/new\"\n-\n-  get \"posts/edit\"\n\n # #1\n+  resources :posts\n\n # #2\n-  get \"welcome/index\"\n-\n-  get \"welcome/about\"\n+  get 'about' => 'welcome#about'\n\n   root 'welcome#index'\n end\n```\n\nAt **#1**, we call the `resources` method and pass it a `Symbol`. This instructs Rails to create post routes for creating, updating, viewing, and deleting instances of `Post`. We'll review the precise URIs created in a moment.\n\nAt **#2**, we remove `get \"welcome/index\"` because we've declared the index view as the root view. We also modify the `about` route to allow users to visit `/about`, rather than `/welcome/about`.\n\nThe Rails router uses `routes.rb`. Let's watch a video exploring the important role the Rails router plays:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/1yaz0evj1f\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nRun `rake routes` from the command line:\n\n```bash(Terminal)\n$ rake routes\n # #3\n   Prefix Verb   URI Pattern               Controller#Action\n # #4\n    posts GET    /posts(.:format)          posts#index\n          POST   /posts(.:format)          posts#create\n new_post GET    /posts/new(.:format)      posts#new\nedit_post GET    /posts/:id/edit(.:format) posts#edit\n     post GET    /posts/:id(.:format)      posts#show\n # #5\n          PATCH  /posts/:id(.:format)      posts#update\n          PUT    /posts/:id(.:format)      posts#update\n          DELETE /posts/:id(.:format)      posts#destroy\n    about GET    /about(.:format)          welcome#about\n     root GET    /                         welcome#index\n```\n\nAt **#3**, we see a header with Prefix, Verb, URI Pattern, and Controller#Action. The verbs correspond to HTTP Request Methods. They specify the action to be done on the specified resource. For example, a GET asks for data, a POST creates data, a PATCH or PUT updates data, and a DELETE deletes data. Standard HTTP verbs make it simpler for different systems to interact. By using a well-documented and well-known system like HTTP, the behavior of different operations is clear and reliable.\n\nAt **#4**, Rails created a route to `/posts` which requires a GET. The route maps to the `index` method in  `PostsController`.\n\nAt **#5**, we see PATCH and PUT verbs, which are similar. PUT updates data by sending the complete resource, whereas PATCH sends just the changes.\n\n## CRUD\n\nCRUD stands for Create Read Update Delete. CRUD actions align with controller HTTP verbs and controller actions in a Rails app.\n\n\nCRUD Action   | HTTP Verb     | Rails Action(s)\n------------- | ------------- | -------------\nCreate        | POST          | create\nRead          | GET           | new/show/index/edit\nUpdate        | PUT/PATCH     | update\nDelete        | DELETE        | destroy\n\n\nStart your Rails server and visit [`http://localhost:3000/posts`](http://localhost:3000/posts). We see a `NameError` like the one below:\n\n<center>\n![path-error](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-crud-intro/path-error.png)\n</center>\n\nThis error happens because we're using a generated path helper that no longer exists. When we changed our routes, we changed our path helpers. In particular, we changed `welcome_index_path` to `root_path` and `welcome_about_path` to `about_path`.\n\nUpdate the application layout to reflect the new paths:\n\n```erb(app/views/layouts/application.html.erb)\n ...\n-      <li><%= link_to \"Home\", welcome_index_path %></li>\n-      <li><%= link_to \"About\", welcome_about_path %></li>\n+      <li><%= link_to \"Bloccit\", root_path %></li>\n+      <li><%= link_to \"About\", about_path %></li>\n ...\n```\n\nSave the changes and refresh the page. We see the default HTML created by the controller generator at [`http://localhost:3000/posts`](http://localhost:3000/posts) – this view is the index page. We can deduce this from the `rake routes` output above, specifically this line:\n\n```bash(Output)\n        posts GET    /posts(.:format)          posts#index\n```\n\nWe can see that the `/posts` route (column three) is associated with the posts#index controller action (column four).\n\n## Index Action\n\nLet's use TDD to write the `index` action in `PostsController`. When we generated our controller, Rails created a basic spec for `PostsController`:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n require 'rails_helper'\n\n # #6\n RSpec.describe PostsController, type: :controller do\n\n   describe \"GET index\" do\n     it \"returns http success\" do\n # #7\n       get :index\n       expect(response).to have_http_status(:success)\n     end\n   end\n\n   describe \"GET show\" do\n     it \"returns http success\" do\n       get :show\n       expect(response).to have_http_status(:success)\n     end\n   end\n\n   describe \"GET new\" do\n     it \"returns http success\" do\n       get :new\n       expect(response).to have_http_status(:success)\n     end\n   end\n\n   describe \"GET edit\" do\n     it \"returns http success\" do\n       get :edit\n       expect(response).to have_http_status(:success)\n     end\n   end\n\n end\n```\n\nAt **#6**, RSpec created a test for `PostsController`. `type: :controller` tells RSpec to treat the test as a `controller` test. This allows us to simulate controller actions such as HTTP requests.\n\nAt **#7**, the test performs a `GET` on the index view and expects the response to be successful.\n\n> `have_http_status` is an RSpec [matcher](http://www.rubydoc.info/gems/rspec-rails/RSpec/Rails/Matchers:have_http_status) which encapsulates this logic. `have_http_status(:success)` checks for a response code of [200](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes), which is the standard HTTP response code for success.\n\nThe remaining tests follow the same pattern.\n\nLet's add another test to `posts_controller_spec.rb` to define the expected behavior of the `PostsController#index` :\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe PostsController, type: :controller do\n # #8\n+  let(:my_post) { Post.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph) }\n\n   describe \"GET index\" do\n     it \"returns http success\" do\n       get :index\n       expect(response).to have_http_status(:success)\n     end\n\n+    it \"assigns [my_post] to @posts\" do\n+      get :index\n # #9\n+      expect(assigns(:posts)).to eq([my_post])\n+    end\n   end\n\n # #10\n-  describe \"GET show\" do\n-    it \"returns http success\" do\n-      get :show\n-      expect(response).to have_http_status(:success)\n-    end\n-  end\n\n-  describe \"GET new\" do\n-    it \"returns http success\" do\n-      get :new\n-      expect(response).to have_http_status(:success)\n-    end\n-  end\n\n-  describe \"GET edit\" do\n-    it \"returns http success\" do\n-      get :edit\n-      expect(response).to have_http_status(:success)\n-    end\n-  end\n\n+#  describe \"GET show\" do\n+#    it \"returns http success\" do\n+#      get :show\n+#      expect(response).to have_http_status(:success)\n+#    end\n+#  end\n\n+# describe \"GET new\" do\n+#   it \"returns http success\" do\n+#     get :new\n+#     expect(response).to have_http_status(:success)\n+#   end\n+# end\n\n+#  describe \"GET edit\" do\n+#    it \"returns http success\" do\n+#      get :edit\n+#      expect(response).to have_http_status(:success)\n+#    end\n+#  end\n\n end\n```\n\nAt **#8**, we create a post and assign it to `my_post` using `let`. We use `RandomData` to give `my_post` a random title and body.\n\nAt **#9**, because our test created one post (`my_post`), we `expect` `index` to return an array of one item. We use `assigns`, a method in `ActionController::TestCase`. `assigns` gives the test access to [\"instance variables assigned in the action that are available for the view\"](http://api.rubyonrails.org/classes/ActionController/TestCase.html).\n\nAt **#10**, we comment out the tests for `show`, `new`, and `edit` since we won't write the implementation until later.\n\nRun the spec:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb\n```\n\nWe see output indicating our new test is failing. Let's write the implementation of `index` to get both tests passing. In the `PostsController`, add the following to the `index` method:\n\n```ruby(app/controllers/posts_controller.rb)\n class PostsController < ApplicationController\n   def index\n # #11\n+    @posts = Post.all\n   end\n\n   def show\n   end\n\n   def new\n   end\n\n   def edit\n   end\n end\n```\n\nAt **#11**, we declare an instance variable `@posts` and assign it a collection of `Post` objects using the `all` method provided by `ActiveRecord`. `all` returns a collection of `Post` objects.\n\nRun the spec again. The tests for `index` now pass. Our controller functions per the expectations of our spec for `index`. Let's write the associated view:\n\n```ruby(app/views/posts/index.html.erb)\n-<h1>Posts#index</h1>\n-<p>Find me in app/views/posts/index.html.erb</p>\n+<h1>All Posts</h1>\n # #12\n+<% @posts.each do |post| %>\n+  <p><%= link_to post.title, post_path(post.id) %></p>\n+<% end %>\n```\n\nAt **#12**, we iterate over each post in `@posts`. For each post we create a link with `post.title` as the text that links to `/posts/id`, with the id from the `post.id`. Instance variables created in a controller method are available in its associated view. Since we create and assign `@posts` in `PostsController#index`, we can use it in the posts __index__ view.\n\nRefresh [`http://localhost:3000/posts`](http://localhost:3000/posts) to see all the posts in the database.\n\nInspect the `post_path` method using `rake routes | grep 'posts#show'`. It requires an id to route to the correct post:\n\n```bash(terminal)\n$ rake routes | grep 'posts#show'\n  post GET    /posts/:id(.:format)      posts#show\n```\n\nWe passed the id of the post instance to the `post_path` method. `post_path` used this id to create the path. We can pass the post instance to get the same path. The `post_path` method will derive the id:\n\n```ruby\nlink_to post.title, post_path(post)\n```\n\nRails simplifies this further by allowing us to skip the `post_path` method altogether. If we call `link_to` with the object to which we're linking as a second argument, the `link_to` method will detect the object, parse its id, and create the path using the id. Using that shortcut, we can simplify the posts __index__ view:\n\n```erb(app/views/posts/index.html.erb)\n <h1>All Posts</h1>\n <% @posts.each do |post| %>\n+  <p><%= link_to post.title, post %></p>\n-  <p><%= link_to post.title, post_path(post.id) %></p>\n <% end %>\n```\n\n> This is an example of the advantages of Rails' \"convention over configuration\" approach.\n\nLet's use Bootstrap to style the posts __index__ view:\n\n```erb(app/views/posts/index.html.erb)\n <h1>All Posts</h1>\n <% @posts.each do |post| %>\n-  <p><%= link_to post.title, post %></p>\n+  <div class=\"media\">\n+    <div class=\"media-body\">\n+      <h4 class=\"media-heading\">\n+        <%= link_to post.title, post %>\n+      </h4>\n+    </div>\n+  </div>\n <% end %>\n```\n\n<center>\n![posts-index](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-crud-intro/posts-index.png)\n</center>\n\nBootstrap provides the classes we added to the `<div>` and `<h4>` tags to improve our view.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku.\n\n## Heroku\n\nPush your app to production:\n\n```bash(Terminal)\n$ git push heroku master\n```\n\nOpen your production app in your browser. If you can't remember the URL, use `heroku apps:info`.\n\n> If you're using Cloud9, open your app in a browser window outside of the Cloud9 window.\n\nWhen you visit the `/posts` URL, you should see \"We're sorry, but something went wrong.\" This is because you haven't migrated your database changes in production. As a consequence, your production app's database doesn't have posts or comments tables in it. Let's run the migrations:\n\n```bash(Terminal)\n$ heroku run rake db:migrate\n```\n\nRefresh the page on production. Although the error has gone away, there are no posts! This is because you ran `rake db:seed` in your development environment, and not the production environment. It's not a good idea to seed your production environment with fake data. You don't want fake data intertwined with real data, but you'll create real data in production soon.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [`rails generate`](http://guides.rubyonrails.org/command_line.html#rails-generate) | The `rails generate` command creates controllers from templates. The `generate` command can also generate controller actions and their corresponding views. |\n| [Resourceful Routing](http://guides.rubyonrails.org/routing.html#resource-routing-the-rails-default) | Rails' resource routing permits the declaration of common routes for a controller. It allows you to declare the routes for the \"index\", \"show\", \"new\", \"edit\", \"create\", \"update\" and \"destroy\" actions in a single line of code. |\n| [`rake routes`](http://guides.rubyonrails.org/routing.html#inspecting-and-testing-routes) | The `rake routes` command lists all routes, in the same order as `routes.rb`. |\n| [CRUD](http://en.wikipedia.org/wiki/Create,_read,_update_and_delete) | Create, Read, Update, and Delete are the four basic functions of persistant storage. |\n| [HTTP Request Methods](http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods) | HTTP defines methods (verbs) to indicate the desired action to be performed on the identified resource. |\n| [HTTP Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) | Status codes are numbers returned by HTTP which indicate the result of a request. |",
          "assignment": "Create a new Git branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nBecause our posts will be user generated, some of them may contain offensive or sensitive content. Since we don't have real content, we will pretend that every fifth post contains sensitive content to test a potential censorship feature. Your assignment is to overwrite the `title` of the first post and every fifth post after it with the text __SPAM__. You should change the data itself, not just change the display of the data.\n\nHere are some hints to help you:\n\n1. Does this logic belong in a model, a view, or a controller?\n2. Which classes should encapsulate this logic?\n3. Recall our usage of the [modulus](http://www.tutorialspoint.com/ruby/ruby_operators.htm) operator from the Ruby checkpoints. This may help you identify each fifth instance of `Post`.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/lmu5w5gisj?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Intro to CRUD Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 31,
          "checkpoint_type": "normal",
          "position": 31,
          "points": 1,
          "ref": "69e24df9-9bc2-46cc-b3da-0d75dbd1c2d8|0"
        },
        {
          "id": 1639,
          "name": "Rails: CRUD",
          "summary": "CRUD: reading and creating data using models, controllers, and views",
          "body": "<!-- { ids:[1639], name:'Rails: CRUD', summary:'CRUD: reading and creating data using models, controllers, and views' } -->\n<center>\n  ![Creation](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-crud-cr/banner.png)\n</center>\n\n> “It's easy to attack and destroy an act of creation. It's a lot more difficult to perform one.”\n>\n> — [Chuck Palahniuk](https://en.wikipedia.org/wiki/Chuck_Palahniuk)\n\n## Reading and Creating posts\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/0ulnybhade\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCreate a new Git branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Creating Posts\n\nIn this checkpoint we'll develop, test-first, the functionality for creating posts. We'll also implement a user interface (UI) so that Bloccit users can create posts.\n\nLet's write the controller tests:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n...\n\n-#  describe \"GET new\" do\n-#    it \"returns http success\" do\n-#      get :new\n-#      expect(response).to have_http_status(:success)\n-#    end\n-#  end\n\n # #1\n+   describe \"GET new\" do\n+     it \"returns http success\" do\n+       get :new\n+       expect(response).to have_http_status(:success)\n+     end\n+\n # #2\n+     it \"renders the #new view\" do\n+       get :new\n+       expect(response).to render_template :new\n+     end\n+\n # #3\n+     it \"instantiates @post\" do\n+       get :new\n+       expect(assigns(:post)).not_to be_nil\n+     end\n+   end\n+\n+   describe \"POST create\" do\n # #4\n+     it \"increases the number of Post by 1\" do\n+       expect{post :create, post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}}.to change(Post,:count).by(1)\n+     end\n+\n # #5\n+     it \"assigns the new post to @post\" do\n+       post :create, post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}\n+       expect(assigns(:post)).to eq Post.last\n+     end\n+\n # #6\n+     it \"redirects to the new post\" do\n+       post :create, post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}\n+       expect(response).to redirect_to Post.last\n+     end\n+   end\n\n ...\n```\n\nThere are separate `new` and `create` sections at __#1__ and __#4__. When `new` is invoked, a new and unsaved `Post` object is created. When `create` is invoked, the newly created object is persisted to the database. This implementation mimics the [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) parts of HTTP. REST is a software architecture style and practice that imposes a set of constraints for building web applications. RESTful architectures follow constraints such as using HTTP verbs and making sure web URLs follow a certain pattern. Discussing all of the constraints that REST recommends is outside the scope of this checkpoint, but we'll continue to use and explore RESTful practices as we build Bloccit.\n\n> There are many resources on the web that elaborate on REST and RESTful practices, such as [this video](https://www.youtube.com/watch?v=YCcAE2SCQ6k).\n\nPer HTTP, GET requests should not generate new data, thus `new` (which is a GET) does not create data. POST requests are used to create new data, thus `create` actually creates the fields in a post.\n\n> What do you think would happen if we used post `:new` or get `:create`?\n\nAt __#2__, we `expect` `PostsController#new` to render the posts __new__ view. We use the [`render_template`](http://rspec.rubyforge.org/rspec-rails/1.1.12/files/lib/spec/rails/matchers/render_template_rb.html) method to verify that the correct template (view) is rendered.\n\nAt __#3__, we `expect` the `@post` instance variable to be initialized by `PostsController#new`. `assigns` gives us access to the `@post` variable, assigning it to `:post`.\n\nAt __#4__, we `expect` that after `PostsController#create` is called with the parameters `{post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}}`, the `count` of `Post` instances (i.e. rows in the posts table) in the database will increase by one.\n\nAt __#5__, when `create` is POSTed to, we `expect` the newly created post to be assigned to `@post`.\n\nAt __#6__, we `expect` to be redirected to the newly created post.\n\nRun the spec and see four failing tests that are caused because we haven't finished `new` or `create` in `PostsController`.\n\n> The first two tests pass without our need to add any code to `PostsController.` By default, `new` will render the post's __new__ view and return an HTTP success code. If we were to override this default behavior, we'd need to update these tests.\n\nLet's implement the rest of the logic needed in `new`:\n\n```ruby(app/controllers/posts_controller.rb)\n ...\n\n def new\n # #7\n+  @post = Post.new\n end\n\n ...\n```\n\nAt __#7__, we create an instance variable, `@post`, then assign it an empty post returned by `Post.new`.\n\nRun the specs for `new` and observe that all three `Get new` tests pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e 'GET new'\n```\n\n> `-e 'GET new'` runs only the specs in the `describe \"GET new\" do` block. This allows us to run only the specs covering the method we're working on.\n\n### The `form_for` Helper Method\n\nThanks to our updated `new` method in `PostsController`, we have the ability to access a new `Post` instance in the related posts __new__ view. Open the __new__ view and add the following code:\n\n```erb(app/views/posts/new.html.erb)\n-<h1>Posts#new</h1>\n-<p>Find me in app/views/posts/new.html.erb</p>\n+<%= form_for @post do |f| %>\n+  <%= f.label :title %>\n+  <%= f.text_field :title %>\n+\n+  <%= f.label :body %>\n+  <%= f.text_area :body %>\n+\n+  <%= f.submit \"Save\" %>\n+<% end %>\n```\n\nStart the Rails server and go to [`http://localhost:3000/posts/new`](http://localhost:3000/posts/new). View the source of the resulting page by right clicking anywhere on the page, and selecting __Inspect Element__. Search for a form HTML tag and you should see the following HTML code:\n\n```html\n <!-- #8 -->\n <form class=\"new_post\" id=\"new_post\" action=\"/posts\" accept-charset=\"UTF-8\" method=\"post\" abineguid=\"67A412E19800485B8BEF9569F6FA75CC\"><input name=\"utf8\" type=\"hidden\" value=\"✓\"><input type=\"hidden\" name=\"authenticity_token\" value=\"u5qH11P+xwMWIZjSHS1DssY3qrmCUpY4k7iXuyqvc9OZl1CPWfXekmZ2XLbdblOfNE/jsX6vqkqy9YYY05QyJw==\">\n   <label for=\"post_title\">Title</label>\n   <input type=\"text\" name=\"post[title]\" id=\"post_title\">\n\n   <label for=\"post_body\">Body</label>\n   <textarea name=\"post[body]\" id=\"post_body\"></textarea>\n\n   <input type=\"submit\" name=\"commit\" value=\"Save\">\n </form>\n```\n\n`form_for` generates this HTML code starting at __#8__. `form_for`, like `link_to`, is a Rails helper method that generates HTML code. This code allows a user to submit a post title and body, thus creating a new post.\n\nWe examine `form_for` in more depth in the following video:\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/pa402c0vo5\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nOn [`http://localhost:3000/posts/new`](http://localhost:3000/posts/new), enter some text into the title and body fields, then click the __Save__ button. You should see an error message:\n\n<center>\n![pic](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-crud-cr/no-create-action.png)\n</center>\n\nThe form attempted to submit the data to a create action, but Rails couldn't find a `create` method in `PostsController`. Let's write `create`:\n\n```ruby(app/controllers/posts_controller.rb)\n ...\n\n   def new\n     @post = Post.new\n   end\n\n+  def create\n # #9\n+    @post = Post.new\n+    @post.title = params[:post][:title]\n+    @post.body = params[:post][:body]\n\n # #10\n+    if @post.save\n # #11\n+      flash[:notice] = \"Post was saved successfully.\"\n+      redirect_to @post\n+    else\n # #12\n+      flash.now[:alert] = \"There was an error saving the post. Please try again.\"\n+      render :new\n+    end\n+  end\n\n ...\n```\n\nAt __#9__, we call `Post.new` to create a new instance of `Post`.\n\nAt __#10__, if we successfully save `Post` to the database, we display a success message using `flash[:notice]` and redirect the user to the route generated by `@post`. Redirecting to `@post` will direct the user to the posts __show__ view.\n\nAt __#11__, we assign a value to `flash[:notice]`. The `flash` hash provides a way to pass temporary values between actions. Any value placed in `flash` will be available in the next action and then deleted.\n\nAt __#12__, if we do not successfully save `Post` to the database, we display an error message and `render` the `new` view again.\n\nWhen the user clicks __Save__, the `create` method is called. `create` either updates the database with the `save` method, or returns an error. Unlike `new`, `create` does not have a corresponding view. `create` works behind the scenes to collect the data submitted by the user and update the database. `create` is a POST action.\n\nRun the specs for `create` and observe that all three `POST create` tests pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e 'POST create'\n```\n\nUse the form on [`http://localhost:3000/posts/new`](http://localhost:3000/posts/new) to create a post. You will be redirected to the, as of yet, unfinished posts __show__ page.\n\n### Styling the New View\n\nNow that `new` and `create` are implemented, we can style the corresponding view with Bootstrap:\n\n```erb(app/views/posts/new.html.erb)\n-<%= form_for @post do |f| %>\n-  <%= f.label :title %>\n-  <%= f.text_field :title %>\n-\n-  <%= f.label :body %>\n-  <%= f.text_area :body %>\n-\n-  <%= f.submit \"Save\" %>\n-<% end %>\n+<h1>New Post</h1>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-4\">\n+    <p>Guidelines for posts</p>\n+    <ul>\n+      <li>Make sure it rhymes.</li>\n+      <li>Don't use the letter \"A\".</li>\n+      <li>The incessant use of hashtags will get you banned.</li>\n+    </ul>\n+  </div>\n+  <div class=\"col-md-8\">\n+    <%= form_for @post do |f| %>\n+      <div class=\"form-group\">\n # #13\n+        <%= f.label :title %>\n # #14\n+        <%= f.text_field :title, class: 'form-control', placeholder: \"Enter post title\" %>\n+      </div>\n+      <div class=\"form-group\">\n+        <%= f.label :body %>\n+        <%= f.text_area :body, rows: 8, class: 'form-control', placeholder: \"Enter post body\" %>\n+      </div>\n+      <div class=\"form-group\">\n # #15\n+        <%= f.submit \"Save\", class: 'btn btn-success' %>\n+      </div>\n+    <% end %>\n+  </div>\n+</div>\n```\n\nAt __#13__, we use `f.label` to display `title`. This functionality is provided by `form_for`, which yields a form builder object that, in turn, provides `f.label`. `f.label`, in turn, creates an HTML `<label>` tag for the object that is specified. In this case it will be:\n\n```HTML\n<label for=\"post_title\">Title</label>\n```\n\nAt __#14__, `f.text_field` is another method that `FormHelper` provides and creates an `<input>` tag of type `text`. It will yield:\n\n```HTML\n<input class=\"form-control\" placeholder=\"Enter post title\" type=\"text\" name=\"post[title]\" id=\"post_title\">\n```\n\nAt __#15__, `f.submit` yields an `input` tag of type `submit`. It will yield:\n\n```HTML\n <input type=\"submit\" name=\"commit\" value=\"Save\" class=\"btn btn-success\">\n```\n\nRefresh [`http://localhost:3000/posts/new`](http://localhost:3000/posts/new) to see your changes. Then use the form to create a new post.\n\n## Displaying the Flash Message\n\nWhen you create a post, no success message is displayed. This is because, while we're placing a value into `flash`, we're not displaying it in the view yet. Because every view may have a `flash` message at some point, we'll add it someplace universal. Let's add it to `application.html.erb`.\n\nOpen `app/views/layouts/application.html.erb` and add the flash code:\n\n```erb(app/views/layouts/application.html.erb)\n <!DOCTYPE html>\n <html>\n <head>\n   <title>Bloccit</title>\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n   <%= stylesheet_link_tag    \"application\", media: \"all\" %>\n   <%= javascript_include_tag \"application\" %>\n   <%= csrf_meta_tags %>\n </head>\n <body>\n   <div class=\"container\">\n     <ul class=\"nav nav-tabs\">\n       <li><%= link_to \"Bloccit\", root_path %></li>\n       <li><%= link_to \"About\", about_path %></li>\n     </ul>\n+\n+    <% if flash[:notice] %>\n+      <div class=\"alert alert-success\">\n+        <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n+        <%= flash[:notice] %>\n+      </div>\n+    <% elsif flash.now[:alert] %>\n+      <div class=\"alert alert-danger\">\n+        <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n+        <%= flash.now[:alert] %>\n+      </div>\n+    <% elsif flash[:alert] %>\n+      <div class=\"alert alert-warning\">\n+        <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n+        <%= flash[:alert] %>\n+      </div>\n+    <% end %>\n\n     <%= yield %>\n   </div>\n\n </body>\n </html>\n```\n\n> Note that the class names (`alert`, `alert-*`, and `close`) as well as the `data-dismiss` attribute are [Bootstrap markup](http://getbootstrap.com/javascript/#alerts) commonly used when creating alerts.\n\nCreate a post from [`http://localhost:3000/posts/new`](http://localhost:3000/posts/new) and we'll see a green flash message.\n\n## Reading Posts\n\nWe have the ability to create new posts, so a logical next step is to implement the ability to read them. Recall the CRUD acronym - \"create read update delete\"; we've completed \"create\" and are moving on to \"read\". First, let's write the tests:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n ...\n\n-#  describe \"GET show\" do\n-#    it \"returns http success\" do\n-#      get :show\n-#      expect(response).to have_http_status(:success)\n-#    end\n-#  end\n+  describe \"GET show\" do\n+    it \"returns http success\" do\n # #16\n+      get :show, {id: my_post.id}\n+      expect(response).to have_http_status(:success)\n+    end\n+    it \"renders the #show view\" do\n # #17\n+      get :show, {id: my_post.id}\n+      expect(response).to render_template :show\n+    end\n+\n+    it \"assigns my_post to @post\" do\n+      get :show, {id: my_post.id}\n # #18\n+      expect(assigns(:post)).to eq(my_post)\n+    end\n+  end\n\n ...\n\n end\n```\n\nAt __#16__, we pass `{id: my_post.id}` to `show` as a parameter. These parameters are passed to the  [`params`](http://guides.rubyonrails.org/action_controller_overview.html#parameters) hash.\n\n> The `params`  hash contains all parameters passed to the application's controller (`application_controller.rb`), whether from GET, POST, or any other HTTP action.\n\nAt __#17__, we `expect` the `response` to return the __show__ view using the [`render_template`](http://rspec.rubyforge.org/rspec-rails/1.1.12/files/lib/spec/rails/matchers/render_template_rb.html) matcher.\n\nAt __#18__, we `expect` the `post` to equal `my_post` because we call `show` with the id of `my_post`. We are testing that the post returned to us is the post we asked for.\n\nRun the spec:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e 'GET show'\n```\n\nWe see that the first two tests pass, but the last one fails. Let's fix it by implementing `show`:\n\n```ruby(app/controllers/posts_controller.rb)\n class PostsController < ApplicationController\n   def index\n     @posts = Post.all\n   end\n\n   def show\n # #19\n+    @post = Post.find(params[:id])\n   end\n\n   def new\n   end\n\n   def edit\n   end\n end\n```\n\nAt __#19__, we find the post that corresponds to the id in the `params` that was passed to `show` and assign it to `@post`. Unlike in the `index` method, in the `show` method, we populate an instance variable with a single post, rather than a collection of posts.\n\nRun the spec again and see that our tests for `show` pass.\n\nOpen [`http://localhost:3000/posts`](http://localhost:3000/posts) and click on a post's link. We are taken to the __show__ view, thanks to the `link_to` method. The __show__ view still has boilerplate HTML code.\n\nLet's view the `params` hash by adding this line:\n\n```erb(app/views/posts/show.html.erb)\n <h1>Posts#show</h1>\n <p>Find me in app/views/posts/show.html.erb</p>\n\n+<%= params %>\n```\n\nWhen you refresh the page, you should see this:\n\n```ruby\n{\"action\"=>\"show\", \"controller\"=>\"posts\", \"id\"=>\"1\"}\n```\n\nThis hash communicates which action and controller was called. It also has the id of the post we clicked - it's encoded in the URL. In our controller, we accessed that id by calling `params[:id]`, which, in the above case, returned \"1\". We then assigned the post found with that id to the `@post` variable.\n\nLet's replace `<%= params %>` in `app/views/posts/show.html.erb` with some post-specific code:\n\n```erb(app/views/posts/show.html.erb)\n-<h1>Posts#show</h1>\n-<p>Find me in app/views/posts/show.html.erb</p>\n-\n-<%= params %>\n+<h1><%= @post.title %></h1>\n+<p><%= @post.body %></p>\n```\n\nGo back to the __index__ view at [`http://localhost:3000/posts`](http://localhost:3000/posts) and click on a post. You should see an updated __show__ view with data specific to the `Post` instance that was clicked.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku. Open your production app to view the updates. Create a new post, and ensure that you can access it on the __index__ and __show__ views.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Form Helpers](http://guides.rubyonrails.org/form_helpers.html) | Form helpers are view helper methods that generate HTML markup for input forms. |\n| [`form_for`](http://guides.rubyonrails.org/form_helpers.html#binding-a-form-to-an-object) | The `form_for` method is a form helper which binds a form to a model object. |\n| [`params`](http://guides.rubyonrails.org/action_controller_overview.html#parameters) | The Rails `params` hash is available in controllers and contains both [query string paramaters](http://en.wikipedia.org/wiki/Query_string) and [POST data](http://en.wikipedia.org/wiki/POST_%28HTTP%29). |\n| [`ActionDispatch::Flash`](http://api.rubyonrails.org/classes/ActionDispatch/Flash.html) | `ActionDispatch::Flash` provides a data structure to pass temporary primitive types (`String`, `Array`, `Hash`) between controller actions. Anything placed in the `flash` param will be exposed to the next action and then removed. It is commonly used for notices and alerts. |",
          "assignment": "Create a new Git branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nIt's never too early to monetize! For this assignment, you'll add advertisements to Bloccit.\n\n1. Use TDD for this assignment.\n2. Create a new model called `Advertisement`. It should have the following attributes: `title:string`, `body:text`, `price:integer`.\n3. Generate a controller for `Advertisement` with `index`, `show`, `new`, and `create` actions. Should the controller class and file names have a singular (advertisement) or plural (advertisements) prefix? Be consistent with the naming pattern used for `PostsController`.\n4. Update `routes.rb` to use [resourceful routing](http://guides.rubyonrails.org/routing.html#resource-routing-the-rails-default) for `Advertisement`.\n5. Complete the `index`, `show`, `new`, and `create` actions in `AdvertisementsController`.\n6. Update the advertisement __index__, __show__ and __new__ views.\n7. Seed your app with instances of `Advertisement`.\n8. Test your changes in the browser. Confirm that you can see an index of all advertisements, view individual advertisements, and create new advertisements.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/b72o1p2x92?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">CRUD Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 32,
          "checkpoint_type": "normal",
          "position": 32,
          "points": 1,
          "ref": "f975fd8b-daa5-4b46-afe7-4d4c6af5afa5|0"
        },
        {
          "id": 1640,
          "name": "Rails: More CRUD",
          "summary": "CRUD: updating and destroying data using models, controllers, and views",
          "body": "<!-- { ids:[1640], name:'Rails: More CRUD', summary:'CRUD: updating and destroying data using models, controllers, and views' } -->\n<center>\n  ![Godzilla](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-crud-ud/banner.jpg)\n</center>\n\n> “The urge to destroy is also a creative urge.”\n>\n> — Pablo Picasso\n\n## Updating and Deleting posts\n\nNow that we can create and view posts, we'll implement the ability to edit and update them.\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/9s0r4a5dla\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Editing and Updating Posts\nTo edit existing posts we'll need to implement two actions, `edit` and `update`. The `edit` action uses the **edit** view to allow users to update an existing post. Just as the **new** view submits a form to the `create` action, the **edit** view submits a form to the `update` action.\n\n### `edit` Action\n\nLet's create the tests for `edit`:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n ...\n-#  describe \"GET edit\" do\n-#    it \"returns http success\" do\n-#      get :edit\n-#      expect(response).to have_http_status(:success)\n-#    end\n-#  end\n+  describe \"GET edit\" do\n+    it \"returns http success\" do\n+      get :edit, {id: my_post.id}\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"renders the #edit view\" do\n+      get :edit, {id: my_post.id}\n # #1\n+      expect(response).to render_template :edit\n+    end\n+\n # #2\n+    it \"assigns post to be updated to @post\" do\n+      get :edit, {id: my_post.id}\n+\n+      post_instance = assigns(:post)\n+\n+      expect(post_instance.id).to eq my_post.id\n+      expect(post_instance.title).to eq my_post.title\n+      expect(post_instance.body).to eq my_post.body\n+    end\n+  end\n ...\n```\n\nAt __#1__, we `expect` the **edit** view to render when a post is edited.\n\nAt __#2__, we test that `edit` assigns the correct post to be updated to `@post`.\n\nRun the `edit` specs:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e 'GET edit'\n```\n\nThe first two tests pass because of the stubbed `edit` action in `PostsController` and Rails' default rendering. The last test fails because we haven't finished the `edit` action.\n\nModify the `edit` action:\n\n```ruby(app/controllers/posts_controller.rb)\n   def edit\n+    @post = Post.find(params[:id])\n   end\n```\n\nRerun the `edit` specs to confirm all three pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e 'GET edit'\n```\n\n### `update` Action\n\nWith the `edit` action implemented and the specs passing, it's time to implement `update` to receive the edited posts. Let's TDD `update`:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n ...\n+  describe \"PUT update\" do\n+    it \"updates post with expected attributes\" do\n+      new_title = RandomData.random_sentence\n+      new_body = RandomData.random_paragraph\n+\n+      put :update, id: my_post.id, post: {title: new_title, body: new_body}\n+\n # #3\n+      updated_post = assigns(:post)\n+      expect(updated_post.id).to eq my_post.id\n+      expect(updated_post.title).to eq new_title\n+      expect(updated_post.body).to eq new_body\n+    end\n+\n+    it \"redirects to the updated post\" do\n+      new_title = RandomData.random_sentence\n+      new_body = RandomData.random_paragraph\n+\n # #4\n+      put :update, id: my_post.id, post: {title: new_title, body: new_body}\n+      expect(response).to redirect_to my_post\n+    end\n+  end\n ...\n```\n\nAt __#3__, we test that `@post` was updated with the title and body passed to `update`. We also test that `@post`'s id was not changed.\n\nAt __#4__, we `expect` to be redirected to the posts **show** view after the `update`.\n\nRun the `update` specs.\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e 'PUT update'\n```\n\nThese tests both fail because we haven't implemented the `update` action in `PostsController`. Let's implement it:\n\n```ruby(app/controllers/posts_controller.rb)\n+  def update\n+    @post = Post.find(params[:id])\n+    @post.title = params[:post][:title]\n+    @post.body = params[:post][:body]\n+\n+    if @post.save\n+      flash[:notice] = \"Post was updated successfully.\"\n+      redirect_to @post\n+    else\n+      flash.now[:alert] = \"There was an error saving the post. Please try again.\"\n+      render :edit\n+    end\n+  end\n```\n\nRun the `update` tests and verify that they both pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e 'PUT update'\n```\n\n## Edit and Update Views\n\nUpdate the posts **edit** view to display a form that allows users to update posts:\n\n```erb(app/views/posts/edit.html.erb)\n-<h1>Posts#edit</h1>\n-<p>Find me in app/views/posts/edit.html.erb</p>\n+<h1>Edit Post</h1>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-4\">\n+    <p>Guidelines for posts</p>\n+    <ul>\n+      <li>Make sure it rhymes.</li>\n+      <li>Don't use the letter \"A\".</li>\n+      <li>The incessant use of hashtags will get you banned.</li>\n+    </ul>\n+  </div>\n+  <div class=\"col-md-8\">\n+    <%= form_for @post do |f| %>\n+      <div class=\"form-group\">\n+        <%= f.label :title %>\n+        <%= f.text_field :title, class: 'form-control', placeholder: \"Enter post title\" %>\n+      </div>\n+      <div class=\"form-group\">\n+        <%= f.label :body %>\n+        <%= f.text_area :body, rows: 8, class: 'form-control', placeholder: \"Enter post body\" %>\n+      </div>\n+      <div class=\"form-group\">\n+        <%= f.submit \"Save\", class: 'btn btn-success' %>\n+      </div>\n+    <% end %>\n+  </div>\n+</div>\n```\n\nLet's add a link to edit a post on the __show__ view:\n\n```erb(app/views/posts/show.html.erb)\n-<h1><%= @post.title %></h1>\n-<p><%= @post.body %></p>\n+<h1><%= @post.title %></h1>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-8\">\n+    <p><%= @post.body %></p>\n+  </div>\n+  <div class=\"col-md-4\">\n <!-- #5 -->\n+    <%= link_to \"Edit\", edit_post_path(@post), class: 'btn btn-success' %>\n+  </div>\n+</div>\n```\n\nAt __#5__, we format a link as an **Edit** button which directs a user to `/posts/@post.id/edit`.  `edit_post_path(@post)` is a helper method that is generated in `routes.rb` by `resources :posts`. (Run `rake routes` from the command line to view the post routes, if you need a refresher.)\n\nOpen [http://localhost:3000/posts](http://localhost:3000/posts), click on a post, edit, and save it.\n\n## Destroy\n\nWe should provide users with the ability to delete posts. Let's write the tests for the `Post#destroy` action:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n...\n\n+  describe \"DELETE destroy\" do\n+    it \"deletes the post\" do\n+      delete :destroy, {id: my_post.id}\n # #6\n+      count = Post.where({id: my_post.id}).size\n+      expect(count).to eq 0\n+    end\n+\n+    it \"redirects to posts index\" do\n+      delete :destroy, {id: my_post.id}\n # #7\n+      expect(response).to redirect_to posts_path\n+    end\n+  end\n\n...\n```\n\nAt __#6__, we search the database for a post with an id equal to `my_post.id`. This returns an `Array`. We assign the `size` of the array to `count`, and we `expect` `count` to equal zero. This test asserts that the database won't have a matching post after `destroy` is called.\n\nAt __#7__, we `expect` to be redirected to the posts __index__ view after a post has been deleted.\n\nRun these tests and confirm they both fail because we haven't defined the `destroy` action yet:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e 'DELETE destroy'\n```\n\nOpen `PostsController` and implement the `destroy` action to make the previous tests pass:\n\n```ruby(app/controllers/posts_controller.rb)\n...\n\n+  def destroy\n+    @post = Post.find(params[:id])\n+\n # #8\n+    if @post.destroy\n+      flash[:notice] = \"\"#{@post.title}\" was deleted successfully.\"\n+      redirect_to posts_path\n+    else\n+      flash.now[:alert] = \"There was an error deleting the post.\"\n+      render :show\n+    end\n+  end\n\n...\n```\n\nAt __#8__, we call `destroy` on `@post`. If that call is successful, we set a `flash` message and redirect the user to the posts __index__ view. If `destroy` fails then we redirect the user to the **show** view using `render :show`.\n\nComments are dependent on a post's existence because of the `has_many :comments` declaration in `Post`. When we delete a post, we also need to delete all related comments. We'll perform a \"cascade delete\", which ensures that when a post is deleted, all of its comments are too. Let's modify `Post` to handle this:\n\n```ruby(app/models/post.rb)\n-  has_many :comments\n+  has_many :comments, dependent: :destroy\n```\n\nLet's use `link_to` to add a link to delete posts on the **show** view:\n\n```erb(app/views/posts/show.html.erb)\n <h1><%= @post.title %></h1>\n\n <div class=\"row\">\n   <div class=\"col-md-8\">\n     <p><%= @post.body %></p>\n   </div>\n <div class=\"col-md-4\">\n   <%= link_to \"Edit\", edit_post_path(@post), class: 'btn btn-success' %>\n <!-- #9 -->\n+  <%= link_to \"Delete Post\", @post, method: :delete, class: 'btn btn-danger', data: {confirm: 'Are you sure you want to delete this post?'} %>\n   </div>\n </div>\n```\n\nAt __#9__, we use `link_to` to create a delete button. The text on the button is __Delete Post__. We override the default `method` (`:post`) with `:delete` so that when the button is pressed the route called is the delete route. We style the button by setting `class:` to 'btn btn-danger'. We pass a `Hash` with the `confirm:` key to the `data:` argument. This confirms the action with a JavaScript confirmation dialog when a user presses the button.  Let's watch a video exploring `link_to`:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/mgdflul4kt\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center> <br>\n\nGo to [http://localhost:3000/posts](http://localhost:3000/posts), pick a post, and delete it.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [HTTP DELETE request](http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods) | The HTTP DELETE request is used to remove the identified resource from the web server. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nIn addition to posts, we'll allow Bloccit users to ask questions. A question will be similar to a post, but will also have a \"resolved\" attribute to signal that other answers are no longer needed.\n\n1. Use TDD for this assignment.\n\n2. Create a new model called `Question`. It should have `title:string`, `body:text`, and `resolved:boolean` attributes.\n\n3. Generate a controller for `Question` with the [default CRUD controller actions](http://guides.rubyonrails.org/routing.html#crud-verbs-and-actions).\n\n4. Update `routes.rb` to use [resourceful routing](http://guides.rubyonrails.org/routing.html#resource-routing-the-rails-default) for `Question`.\n\n5. Complete `QuestionsController` and its corresponding views. Accept input for the `resolved` attribute in the Question form using a [checkbox](http://api.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html#method-i-check_box).\n\n6. Seed your application with questions.\n\n7. Test your changes in the browser. Confirm that you can:\n  - see an index of all questions\n  - view an individual question\n  - create new questions\n  - edit and update questions\n  - mark a question as \"resolved\"\n  - delete questions\n\n8. Ensure that all question-related tests pass.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/hu6nb142cj?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">More CRUD Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 33,
          "checkpoint_type": "normal",
          "position": 33,
          "points": 1,
          "ref": "0b863e6f-a836-4112-ad75-cf1b0c292433|0"
        },
        {
          "id": 1891,
          "name": "Programming Reinforcement: Checkpoint 3",
          "summary": "Reinforce Ruby programming and problem solving fundamentals through curated exercises",
          "body": "<!-- { ids:[1778,1783,1891], name:'Programming Reinforcement: Checkpoint 3', summary:'Reinforce Ruby programming and problem solving fundamentals through curated exercises' } -->\n\n<mentor-checkpoint-note>The programming reinforcement checkpoints in the Frontend and Rails courses are not the same. In order to be career support eligible, students must complete them all <b>before graduating a course</b>. They gradually increase in difficulty, so we recommend doing them in order.</mentor-checkpoint-note>\n\nEach foundation checkpoint introduces new concepts, patterns, and assignments. We designed Bloc’s curriculum to push you to your learning limits. With that in mind, we’ve included breaks between lessons to reinforce programming concepts; this is the third of those breaks, known as Programming Reinforcement checkpoints.\n\nIn these checkpoints, you will complete coding challenges that help you master Ruby and learn to think like a programmer. After you complete the challenges, you will meet with your mentor to discuss your solutions.\n\n- [Challenges](#challenges)\n- [Bonus Challenge: Sudoku Solution Validator](#bonus-challenge)\n- [Assignment](#assignment)\n\t- [For Mentors](#for-mentors)\n\n<a name=\"challenges\"></a>\n## Challenges\n\nYou must solve these three Kata (challenges) before submitting the checkpoint. At this point in your program, your skill level meets or exceeds that required by each Kata. While they may challenge you, know that you are capable of completing each one.\n\n>Your mentor may help you, but we strongly encourage you attempt these on your own.\n\n| Kata                                                                             | Difficulty[*](#difficulty) | Hint                                                                                                                                              |\n|:---------------------------------------------------------------------------------|:---------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Longest Palindrome](http://www.codewars.com/kata/longest-palindrome/train/ruby) | 6                          | Detect the smallest palindromes first (e.g. “aa”, “aba”), then check the ends as you progress through the string.                                 |\n| [Sequence Generator](http://www.codewars.com/kata/sequence-generator/train/ruby) | 6                          | The [`Enumerator`](http://apidock.com/ruby/Enumerator/new/class) class provides a `yield` object, each iteration must pass the next result to it. |\n| [Checkered Board](http://www.codewars.com/kata/checkered-board/train/ruby)       | 6                          | Use the [`is_a?`](http://stackoverflow.com/questions/3893278/ruby-kind-of-vs-instance-of-vs-is-a) function to check for type.                     |\n\n<a name=\"difficulty\"></a>\n\\*<sub> Difficult problems have lower ratings.</sub>\n\n<a name=\"bonus-challenge\"></a>\n## Bonus Challenge: [Sudoku Solution Validator](http://www.codewars.com/kata/sudoku-solution-validator/train/ruby)\n\n>This bonus challenge is optional, but we strongly encourage you to attempt it.\n\nSudoku is a fun puzzle game in which a 9×9 board begins partially filled with numbers ranging from one through nine:\n\n<center>![Sudoku Unsolved](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/rails/checkpoint-four/sudoku-unsolved.png)</center>\n\nPlayers must fill each empty square with a number, one through nine, such that each of the numbers appears once in each row, each column, and in each of the nine 3×3 sub-boards:\n\n<center>![Sudoku Unsolved](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/rails/checkpoint-four/sudoku-solved.png)</center>\n\nIn this challenge, write a method that will receive a proposed Sudoku solution in this format:\n\n```ruby\nvalidSolution([[5, 3, 4, 6, 7, 8, 9, 1, 2],\n               [6, 7, 2, 1, 9, 5, 3, 4, 8],\n               [1, 9, 8, 3, 4, 2, 5, 6, 7],\n               [8, 5, 9, 7, 6, 1, 4, 2, 3],\n               [4, 2, 6, 8, 5, 3, 7, 9, 1],\n               [7, 1, 3, 9, 2, 4, 8, 5, 6],\n               [9, 6, 1, 5, 3, 7, 2, 8, 4],\n               [2, 8, 7, 4, 1, 9, 6, 3, 5],\n               [3, 4, 5, 2, 8, 6, 1, 7, 9]])\n```\n\nReturn `true` if the solution follows the rules, otherwise return `false`.",
          "assignment": "- Complete all [mandatory challenges](#challenges).\n  - Submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to each of your solutions as part of your assignment.\n- Attempt the [Bonus Challenge](#bonus-challenge).\n  - Keep a log as you work through it and consider these questions when writing your report:\n    - What approaches did you try?\n    - Did you ever restart the process? If so, why?\n    - What steps did you take to solve the problem before you began coding?\n    - What was the most challenging aspect of the problem?\n    - Etc.\n  - If you complete the [Bonus Challenge](#bonus-challenge), submit the [link](http://bloc-global-assets.s3.amazonaws.com/images-programming-fundamentals/programming-reinforcement-solution-link.png) to your solution.\n- Discuss your solutions and your struggles with your mentor.\n\n>Articulating your problem solving process is a valuable skill on the job and during technical interviews.\n\nRemember to click **Submit Final** on every challenge you complete, and notify your mentor when you do so. For challenges you *do not* complete, you may ask your mentor to review them with you.\n\n<a name=\"for-mentors\"></a>\n### For Mentors\n\nConsult this [document for reference](https://www.bloc.io/resources/ruby-programming-reinforcement-mentor-s-guide) for this and all future Ruby Programming Reinforcement checkpoints.",
          "roadmap_section_id": 120,
          "active_index": null,
          "checkpoint_type": "career_prep",
          "position": null,
          "points": 1,
          "ref": "b97f6d7a-cbf6-4b08-a5e7-dced3799e2d7|0"
        },
        {
          "id": 1645,
          "name": "Rails: Topics and Posts",
          "summary": "Topics and Posts: associating topics and posts",
          "body": "<!-- { ids:[1645], name:'Rails: Topics and Posts', summary:'Topics and Posts: associating topics and posts' } -->\n\n<center>\n  ![hot-topic](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-topics-and-posts/hot-topic.jpg)\n</center>\n\n> “Like religion, politics, and family planning, cereal is not a topic to be brought up in public. It's too controversial.”\n>\n> — Erma Bombeck\n\n## Topics\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/szywaooqlq\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWe've built the functionality to create posts, but we don't have a way to organize them. We anticipate that Bloccit users will create a large number of posts, and will therefore need a way to organize, or categorize them. In this checkpoint, we'll create a **topics** resource that will be used to organize posts. Along the way, we'll learn how to nest resources and refactor code.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Topic Model\n\nThe first step in creating a new topic resource is to create a topic model. An instance of `Topic` will require a `name` and `description` attribute. We'll also create a `public` attribute, of a `Boolean` data type, to allow users to restrict access to topics.\n\nCreate the topic model:\n\n```bash(Terminal)\n$ rails generate model topic name:string public:boolean description:text\n      invoke  active_record\n      create    db/migrate/20150625221905_create_topics.rb\n      create    app/models/topic.rb\n      invoke    rspec\n      create      spec/models/topic_spec.rb\n```\n\n> We can call the `generate` command with either capitalized (e.g. `Topic`) or uncapitalized (e.g. `topic`) model names. It makes no different to the generator.\n\nOpen the migration file and set the `public` attribute to `true` by default:\n\n```ruby(db/migrate/20150729181446_create_topics.rb)\n class CreateTopics < ActiveRecord::Migration\n   def change\n     create_table :topics do |t|\n       t.string :name\n-      t.boolean :public\n+      t.boolean :public, default: true\n       t.text :description\n\n       t.timestamps\n     end\n   end\n end\n```\n\nRun the migration using `rake db:migrate`:\n\n```bash(Terminal)\n$ rake db:migrate\n```\n\n## Topic Specs\n\nAdd the following tests to `topic_spec.rb`:\n\n```ruby(spec/models/topic_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Topic, type: :model do\n+  let(:name) { RandomData.random_sentence }\n+  let(:description) { RandomData.random_paragraph }\n+  let(:public) { true }\n+  let(:topic) { Topic.create!(name: name, description: description) }\n\n # #1\n+  describe \"attributes\" do\n+    it \"has name, description, and public attributes\" do\n+      expect(topic).to have_attributes(name: name, description: description, public: public)\n+    end\n\n # #2\n+    it \"is public by default\" do\n+      expect(topic.public).to be(true)\n+    end\n+  end\n end\n```\n\nAt __#1__, we confirm that a topic responds to the appropriate attributes.\n\nAt __#2__, we confirm that the `public` attribute is set to `true` by default.\n\nRun `topic_spec.rb` to confirm all four tests pass:\n\n```bash(Terminal)\n$ rspec spec/models/topic_spec.rb\n```\n\nTo organize posts by topic we will need to build an association between topics and posts. To TDD this association we'll use the [Shoulda gem](https://github.com/thoughtbot/shoulda). Shoulda makes it easier for us to write association tests by providing some handy methods that RSpec doesn't have. Add Shoulda to `Gemfile` and run `bundle install`:\n\n```ruby(Gemfile)\n group :development, :test do\n   gem 'rspec-rails', '~> 3.0'\n+  gem 'shoulda'\n end\n```\n\n```bash(Terminal)\n$ bundle install\n```\n\nUse methods provided by Shoulda and add the following tests to `topic_spec.rb`:\n\n```ruby(spec/models/topic_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Topic, type: :model do\n   let(:name) { RandomData.random_sentence }\n   let(:description) { RandomData.random_paragraph }\n   let(:public) { true }\n   let(:topic) { Topic.create!(name: name, description: description) }\n\n+  it { is_expected.to have_many(:posts) }\n ...\n```\n\nNow add tests for `post_spec.rb`:\n\n```ruby(spec/models/post_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Post, type: :model do\n-  let(:post) { Post.create!(title: \"New Post Title\", body: \"New Post Body\") }\n+  let(:name) { RandomData.random_sentence }\n+  let(:description) { RandomData.random_paragraph }\n+  let(:title) { RandomData.random_sentence }\n+  let(:body) { RandomData.random_paragraph }\n # #3\n+  let(:topic) { Topic.create!(name: name, description: description) }\n # #4\n+  let(:post) { topic.posts.create!(title: title, body: body) }\n+\n+  it { is_expected.to belong_to(:topic) }\n\n   describe \"attributes\" do\n     it \"has a title and body attribute\" do\n-      expect(post).to have_attributes(title: \"New Post Title\", body: \"New Post Body\")\n+      expect(post).to have_attributes(title: title, body: body)\n     end\n   end\n end\n```\n\nAt __#3__, we create a parent topic for `post`.\n\nAt __#4__, we associate `post` with `topic` via `topic.posts.create!`. This is a chained method call which creates a post for a given topic.\n\nFinally, we'll need to update `comment_spec.rb` to account for the new association:\n\n```ruby(spec/models/comment_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Comment, type: :model do\n-  let(:post) { Post.create!(title: \"New Post Title\", body: \"New Post Body\") }\n+  let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n+  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph) }\n   let(:comment) { Comment.create!(body: 'Comment Body', post: post) }\n\n   describe \"attributes\" do\n ...\n```\n\nRun the spec and confirm that the test doesn't pass.\n\nRun `topic_spec.rb` and `post_spec.rb`. There will be error messages for each spec because topics and posts are not associated. Let's fix these errors by creating the association.\n\n## Associations\n\nDatabase tables are associated via __foreign keys__. Recall that a foreign key is an attribute that references an attribute, most often the primary key, of another table. For example:\n\n![topic_id foreign key](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-topics-and-posts/topic-post-relationship.jpg)\n\nIn the above association, `Post.topic_id` is a **foreign_key** that references `Topic.id`.\n\nBecause posts belong to topics, we'll add a topic_id foreign key attribute to the posts table:\n\n```bash(Terminal)\n$ rails generate migration AddTopicToPosts topic_id:integer:index\n      invoke  active_record\n      create    db/migrate/20150729184746_add_topic_to_posts.rb\n```\n\nThis generated the following migration file:\n\n```ruby(db/migrate/20150729184746_add_topic_to_posts.rb)\nclass AddTopicToPosts < ActiveRecord::Migration\n  def change\n # #5\n    add_column :posts, :topic_id, :integer\n # #6\n    add_index :posts, :topic_id\n  end\nend\n```\n\nAt __#5__, we see that the name we gave the migration, `AddTopicToPosts`, is very important. Using this specific naming format:\n\n```ruby\n\"Add\" + [table whose id we want to add] + \"To\" + [table we want to add the foreign key to]\n```\n\n...we instructed the generator to create a migration that adds a topic_id column to the posts table.\n\nAt __#6__, we created an index on topic_id with the generator. An index improves the speed of operations on a database table.\n\n> You should always index your [foreign key columns](https://tomafro.net/2009/08/using-indexes-in-rails-index-your-associations).\n\nRun the migration to add the foreign key:\n\n```bash(Terminal)\n$ rake db:migrate\n```\n\nUpdate `Post` and `Topic` to reflect the association:\n\n```ruby(app/models/post.rb)\n class Post < ActiveRecord::Base\n+  belongs_to :topic\n   has_many :comments, dependent: :destroy\n end\n```\n\n```ruby(app/models/topic.rb)\n class Topic < ActiveRecord::Base\n+  has_many :posts\n end\n```\n\nRun `topic_spec.rb` and `post_spec.rb` to confirm that all the tests are passing:\n\n```bash(Terminal)\n$ rspec spec/models/topic_spec.rb\n$ rspec spec/models/post_spec.rb\n```\n\n## Seeds\n\nWe also need to update `seeds.rb`, because none of the posts in the database have an associated topic. Create some new topics and assign each post to a random topic:\n\n```ruby(db/seeds.rb)\n+# Create Topics\n+15.times do\n+  Topic.create!(\n+    name:         RandomData.random_sentence,\n+    description:  RandomData.random_paragraph\n+  )\n+end\n+topics = Topic.all\n\n # Create Posts\n 50.times do\n   Post.create!(\n+    topic:  topics.sample,\n     title:  RandomData.random_sentence,\n     body:   RandomData.random_paragraph\n   )\n end\n\n posts = Post.all\n\n # Create Comments\n 100.times do\n   Comment.create!(\n     post: posts.sample,\n     body: RandomData.random_paragraph\n   )\n end\n\n puts \"Seed finished\"\n+puts \"#{Topic.count} topics created\"\n puts \"#{Post.count} posts created\"\n puts \"#{Comment.count} comments created\"\n```\n\nEmpty the existing database of posts and topics and reseed it with the `reset` command:\n\n```bash(Terminal)\n$ rake db:reset\n```\n\n## The Topics Resource\n\nOur topics resource has a model, but not a controller. Let's generate a topics controller to complete our topics resource, as well as the necessary routes and views to present topics to users:\n\n```bash(Terminal)\n$ rails generate controller Topics\n```\n\nWe didn't pass any action arguments to the controller generator. Instead, we'll create the actions and views that topics require manually.\n\nBuild the resourceful routes:\n\n```ruby(config/routes.rb)\n Rails.application.routes.draw do\n+  resources :topics\n   resources :posts\n\n   get 'about' => 'welcome#about'\n\n   root 'welcome#index'\n end\n```\n\nRun `rake routes` from the command line to examine the routes we created for topics. `resources` creates the seven standard CRUD routes we need for topics.\n\n## Topics Index\n\nAs with `PostsController`, we'll TDD the actions in `TopicsController`, starting with the `index` action:\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe TopicsController, type: :controller do\n+  let(:my_topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n+\n+  describe \"GET index\" do\n+    it \"returns http success\" do\n+      get :index\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"assigns my_topic to @topics\" do\n+      get :index\n+      expect(assigns(:topics)).to eq([my_topic])\n+    end\n+  end\n end\n```\n\nThis test follows the pattern we established when testing `PostsController`. Using `let`, we create a `my_topic` variable to use in our tests. We then write two tests to confirm the expected behavior of the `index` action.\n\nRun the `index` section of the `TopicsContollerSpec` to confirm that both tests fail:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'GET index'\n```\n\nAdd the `index` action to `TopicsController` and provide an array of topics to the **index** view to pass the tests:\n\n```ruby(app/controllers/topics_controller.rb)\n class TopicsController < ApplicationController\n+  def index\n+    @topics = Topic.all\n+  end\n end\n```\n\nTo pass the tests, we need to create the topics __index__ view to display a list of all topics with their names and descriptions:\n\n```bash(Terminal)\n$ touch app/views/topics/index.html.erb\n```\n\nWith this view created, `topics_controller_spec.rb` will now pass both `index` tests:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'GET index'\n```\n\nFill out the view to display a list of all topics:\n\n```erb(app/views/topics/index.html.erb)\n+<h1>Topics</h1>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-8\">\n <!-- #7 -->\n+    <% @topics.each do |topic| %>\n+      <div class=\"media\">\n+        <div class=\"media-body\">\n+          <h4 class=\"media-heading\">\n <!-- #8 -->\n+            <%= link_to topic.name, topic %>\n+          </h4>\n+          <small>\n+            <%= topic.description %>\n+          </small>\n+        </div>\n+      </div>\n+    <% end %>\n+  </div>\n+  <div class=\"col-md-4\">\n <!-- #9 -->\n+    <%= link_to \"New Topic\", new_topic_path, class: 'btn btn-success' %>\n+  </div>\n+</div>\n```\n\nAt __#7__, we loop over each topic in `@topics`.\n\nAt __#8__, we create a link to the **show** view for each `topic`.\n\nAt __#9__, we create a link to create a new topic.\n\nVisit [http://localhost:3000/topics](http://localhost:3000/topics). You should see the topics that were created in `seeds.rb` and a **New Topic** button.\n\n## Show Topic\n\nWhen a user clicks on a topic, they should be taken to its **show** view and shown the posts that belong to that topic.\n\nAdd tests for the topic **show** action:\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n ...\n+  describe \"GET show\" do\n+    it \"returns http success\" do\n+      get :show, {id: my_topic.id}\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"renders the #show view\" do\n+      get :show, {id: my_topic.id}\n+      expect(response).to render_template :show\n+    end\n+\n+    it \"assigns my_topic to @topic\" do\n+      get :show, {id: my_topic.id}\n+      expect(assigns(:topic)).to eq(my_topic)\n+    end\n+  end\n end\n```\n\nThese three tests should fail:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'GET show'\n```\n\nUpdate `TopicsController` to add a `show` action\n\n```ruby(app/controllers/topics_controller.rb)\n class TopicsController < ApplicationController\n   def index\n     @topics = Topic.all\n   end\n+\n+  def show\n+    @topic = Topic.find(params[:id])\n+  end\n end\n```\n\nOur tests will still fail because of the missing __show__ view, so we'll create that view next:\n\n```bash(Terminal)\n$ touch app/views/topics/show.html.erb\n```\n\nWith the __show__ view created, `topics_controller_spec.rb` will now pass all three `show` tests:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'GET show'\n```\n\nFill out the view to display the topic information and all associated posts:\n\n```erb(app/views/topics/show.html.erb)\n+<h1><%= @topic.name %></h1>\n+\n+<%= link_to \"Edit Topic\", edit_topic_path, class: 'btn btn-success' %>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-8\">\n+    <p class=\"lead\"><%= @topic.description %></p>\n <!-- #10 -->\n+    <% @topic.posts.each do |post| %>\n+      <div class=\"media\">\n+        <div class=\"media-body\">\n+          <h4 class=\"media-heading\">\n+            <%= link_to post.title, post %>\n+          </h4>\n+        </div>\n+      </div>\n+    <% end %>\n+  </div>\n+  <div class=\"col-md-4\">\n+    <%= link_to \"New Post\", new_post_path(@topic), class: 'btn btn-success' %>\n+  </div>\n+</div>\n```\n\nAt __#10__, we iterate over the `posts` belonging to `@topic`, and display each post.\n\nOpen [http://localhost:3000/topics](http://localhost:3000/topics) and click on a topic to confirm that the topic **show** view works as expected.\n\n## New Topics\n\nUsers will want to be able to create new topics, so let's implement the `new` and `create` actions using TDD.\n\n### `new` Action\n\nAdd tests for the `new` action:\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n ...\n+  describe \"GET new\" do\n+    it \"returns http success\" do\n+      get :new\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"renders the #new view\" do\n+      get :new\n+      expect(response).to render_template :new\n+    end\n+\n+    it \"initializes @topic\" do\n+      get :new\n+      expect(assigns(:topic)).not_to be_nil\n+    end\n+  end\n end\n```\n\nThe three `new` tests will fail because `TopicsController` doesn't implement the `new` action yet:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'GET new'\n```\n\nImplement the `new` action:\n\n```ruby(app/controllers/topics_controller.rb)\n class TopicsController < ApplicationController\n   def index\n     @topics = Topic.all\n   end\n\n   def show\n     @topic = Topic.find(params[:id])\n   end\n+\n+  def new\n+    @topic = Topic.new\n+  end  \n end\n```\n\nOur tests are still failing because of the missing __new__ view, so let's create it now:\n\n```bash(Terminal)\n$ touch app/views/topics/new.html.erb\n```\n\nWith the __new__ view created, `topics_controller_spec.rb` will now pass all three `new` tests:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'GET new'\n```\n\nAdd a form for creating new topics:\n\n```erb(app/views/topics/new.html.erb)\n+<h1>New Topic</h1>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-4\">\n+    <p>Guidelines for topics:</p>\n+    <ul>\n+      <li>Make sure the topic is appropriate.</li>\n+      <li>Never insult dogs.</li>\n+      <li>Smile when you type.</li>\n+    </ul>\n+  </div>\n+  <div class=\"col-md-8\">\n+    <%= form_for @topic do |f| %>\n+      <div class=\"form-group\">\n+        <%= f.label :name %>\n+        <%= f.text_field :name, class: 'form-control', placeholder: \"Enter topic name\" %>\n+      </div>\n+      <div class=\"form-group\">\n+        <%= f.label :description %>\n+        <%= f.text_area :description, rows: 8, class: 'form-control', placeholder: \"Enter topic description\" %>\n+      </div>\n+      <div class=\"form-group\">\n+        <%= f.label :public, class: 'checkbox' do %>\n+          <%= f.check_box :public %> Public topic\n+        <% end %>\n+      </div>\n+      <%= f.submit \"Save\", class: 'btn btn-success' %>\n+    <% end %>\n+  </div>\n+</div>\n```\n\nOpen [http://localhost:3000/topics/new](http://localhost:3000/topics/new) and click on the **New Topic** button to confirm that the topic **new** view _looks_ as expected.\n\nThe user interface (UI) for creating new topics is complete, but if we try to submit the form, we'll get an error. This is because we haven't implemented the `create` action, which is used for inserting new records into the database.\n\n### `create` Action\n\nAdd three tests for `create`:\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n ...\n+  describe \"POST create\" do\n+    it \"increases the number of topics by 1\" do\n+      expect{ post :create, {topic: {name: RandomData.random_sentence, description: RandomData.random_paragraph}}}.to change(Topic,:count).by(1)\n+    end\n+  \n+    it \"assigns Topic.last to @topic\" do\n+      post :create, {topic: {name: RandomData.random_sentence, description: RandomData.random_paragraph}}\n+      expect(assigns(:topic)).to eq Topic.last\n+    end\n+\n+    it \"redirects to the new topic\" do\n+      post :create, {topic: {name: RandomData.random_sentence, description: RandomData.random_paragraph}}\n+      expect(response).to redirect_to Topic.last\n+    end\n+  end\n end\n```\n\nRun these tests and confirm that they're failing:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'POST create'\n```\n\nPass these tests by implementing the `create` action:\n\n```ruby(app/controllers/topics_controller.rb)\n class TopicsController < ApplicationController\n   def index\n     @topics = Topic.all\n   end\n\n   def show\n     @topic = Topic.find(params[:id])\n   end\n\n   def new\n     @topic = Topic.new\n   end  \n+\n+  def create\n+    @topic = Topic.new\n+    @topic.name = params[:topic][:name]\n+    @topic.description = params[:topic][:description]\n+    @topic.public = params[:topic][:public]\n+\n+    if @topic.save\n+      flash[:notice] = \"Topic was saved successfully.\"\n+      redirect_to @topic\n+    else\n+      flash.now[:alert] = \"Error creating topic. Please try again.\"\n+      render :new\n+    end\n+  end\n end\n```\n\nThe `create` tests in `topics_controller_spec.rb` should now pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'POST create'\n```\n\nCreate a couple of new topics in your browser to confirm that `new` and `create` work as expected.\n\n## Edit Topic\n\nImplement the `edit` and `update` actions so users can edit existing topics, starting with `edit`.\n\n### `edit` Action\n\nLet's TDD the `edit` action first:\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n ...\n+  describe \"GET edit\" do\n+    it \"returns http success\" do\n+      get :edit, {id: my_topic.id}\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"renders the #edit view\" do\n+      get :edit, {id: my_topic.id}\n+      expect(response).to render_template :edit\n+    end\n+\n+    it \"assigns topic to be updated to @topic\" do\n+      get :edit, {id: my_topic.id}\n+      topic_instance = assigns(:topic)\n+\n+      expect(topic_instance.id).to eq my_topic.id\n+      expect(topic_instance.name).to eq my_topic.name\n+      expect(topic_instance.description).to eq my_topic.description\n+    end\n+  end\n end\n```\n\nThese tests will fail until we implement the `edit` action:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'GET edit'\n```\n\nImplement the `edit` action:\n\n```ruby(app/controllers/topics_controller.rb)\n class TopicsController < ApplicationController\n ...\n+\n+  def edit\n+    @topic = Topic.find(params[:id])\n+  end\n+\n end\n```\n\nOur tests are still failing because of the missing __edit__ view:\n\n```bash(Terminal)\n$ touch app/views/topics/edit.html.erb\n```\n\n`topics_controller_spec.rb` will now pass all three `edit` tests:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'GET edit'\n```\n\nUpdate the **edit** view to give users the ability to update a topic's `name`, `description`, and `public` attributes:\n\n```erb(app/views/topics/edit.html.erb)\n+<h1>Edit Topic</h1>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-4\">\n+    <p>Guidelines for topics:</p>\n+    <ul>\n+      <li>Make sure the topic is appropriate.</li>\n+      <li>Never insult dogs.</li>\n+      <li>Smile when you type.</li>\n+    </ul>\n+  </div>\n+  <div class=\"col-md-8\">\n+    <%= form_for @topic do |f| %>\n+      <div class=\"form-group\">\n+        <%= f.label :name %>\n+        <%= f.text_field :name, class: 'form-control', placeholder: \"Enter topic name\" %>\n+      </div>\n+      <div class=\"form-group\">\n+        <%= f.label :description %>\n+        <%= f.text_area :description, rows: 8, class: 'form-control', placeholder: \"Enter topic description\" %>\n+      </div>\n+      <div class=\"form-group\">\n <!-- #11 -->\n+        <%= f.label :public, class: 'checkbox' do %>\n+          <%= f.check_box :public %> Public topic\n+        <% end %>\n+      </div>\n+      <%= f.submit \"Save\", class: 'btn btn-success' %>\n+    <% end %>\n+  </div>\n+</div>\n```\n\nAt __#11__, we pass a block to `f.label` to generate the HTML for a checkbox.\n\nFrom [http://localhost:3000/topics](http://localhost:3000/topics) click on a topic and the click the **Edit Topic** button to confirm that the topic **edit** view and form _look_ as expected.\n\n### `update` Action\n\nLet's create the ability to update a topic's database record by implementing the `update` action. Add three tests for `update`:\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n ...\n+  describe \"PUT update\" do\n+    it \"updates topic with expected attributes\" do\n+      new_name = RandomData.random_sentence\n+      new_description = RandomData.random_paragraph\n+\n+      put :update, id: my_topic.id, topic: { name: new_name, description: new_description }\n+\n+      updated_topic = assigns(:topic)\n+      expect(updated_topic.id).to eq my_topic.id\n+      expect(updated_topic.name).to eq new_name\n+      expect(updated_topic.description).to eq new_description\n+    end\n+\n+    it \"redirects to the updated topic\" do\n+      new_name = RandomData.random_sentence\n+      new_description = RandomData.random_paragraph\n+\n+      put :update, id: my_topic.id, topic: { name: new_name, description: new_description }\n+      expect(response).to redirect_to my_topic\n+    end\n+  end\n end\n```\n\nRun these tests and confirm that they fail:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'PUT update'\n```\n\nPass the tests by implementing the `update` action:\n\n```ruby(app/controllers/topics_controller.rb)\n class TopicsController < ApplicationController\n  ...\n+\n+  def update\n+    @topic = Topic.find(params[:id])\n+\n+    @topic.name = params[:topic][:name]\n+    @topic.description = params[:topic][:description]\n+    @topic.public = params[:topic][:public]\n+\n+    if @topic.save\n+       flash[:notice] = \"Topic was updated successfully.\"\n+      redirect_to @topic\n+    else\n+      flash.now[:alert] = \"Error saving topic. Please try again.\"\n+      render :edit\n+    end\n+  end\n+\n end\n```\n\nThe `update` tests in `topics_controller_spec.rb` should now pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'PUT update'\n```\n\nEdit some topics in your browser to confirm that the `edit` and `update` work as expected.\n\n## Delete Topic\n\nUsers may want to delete topics, so we'll implement `destroy` using TDD:\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n ...\n+  describe \"DELETE destroy\" do\n+    it \"deletes the topic\" do\n+      delete :destroy, {id: my_topic.id}\n+      count = Topic.where({id: my_topic.id}).size\n+      expect(count).to eq 0\n+    end\n+  \n+    it \"redirects to topics index\" do\n+      delete :destroy, {id: my_topic.id}\n+      expect(response).to redirect_to topics_path\n+    end\n+  end\n end\n```\n\nRun these tests:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'DELETE destroy'\n```\n\nThey'll both fail until we implement `destroy`:\n\n```ruby(app/controllers/topics_controller.rb)\n...\n+  def destroy\n+    @topic = Topic.find(params[:id])\n+\n+    if @topic.destroy\n+      flash[:notice] = \"\"#{@topic.name}\" was deleted successfully.\"\n+      redirect_to action: :index\n+    else\n+      flash.now[:alert] = \"There was an error deleting the topic.\"\n+      render :show\n+    end\n+  end\n end\n```\n\n> `redirect_to action: :index` is the same as `redirect_to topics_path` because `topics_path` routes to the `index` action per Rails' resourceful routing.\n\nOur tests should now pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb -e 'DELETE destroy'\n```\n\nUpdate the **show** view to display a **Delete Topic** button:\n\n```erb(app/views/topics/show.html.erb)\n <h1><%= @topic.name %></h1>\n\n <%= link_to \"Edit Topic\", edit_topic_path, class: 'btn btn-success' %>\n+<%= link_to \"Delete Topic\", @topic, method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure you want to delete this topic?' } %>\n ...\n```\n\nWhen we delete a topic, its associated posts should also be deleted:\n\n```ruby(models/topic.rb)\n class Topic < ActiveRecord::Base\n-  has_many :posts\n+  has_many :posts, dependent: :destroy\n end\n```\n\n> Because comments already depend on posts, they will also be deleted when a topic is deleted.\n\nVisit [http://localhost:3000/topics](http://localhost:3000/topics) and click on a topic and make sure you can delete it.\n\n## Nesting Posts\n\nNesting is a term we use when one object should be interacted with in the exclusive context of another object. Associated models, like posts and topics, don't _need_ to be nested, but we should nest posts in topics because we never want posts to be viewed, created, or edited in isolation. A nested post's URL will be scoped to topic, for example: `/topics/1/posts/3`. This URL still meets RESTful conventions, and is supported by Rails.\n\nTo nest posts under topics, we'll need to refactor `routes.rb`, the `PostsController`, and the topic and post views. Before we refactor, let's update our tests in anticipation of our nested posts:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe PostsController do\n # #12\n+  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n # #13\n+  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph) }\n\n-  let(:my_post) { Post.create( title:  RandomData.random_sentence, body:   RandomData.random_paragraph) }\n\n # #14\n-  describe \"GET index\" do\n-    it \"returns http success\" do\n-      get :index\n-      expect(response).to have_http_status(:success)\n-    end\n-\n-    it \"assigns [my_post] to @posts\" do\n-      get :index\n-      expect(assigns(:posts)).to eq([my_post])\n-    end\n-  end\n```\n\nBecause posts will be nested under topics, at __#12__ we create a parent topic named `my_topic`.\n\nAt __#13__, we update how we create `my_post` so that it will belong to `my_topic`.\n\nAt __#14__, we remove the `index` tests. Posts will no longer need an __index__ view because they'll be displayed on the __show__ view of their parent topic.\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n   describe \"GET show\" do\n     it \"returns http success\" do\n-      get :show, {id: my_post.id}\n # #15\n+      get :show, topic_id: my_topic.id, id: my_post.id\n       expect(response).to have_http_status(:success)\n     end\n\n     it \"renders the #show view\" do\n-      get :show, {id: my_post.id}\n # #16\n+      get :show, topic_id: my_topic.id, id: my_post.id\n       expect(response).to render_template :show\n     end\n\n     it \"assigns my_post to @post\" do\n-      get :show, {id: my_post.id}\n # #17\n+      get :show, topic_id: my_topic.id, id: my_post.id\n       expect(assigns(:post)).to eq(my_post)\n     end\n   end\n```\n\nPosts routes will now include the `topic_id` of the parent topic, so at __#15__, __#16__, and __#17__ we update our `get :show` request to include the id of the parent topic.\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n   describe \"GET new\" do\n     it \"returns http success\" do\n-      get :new\n # #18\n+      get :new, topic_id: my_topic.id\n       expect(response).to have_http_status(:success)\n     end\n\n     it \"renders the #new view\" do\n-      get :new\n # #19\n+      get :new, topic_id: my_topic.id\n       expect(response).to render_template :new\n     end\n\n     it \"initializes @post\" do\n-      get :new\n# #20\n+      get :new, topic_id: my_topic.id\n       expect(assigns(:post)).not_to be_nil\n     end\n   end\n```\n\nAt __#18__, __#19__, and __#20__ we update the `get :new` request to include the id of the parent topic.\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n   describe \"POST create\" do\n     it \"increases the number of Post by 1\" do\n-      expect{post :create, {post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}} }.to change(Post,:count).by(1)\n # #21\n+      expect{post :create, topic_id: my_topic.id, post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}}.to change(Post,:count).by(1)\n     end\n\n     it \"assigns the new post to @post\" do\n-      post :create, {post: title: RandomData.random_sentence, body: RandomData.random_paragraph}\n # #22\n+      post :create, topic_id: my_topic.id, post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}\n       expect(assigns(:post)).to eq Post.last\n     end\n\n     it \"redirects to the new post\" do\n-      post :create, {post: name: RandomData.random_sentence, body: RandomData.random_paragraph}\n-      expect(response).to redirect_to Post.last\n # #23\n+      post :create, topic_id: my_topic.id, post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}\n # #24\n+      expect(response).to redirect_to [my_topic, Post.last]\n     end\n   end\n```\n\nAt __#21__, __#22__, and __#23__ we update the `post :create` request to include the id of the parent topic.\n\nAt __#24__, because the route for the posts __show__ view will also be updated to reflect nested posts, instead of  redirecting to `Post.last`, we redirect to `[my_topic, Post.last]`. Rails' router can take an array of objects and build a route to the show page of the last object in the array, nesting it under the other objects in the array.\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n   describe \"GET edit\" do\n     it \"returns http success\" do\n-      get :edit, {id: my_post.id}\n # #25\n+      get :edit, topic_id: my_topic.id, id: my_post.id\n       expect(response).to have_http_status(:success)\n     end\n\n     it \"renders the #edit view\" do\n-      get :edit, {id: my_post.id}\n # #26\n+      get :edit, topic_id: my_topic.id, id: my_post.id\n       expect(response).to render_template :edit\n     end\n\n     it \"assigns post to be updated to @post\" do\n-      get :edit, {id: my_post.id}\n # #27\n+      get :edit, topic_id: my_topic.id, id: my_post.id\n       post_instance = assigns(:post)\n\n       expect(post_instance.id).to eq my_post.id\n       expect(post_instance.title).to eq my_post.title\n       expect(post_instance.body).to eq my_post.body\n     end\n   end\n```\n\nAt __#25__, __#26__, and __#27__ we update the `get :edit` request to include the id of the parent topic.\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n   describe \"PUT update\" do\n     it \"updates post with expected attributes\" do\n       new_title = RandomData.random_sentence\n       new_body = RandomData.random_paragraph\n\n-      put :update, id: my_post.id, post: {title: new_title, body: new_body}\n # #28\n+      put :update, topic_id: my_topic.id, id: my_post.id, post: {title: new_title, body: new_body}\n\n       updated_post = assigns(:post)\n       expect(updated_post.id).to eq my_post.id\n       expect(updated_post.title).to eq new_title\n       expect(updated_post.body).to eq new_body\n     end\n\n     it \"redirects to the updated post\" do\n       new_title = RandomData.random_sentence\n       new_body = RandomData.random_paragraph\n\n-      put :update, id: my_post.id, post: {title: new_title, body: new_body}\n-      expect(response).to redirect_to my_post\n # #29\n+      put :update, topic_id: my_topic.id, id: my_post.id, post: {title: new_title, body: new_body}\n # #30\n+      expect(response).to redirect_to [my_topic, my_post]\n     end\n   end\n```\n\nAt __#28__ and __#29__ we update the `put :update` request to include the id of the parent topic.\n\nAt __#30__, we replace `redirect_to my_post` with `redirect_to [my_topic, my_post]` so that we'll be redirected to the posts __show__ view after we nest posts.\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n   describe \"DELETE destroy\" do\n     it \"deletes the post\" do\n-      delete :destroy, id: my_post.id\n # #31\n+      delete :destroy, topic_id: my_topic.id, id: my_post.id\n       count = Post.where({id: my_post.id}).size\n       expect(count).to eq 0\n     end\n\n-    it \"redirects to posts index\" do\n-      delete :destroy, id: my_post.id\n-      expect(response).to redirect_to posts_path\n+    it \"redirects to topic show\" do\n # #32\n+      delete :destroy, topic_id: my_topic.id, id: my_post.id\n # #33\n+      expect(response).to redirect_to my_topic\n     end\n   end\n end\n```\n\nAt __#31__ and __#32__ we update the `delete :destroy` request to include the id of the parent topic.\n\nAt __#33__, we want to be redirected to the topics __show__ view instead of the posts __index__ view.\n\n\nWith our tests ready, let's update `routes.rb` to nest posts:\n\n```ruby(config/routes.rb)\n Rails.application.routes.draw do\n\n-  resources :topics\n-  resources :posts\n+  resources :topics do\n # #34\n+    resources :posts, except: [:index]\n+  end\n\n   get 'about' => 'welcome#about'\n\n   root 'welcome#index'\n end\n```\n\nAt __#34__ we pass `resources :posts` to the `resources :topics` block. This nests the post routes under the topic routes.\n\nExamine the new post routes:\n\n```bash(Terminal)\n$ rake routes | grep post\n             topic_posts POST   /topics/:topic_id/posts(.:format)          posts#create\n          new_topic_post GET    /topics/:topic_id/posts/new(.:format)      posts#new\n         edit_topic_post GET    /topics/:topic_id/posts/:id/edit(.:format) posts#edit\n              topic_post GET    /topics/:topic_id/posts/:id(.:format)      posts#show\n                         PATCH  /topics/:topic_id/posts/:id(.:format)      posts#update\n                         PUT    /topics/:topic_id/posts/:id(.:format)      posts#update\n                         DELETE /topics/:topic_id/posts/:id(.:format)      posts#destroy\n```\n\nAs you can see in the output above, all post URLs are now scoped to a topic.\n\nThere's no longer an `index` route for posts. This is because the posts __index__ view is no longer needed. All posts will be displayed with respect to a topic now, on the topics __show__ view. Remove the `index` action from the `PostsController`:\n\n```ruby(app/controllers/posts_controller.rb)\n class PostsController < ApplicationController\n-  def index\n-    @posts = Post.all\n-  end\n ...\n```\n\nRemove `app/views/posts/index.html.erb` and stage the removal:\n\n```bash(Terminal)\n$ git rm app/views/posts/index.html.erb\n```\n\nRun the tests and we'll see seven failures, caused by the `PostsController`:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb\n...\n16 examples, 7 failures\n```\n\nLet's implement the code to pass the tests:\n\n```ruby(app/controllers/posts_controller.rb)\n class PostsController < ApplicationController\n   def show\n     @post = Post.find(params[:id])\n   end\n\n   def new\n+    @topic = Topic.find(params[:topic_id])\n     @post = Post.new\n   end\n\n   def create\n     @post = Post.new\n     @post.title = params[:post][:title]\n     @post.body = params[:post][:body]\n+    @topic = Topic.find(params[:topic_id])\n # #35\n+    @post.topic = @topic\n\n     if @post.save\n       flash[:notice] = \"Post was saved successfully.\"\n # #36\n-      redirect_to @post\n+      redirect_to [@topic, @post]\n     else\n       flash.now[:alert] = \"There was an error saving the post. Please try again.\"\n       render :new\n     end\n   end\n\n   def edit\n     @post = Post.find(params[:id])\n   end\n\n   def update\n     @post = Post.find(params[:id])\n     @post.title = params[:post][:title]\n     @post.body = params[:post][:body]\n\n     if @post.save\n       flash[:notice] = \"Post was updated successfully.\"\n # #37\n-      redirect_to @post\n+      redirect_to [@post.topic, @post]\n     else\n       flash.now[:alert] = \"There was an error saving the post. Please try again.\"\n       render :edit\n     end\n   end\n\n   def destroy\n     @post = Post.find(params[:id])\n\n     if @post.destroy\n       flash[:notice] = \"\"#{@post.title}\" was deleted successfully.\"\n # #38\n-       redirect_to posts_path\n+       redirect_to @post.topic\n     else\n       flash.now[:alert] = \"There was an error deleting the post.\"\n       render :show\n     end\n   end\n end\n```\n\nAt __#35__ we assign a topic to a post.\n\nAt __#36__ and __#37__ we change the `redirect` to use the nested post path.\n\nAt __#38__, when a post is deleted, we direct users to the topic **show** view.\n\nWith `PostsController` updated to reflect our nested routes, all the tests in `posts_controller_spec.rb` should pass. Run the tests again to confirm and then we'll proceed to updating our views:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb\n```\n\n## Refactor the Topics Show View\n\nThe topic **show** view includes a button that links to `new_post_path(@post)`. As the rake output shows, `new_post_path` is no longer available. (In fact, if you visit a topic's **show** view, you'll see a `NoMethodError` complaining about this.) We need to replace the old method with `new_topic_post_path` to reflect the nested route we generated in `routes.rb`:\n\n```erb(app/views/topics/show.html.erb)\n <h1><%= @topic.name %></h1>\n\n <%= link_to \"Edit Topic\", edit_topic_path, class: 'btn btn-success' %>\n <%= link_to \"Delete Topic\", @topic, method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure you want to delete this topic?' } %>\n\n <div class=\"row\">\n   <div class=\"col-md-8\">\n     <p class=\"lead\"><%= @topic.description %></p>\n     <% @topic.posts.each do |post| %>\n       <div class=\"media\">\n         <div class=\"media-body\">\n           <h4 class=\"media-heading\">\n <!-- #39 -->\n-            <%= link_to post.title, post %>\n+            <%= link_to post.title, topic_post_path(@topic, post) %>\n           </h4>\n <!-- #40 -->\n+          <small>\n+            submitted <%= time_ago_in_words(post.created_at) %> ago <br>\n+            <%= post.comments.count %> Comments\n+          </small>\n         </div>\n       </div>\n     <% end %>\n   </div>\n   <div class=\"col-md-4\">\n <!-- #41 -->\n-    <%= link_to \"New Post\", new_post_path(@topic), class: 'btn btn-success' %>\n+    <%= link_to \"New Post\", new_topic_post_path(@topic), class: 'btn btn-success' %>\n   </div>\n </div>\n```\n\nAt __#39__, we refactor how we link to individual posts using the `topic_post_path` method. This helper takes a topic and a post and generates a path to the posts __show__ view.\n\nAt __#40__, we add submission and comment details for each post in the **show** view.\n\nAt __#41__, we replace `new_post_path` with `new_topic_post_path` to reflect the nested route we generated in `routes.rb`.\n\nVisit a topic's **show** view, and confirm that there is no longer an error.\n\n## Refactor the Posts Show View\n\nEach link in the topic **show** view contains a properly nested and RESTful URL for its associated posts. Click on one of the links to an individual post, and you'll see an `Undefined Method edit_post_path` error.\n\n```erb(app/views/posts/show.html.erb)\n <h1><%= @post.title %></h1>\n\n <div class=\"row\">\n   <div class=\"col-md-8\">\n     <p><%= @post.body %></p>\n   </div>\n   <div class=\"col-md-4\">\n-    <%= link_to \"Edit\", edit_post_path(@post), class: 'btn btn-success' %>\n-    <%= link_to \"Delete Post\", @post, method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure you want to delete this post?' } %>\n // #42\n+    <%= link_to \"Edit\", edit_topic_post_path(@post.topic, @post), class: 'btn btn-success' %>\n // #43\n+    <%= link_to \"Delete Post\", [@post.topic, @post], method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure you want to delete this post?' } %>\n   </div>\n </div>\n```\n\nAt __#42__, we replace `edit_post_path` with `edit_topic_post_path`, which takes two arguments, a topic and a post.\n\nAt __#43__, we update `link_to` to take an array consisting of a topic and post, which it uses to build the link to delete a nested post.\n\nRefresh the post **show** view and the error should be resolved because we used valid methods to generate the URLs for the **Edit** and **Delete Post** buttons.\n\n## Refactor the Posts Edit and New Views\n\nIf you click on the **Edit** button in the post **show** view, you'll get another undefined method error. This is because `form_for` uses similar path conventions as `link_to`. You've learned how to fix this with the `link_to` method, and we'll use the same approach for `form_for`:\n\n```erb(app/views/posts/edit.html.erb)\n ...\n-    <%= form_for @post do |f| %>\n+    <%= form_for [@post.topic, @post] do |f| %>\n ...\n```\n\n```erb(app/views/posts/new.html.erb)\n-    <%= form_for @post do |f| %>\n+    <%= form_for [@topic, @post] do |f| %>\n```\n\nJust like `link_to`, `form_for` can take an array of objects instead of a single object to generate the correct paths for nested resources.\n\nRefresh the posts __edit__ view to confirm that we've resolved the error.\n\n## Top Notch Topics\n\nThe topics __index__ view is the gateway to our application, so we should give users an easy way to access it from any page by updating `application.html.erb`:\n\n```erb(app/views/layouts/application.html.erb)\n <!DOCTYPE html>\n <html>\n <head>\n   <title>Bloccit</title>\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n   <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>\n   <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>\n   <%= csrf_meta_tags %>\n </head>\n <body>\n   <div class=\"container\">\n     <ul class=\"nav nav-tabs\">\n       <li><%= link_to \"Bloccit\", root_path %></li>\n+      <li><%= link_to \"Topics\", topics_path %></li>\n       <li><%= link_to \"About\", about_path %></li>\n ...\n```\n\nVisit any page in Bloccit we'll see a link to our topics __index__ view. Create, update, and delete some topics and posts to confirm that everything is working as expected.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku. Because we added a migration in this checkpoint, we'll need to update the Production database:\n\n```bash(Terminal)\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Rails Generate](http://guides.rubyonrails.org/command_line.html#rails-generate) |The `rails generate` command uses templates to create many things, including models and controllers. Using generators can save you time by auto-generating boilerplate code. |\n| [Nested Resources](http://guides.rubyonrails.org/routing.html#nested-resources) | Some objects should be operated on within the context of another object. Nested resources represent this relationship with URLs that scope one object within another. |\n| [Code Refactoring](http://en.wikipedia.org/wiki/Code_refactoring) | Code refactoring is the process of restructuring existing computer code, without changing its external behavior. Refactoring is the process of continuously improving code, and, when done with strict TDD, without breaking the application.  |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n> As always, complete this assignment using TDD.\n\nWe may want to monetize Bloccit someday, so let's give it the ability to host sponsored posts. For this assignment, we'll create `SponsoredPost` which `belongs_to` `Topic`.\n\n1. Create a new model named `SponsoredPost`. It should have `title:string`, `body:text`, and `price:integer` attributes and reference a `Topic`.\n2. Associate `Topic` and `SponsoredPost` using `has_many` and `belongs_to` in the `Topic` and `SponsoredPost` models respectively.\n3. Generate a `SponsoredPostsController` with `show`, `new`, and `edit` actions.\n4. Nest `SponsoredPost` under `Topic` in `routes.rb`.\n5. Seed the database with `SponsoredPosts` via `seeds.rb`.\n6. Complete the `SponsoredPostsController` CRUD methods and views. Use [the `number_field` helper](http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-number_field) for the price field in the **new** and **edit** views.\n7. Update `TopicsController` and the topic **show** view to display a __New Sponsored Post__ button.\n8. Update the topic **show** view to display sponsored posts, beneath regular posts.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.",
          "roadmap_section_id": 120,
          "active_index": 34,
          "checkpoint_type": "normal",
          "position": 34,
          "points": 1,
          "ref": "8144a692-2b1a-435c-bcd7-40ad878e18b1|0"
        },
        {
          "id": 1647,
          "name": "Rails: Validations",
          "summary": "Validations: ensuring data is valid before persisting",
          "body": "<!-- { ids:[1647], name:'Rails: Validations', summary:'Validations: ensuring data is valid before persisting' } -->\n\n<center>\n  ![Validation](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-validation/validation.png)\n</center>\n\n> “I work hard for the audience. It's entertainment. I don't need validation.”\n>\n> — Denzel Washington\n\n## Validating Data\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/ttxaieex3p\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nThink of Bloccit's database as an exclusive club. To get in, you have to present yourself in the right way. The bouncer decides if you will be a good customer for the club or if you are likely to cause a ruckus and ruin the fun for everyone. Validation methods serve as a bouncer for our database and will not allow data to be inserted if the data doesn't look right.\n\nValidation methods are provided by `ActiveRecord` and allow us to define valid states for model attributes. Validations can prevent unwanted data from entering the database. Validation methods allow us to check for things like presence, length, numericality, format, and uniqueness.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n\n## Validation Specs\n\nLet's validate the `Post` model with the following rules. An instance of `Post` must:\n\n* have a title, body, and topic\n* have at least five characters in the title\n* have at least 20 characters in the body\n\n> There are numerous types of validations. The most common are `presence`, `length`, and `format`. The [Rails Guide](http://guides.rubyonrails.org/active_record_validations.html) on validations is a good reference to keep bookmarked.\n\nAdd the following tests to `post_spec.rb`:\n\n```ruby(spec/models/post_spec.rb)\n ...\n   it { is_expected.to belong_to(:topic) }\n\n+  it { is_expected.to validate_presence_of(:title) }\n+  it { is_expected.to validate_presence_of(:body) }\n+  it { is_expected.to validate_presence_of(:topic) }\n+\n+  it { is_expected.to validate_length_of(:title).is_at_least(5) }\n+  it { is_expected.to validate_length_of(:body).is_at_least(20) }\n+\n   describe \"attributes\" do\n     it \"has title and body attributes\" do\n       expect(post).to have_attributes(title: title, body: body)\n ...\n```\n\nAt __#1__, we test that `Post` validates the presence of `title`, `body`, and `topic`.\nAt __#2__, we test that `Post` validates the lengths of `title` and `body`.\n\nRun `post_spec.rb` to see that the five new tests fail:\n\n```bash(Terminal)\n$ rspec spec/models/post_spec.rb\n```\n\n## Validating Posts\n\nAdd the validations tested above to `Post` using the `validates` method:\n\n```ruby(app/models/post.rb)\n class Post < ActiveRecord::Base\n   belongs_to :topic\n   has_many :comments, dependent: :destroy\n\n+  validates :title, length: { minimum: 5 }, presence: true\n+  validates :body, length: { minimum: 20 }, presence: true\n+  validates :topic, presence: true\n end\n```\n\nRun `post_spec.rb` again to confirm that our validations satisfy our tests:\n\n```bash(Terminal)\n$ rspec spec/models/post_spec.rb\n```\n\n## Validations in Action\n\nExamine how these validations work by opening the Rails console and creating a new `Post` object:\n\n> Restart the console if it's already running.\n\n```ruby(Console)\n$ rails c\n>> my_post = Post.new\n=> #<Post id: nil, title: nil, body: nil, created_at: nil, updated_at: nil, topic_id: nil>\n```\n\nCheck to see if `my_post` is valid:\n\n```ruby(Console)\n>> my_post.valid?\n=> false\n```\n\nPrint the errors that make `my_post` invalid:\n\n```ruby(Console)\n>> my_post.errors\n=> #<ActiveModel::Errors:0x007fad729366c0 @base=#<Post id: nil, title: nil, body: nil, created_at: nil, updated_at: nil, topic_id: nil>, @messages={:title=>[\"is too short (minimum is 5 characters)\", \"can't be blank\"], :body=>[\"is too short (minimum is 20 characters)\", \"can't be blank\"], :topic=>[\"can't be blank\"]}>\n```\n\nPrint the complete error messages:\n\n```ruby(Console)\n>> my_post.errors.full_messages\n=> [\"Title is too short (minimum is 5 characters)\", \"Title can't be blank\", \"Body is too short (minimum is 20 characters)\", \"Body can't be blank\", \"Topic can't be blank\"]\n```\n\nPrint the `:title` error:\n\n```ruby(Console)\n>> my_post.errors[:title]\n=> [\"is too short (minimum is 5 characters)\", \"can't be blank\"]\n```\n\nSince `my_post` was created without values, it didn't meet the conditions we validate in `Post`. If you try to save it, the method will return `false` and fail to save. If you call the `save!` method on the post, it will throw an error.\n\n> Remember what [`!` does](http://dablog.rubypal.com/2007/8/15/bang-methods-or-danger-will-rubyist)?\n\n```ruby(Console)\n> my_post.save!\n   (0.1ms)  begin transaction\n   (0.1ms)  rollback transaction\nActiveRecord::RecordInvalid: Validation failed: Title is too short (minimum is 5 characters), Title can't be blank, Body is too short (minimum is 20 characters), Body can't be blank, Topic can't be blank\n```\n\n> Quick challenge: Create a new `Post` object from the console which satisfies all of the validations.\n\n## Displaying Validation Errors\n\nLet's change our post views to display errors raised by our validations. Because these changes will affect the forms on both the **new** and the **edit** views, it's a good time to demonstrate how to use partials to make our views DRY.\n\nOpen the **edit** view and make the following changes:\n\n```erb(app/views/posts/edit.html.erb)\n <h1>Edit Post</h1>\n\n <div class=\"row\">\n   <div class=\"col-md-4\">\n     <p>Guidelines for posts</p>\n     <ul>\n       <li>Make sure it rhymes.</li>\n       <li>Don't use the letter \"A\".</li>\n       <li>The incessant use of hashtags will get you banned.</li>\n     </ul>\n   </div>\n <div class=\"col-md-8\">\n-    <%= form_for [@post.topic, @post] do |f| %>\n-      <div class=\"form-group\">\n-        <%= f.label :title %>\n-        <%= f.text_field :title, class: 'form-control', placeholder: \"Enter post title\" %>\n-      </div>\n-      <div class=\"form-group\">\n-        <%= f.label :body %>\n-        <%= f.text_area :body, rows: 8, class: 'form-control', placeholder: \"Enter post body\" %>\n-      </div>\n-      <div class=\"form-group\">\n-        <%= f.submit \"Save\", class: 'btn btn-success' %>\n-      </div>\n-    <% end %>\n+    <%= render partial: 'form', locals: { topic: @post.topic, post: @post } %>\n   </div>\n </div>\n```\n\nWe just replaced a large chunk of code with a **partial**. Partials are fragments of view code, which are called from views. Partials are called with the `render` method. Rendering a partial is like copying and pasting view code from another file.\n\nWe've rendered a partial in the **edit** view, but this partial file doesn't yet exist. We need to create the partial and add the code we just removed from the **edit** view.\n\n> Why remove code from one view file, just to paste it in another? Partials make our code DRYer, clearer, and more modular. By isolating conceptual units in reusable files, we can call them from multiple views without repeating ourselves. Partials also make complex views more readable for developers.\n\n## Form Partial\n\nCreate a new file in `app/views/posts` named `_form.html.erb`. The underscore at the beginning of a file name lets Rails know that it's a partial. Add the code we deleted from the **edit** view to `_form.html.erb`:\n\n```erb(app/views/posts/_form.html.erb)\n <!-- #3 -->\n+<%= form_for [topic, post] do |f| %>\n+  <div class=\"form-group\">\n+    <%= f.label :title %>\n+     <%= f.text_field :title, class: 'form-control', placeholder: \"Enter post title\" %>\n+  </div>\n+  <div class=\"form-group\">\n+    <%= f.label :body %>\n+    <%= f.text_area :body, rows: 8, class: 'form-control', placeholder: \"Enter post body\" %>\n+  </div>\n+  <div class=\"form-group\">\n+    <%= f.submit \"Save\", class: 'btn btn-success' %>\n+  </div>\n+<% end %>\n```\n\nAt __#3__ we use the `topic` and `post` [local variables](http://guides.rubyonrails.org/layouts_and_rendering.html#passing-local-variables) we passed into the partial when we rendered it:\n\n```erb(app/views/posts/edit.html.erb)\n    <%= render partial: 'form', locals: { topic: @post.topic, post: @post } %>\n```\n\n> Our view is called `_form.html.erb`, while we render the `partial: 'form'`. This is a Rails convention for partial naming. If we don't follow it, the partial will not be found.\n\n`locals: { topic: @post.topic, post: @post }` passes local variables to the partial. `@post.topic` and `@post` are assigned to `topic` and `post`, respectively. This means we can refer to these local variables, rather than the `@post` __instance__ variable we used in the **edit** view.\n\n> Although the partial __does__ have access to `@post`, it's a better practice to use local variables. A primary reason is flexibility. We want to be able to render our partial on __any__ page, whether or not it has access to the same instance variables.\n\nStart the Rails server, navigate to the **edit** view, and make sure no errors appear. If the partial worked, the **edit** view should appear as it did before the refactor. The great thing about partials is that they're reusable. The form for creating new posts is the same as the form for editing, so let's refactor the **new** view next.\n\n## Refactor the Posts New View\n\nOpen the posts **new** view and make the following changes:\n\n```erb(app/views/posts/new.html.erb)\n <h1>New Post</h1>\n\n <div class=\"row\">\n\n   <div class=\"col-md-4\">\n\n     <p>Guidelines for posts</p>\n     <ul>\n       <li>Make sure it rhymes.</li>\n       <li>Don't use the letter \"A\".</li>\n       <li>The incessant use of hashtags will get you banned.</li>\n     </ul>\n   </div>\n\n   <div class=\"col-md-8\">\n\n-    <%= form_for [@topic, @post] do |f| %>\n-      <div class=\"form-group\">\n-        <%= f.label :title %>\n-        <%= f.text_field :title, class: 'form-control', placeholder: \"Enter post title\" %>\n-      </div>\n-      <div class=\"form-group\">\n-        <%= f.label :body %>\n-        <%= f.text_area :body, rows: 8, class: 'form-control', placeholder: \"Enter post body\" %>\n-      </div>\n-      <div class=\"form-group\">\n-        <%= f.submit \"Save\", class: 'btn btn-success' %>\n-      </div>\n-    <% end %>\n+    <%= render partial: 'form', locals: { topic: @topic, post: @post } %>\n   </div>\n </div>\n```\n\n> Partials are essentially the Rails view version of [extract-method refactoring](http://refactoring.com/catalog/extractMethod.html). By consolidating reused code, we make sure we only have to edit it in one location, and we can reuse it easily.\n\nVisit the **new** view and validate that it looks the same as it did prior to the refactor.\n\nWhile we're on **new** view, let's create a new post, leaving the title and body blank. We should see an error that looks like this:\n\n![new-post-error](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-validation/new-post-error.png)\n\nThis error isn't very informative. In the next section we'll refactor to show the error messages raised by the `validates` methods.\n\n## The Application Helper\n\nStyling the elements on the form partial is a little tricky. If the form displays errors, we want a certain style, and if the form doesn't display errors, we want a different style. We could include conditional logic directly in our view, but Rails conventions strongly suggest keeping as much logic as possible out of the view. Views cluttered with if statements are hard to read, hard to maintain, and confusing. We'll use the `ApplicationHelper` to implement a DRY solution for toggling the `div` classes we'll need to display an error-full or error-less view.\n\n> Methods in `ApplicationHelper` can be used across our application. It's a `Module` that Rails includes with other classes in our app. Any public method we write in `ApplicationHelper` will be available in all views.\n\nOpen `app/helpers/application_helper.rb` and add the following code:\n\n```ruby(app/helpers/application_helper.rb)\n module ApplicationHelper\n # #4\n+  def form_group_tag(errors, &block)\n+    css_class = 'form-group'\n+    css_class << ' has-error' if errors.any?\n# #5\n+    content_tag :div, capture(&block), class: css_class\n+  end\n end\n```\n\nAt __#4__, we define a method named `form_group_tag` which takes two arguments. The first argument is an array of errors, and the second is a block.\n\n> The `&` turns the block into a [`Proc`](http://ruby-doc.org/core-2.2.0/Proc.html), which we've seen before but haven't named. A `Proc` is a block that can be reused like a variable.\n\nAt __#5__, the `content_tag` helper method is called. This method is used to build the HTML and CSS to display the form element and any associated errors.\n\nHelpers are written in Ruby and usually return HTML. The [`content_tag`](http://apidock.com/rails/ActionView/Helpers/TagHelper/content_tag) is one such method. It takes a symbol argument, a block, and an options hash. It then creates the symbol-specified HTML tag with the block contents, and if specified, the options.\n\nWe need a different `div` based on the errors raised by the `validates` method, so let's use `form_group_tag` in the form partial:\n\n```erb(app/view/posts/_form.html.erb)\n <%= form_for [topic, post] do |f| %>\n-  <div class=\"form-group\">\n+  <% if post.errors.any? %>\n # #6\n+    <div class=\"alert alert-danger\">\n # #7\n+      <h4><%= pluralize(post.errors.count, \"error\") %>.</h4>\n+      <ul>\n+        <% post.errors.full_messages.each do |msg| %>\n+          <li><%= msg %></li>\n+        <% end %>\n+      </ul>\n+    </div>\n+  <% end %>\n  # #8\n+  <%= form_group_tag(post.errors[:title]) do %>\n     <%= f.label :title %>\n     <%= f.text_field :title, class: 'form-control', placeholder: \"Enter post title\" %>\n-  </div>\n-  <div class=\"form-group\">\n+  <% end %>\n  # #9\n+  <%= form_group_tag(post.errors[:body]) do %>\n     <%= f.label :body %>\n     <%= f.text_area :body, rows: 8, class: 'form-control', placeholder: \"Enter post body\" %>\n-  </div>\n+  <% end %>\n   <div class=\"form-group\">\n     <%= f.submit \"Save\", class: 'btn btn-success' %>\n   </div>\n <% end %>\n```\n\nAt __#6__, if there are any validation errors, we display an alert with the number of errors and their messages.\nAt __#7__, we use the [`pluralize` method](http://apidock.com/rails/ActionView/Helpers/TextHelper/pluralize) to pluralize \"error\" if there is more than one error.\nAt __#8__, we use `form_group_tag` to display `title` errors.\nAt __#9__, we use `form_group_tag` to display `body` errors.\n\nOpen the post **new** view and submit a new post with no `title` or `body`. Validate that you see the correctly formatted error messages. Also submit a new post with a valid `title` and `body` to ensure that, given valid inputs, a user can successfully create a new post.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Data validation](http://en.wikipedia.org/wiki/Data_validation) | Data validation is the process of ensuring that the data received by a program is clean, correct, and useful. |\n| [Partial templates](http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials) | Partial templates - called \"partials\" - split the rendering process into manageable segments. Partials allow the code which renders a particular piece of HTML to be moved to its own file. |\n| [Form Helpers](http://guides.rubyonrails.org/form_helpers.html) | Form helpers generate HTML form markup. They are used to reduce the burden of writing and maintaining HTML form markup. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nIn addition to validating posts, we should validate topics. Use TDD to complete this assignment.\n\n1. Add a validation to ensure that topic names are at least five characters long and descriptions are at least 15 characters long.\n2. Test your validation by creating a topic in the Rails console with a four character name.\n3. Create a form partial for topics.\n4. Refactor the topic **edit** and **new** views to use the form partial.\n5. Use the `form_group_tag` helper method created in the checkpoint to display errors for invalid topics.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center><script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_uox306c4uo popover=true popoverAnimateThumbnail=true popoverContent=link\" style=\"display:inline\"><a href=\"#\">Validations Solution</a></div>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 35,
          "checkpoint_type": "normal",
          "position": 35,
          "points": 1,
          "ref": "8f808ae0-130e-4056-bd21-8c15fbea4fee|0"
        },
        {
          "id": 1641,
          "name": "Rails: Authentication - User Model",
          "summary": "User Model: representing users for authorization using models and password hashing",
          "body": "<!-- { ids:[1641], name:'Rails: Authentication - User Model', summary:'User Model: representing users for authorization using models and password hashing' } -->\n<center>\n  ![babe-ruth](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-authentication/babe_ruth.jpg)\n</center>\n\n> “Truth is a point of view, but authenticity can't be faked.”\n>\n> — Peter Guber\n\n## Modeling Users\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/6liwt7vv8r\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nUser authentication systems determine whether a user is who they claim to be. They allow users to sign up, sign in, and sign out. We'll build the foundation of Bloccit's user authentication system by creating the `User` model.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Custom Authentication\n\nThere are some popular authentication systems for Rails, including [Devise](https://github.com/plataformatec/devise), [OmniAuth](https://github.com/intridea/omniauth), and [AuthLogic](https://github.com/binarylogic/authlogic). While these systems offer robust functionality, building our own solution will give us a deeper understanding of authentication-based  models, controllers, and routing.\n\n## Generate `User`\n\nBefore we build authentication functionality, we'll need a user to authenticate. Generate a `User` model to represent the users of Bloccit with the following attributes:\n\n| **Attribute** | **Description** |\n| :-- | :-- |\n| `name` | A string to represent the user's name. |\n| `email` | A string to represent the user's email.  |\n| `password_digest` | A string to store the user's [hashed](https://en.wikipedia.org/wiki/Hash_function) password. |\n\n```bash(Terminal)\n$ rails generate model User name:string email:string password_digest:string\n```\n\nRun the migration:\n\n```bash(Terminal)\n$ rake db:migrate\n```\n\nWhen we migrate the database, we are ultimately changing the database's schema, which describes the layout, structure, and contents of the database. Open `db/schema.rb` and review the schema.\n\n`schema.rb` serves two important purposes. It represents the current state of the database, which can be difficult to deduce from the migration files. It also populates the database schema before tests are executed.\n\n## Test `User`\n\nLet's write our first specs for `User`:\n\n```Ruby(spec/models/user_spec.rb)\n require 'rails_helper'\n\n RSpec.describe User, type: :model do\n-  pending \"add some examples to (or delete) #{__FILE__}\"\n+  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"password\") }\n+  # Shoulda tests for name\n+  it { is_expected.to validate_presence_of(:name) }\n+  it { is_expected.to validate_length_of(:name).is_at_least(1) }\n+\n+  # Shoulda tests for email\n+  it { is_expected.to validate_presence_of(:email) }\n+  it { is_expected.to validate_uniqueness_of(:email) }\n+  it { is_expected.to validate_length_of(:email).is_at_least(3) }\n+  it { is_expected.to allow_value(\"user@bloccit.com\").for(:email) }\n+\n+  # Shoulda tests for password\n+  it { is_expected.to validate_presence_of(:password) }\n+  it { is_expected.to have_secure_password }\n+  it { is_expected.to validate_length_of(:password).is_at_least(6) }\n+\n+  describe \"attributes\" do\n+    it \"should have name and email attributes\" do\n+      expect(user).to have_attributes(name: \"Bloccit User\", email: \"user@bloccit.com\")\n+    end\n+  end\n end\n```\n\nAs with our other model tests, the tests above test for field validation and attributes. Let's simulate and add tests for an invalid user:\n\n```Ruby(spec/models/user_spec.rb)\n...\n\n # #1\n+  describe \"invalid user\" do\n+    let(:user_with_invalid_name) { User.new(name: \"\", email: \"user@bloccit.com\") }\n+    let(:user_with_invalid_email) { User.new(name: \"Bloccit User\", email: \"\") }\n+\n+    it \"should be an invalid user due to blank name\" do\n+      expect(user_with_invalid_name).to_not be_valid\n+    end\n+\n+    it \"should be an invalid user due to blank email\" do\n+      expect(user_with_invalid_email).to_not be_valid\n+    end\n+\n+  end\n end\n```\n\nAt __#1__, we wrote a test that does not follow the same conventions as our previous tests. We are testing for a value that we know should be invalid. We call this a **true negative**, as we are testing for a value that _shouldn't_ exist. A **true positive** follows the reciprocal pattern and tests for a known and valid value. True negatives are a useful testing strategy, because if we only test for values that we know should exist, we may not catch values that shouldn't.\n\nRun the tests, and we'll our specs fail:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n```\n\n## `User` Model\n\nLet's add the functionality we just tested for in `user_spec.rb`:\n\n```Ruby(app/models/user.rb)\n class User < ActiveRecord::Base\n # #2\n+  before_save { self.email = email.downcase }\n\n # #3\n+  validates :name, length: { minimum: 1, maximum: 100 }, presence: true\n # #4\n+ validates :password, presence: true, length: { minimum: 6 }, unless: :password_digest\n+ validates :password, length: { minimum: 6 }, allow_blank: true\n # #5\n+  validates :email,\n+            presence: true,\n+            uniqueness: { case_sensitive: false },\n+            length: { minimum: 3, maximum: 254 }\n\n # #6\n+  has_secure_password\n end\n```\n\nAt __#2__, we register an inline callback directly after the `before_save` [callback](http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html). `{ self.email = email.downcase }` is the code that will run when the callback executes.\n\nPer Ruby's documentation, **\"callbacks are hooks into the life cycle of an Active Record object that allow you to trigger logic before or after an alteration of the object state.\"** Callbacks are similar to receiving mail that has the \"return service requested\" mandate, along with a form to complete. As the receiver of the mail, we are requested to return an envelope with the completed form. The requester in this example is analogous to a `User` in our code. `User` is requesting that the database execute `{ self.email = email.downcase }`. The database is analogous to the receiver of the mail and is asked to execute `{ self.email = email.downcase }`.\n\nAt __#3__, we use Ruby's `validates` function to ensure that `name` is present and has a maximum and minimum length.\n\nAt __#4__, we validate password with two separate validations:\n\n* The first validation executes if `password_digest` is `nil`. This ensures that when we create a new user, they have a valid password.\n* The second validation ensures that when updating a user's password, the updated password is also six characters long. allow_blank: true skips the validation if no updated password is given. This allows us to change other attributes on a user without being forced to set the password.\n\nAt __#5__, we validate that `email` is present, unique, case insensitive, has a minimum length, has a maximum length, and that it is a properly formatted email address.\n\nAt __#6__, we use Ruby's `has_secure_password`. `has_secure_password` [\"adds methods to set and authenticate against a BCrypt password. This mechanism requires you to have a password_digest attribute.\"](http://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password) This function abstracts away much of the complexity dealing with sophisticated encryption algorithms we would have to write to securely save passwords. `has_secure_password` requires a `password_digest` attribute on the model it is applied to. `has_secure_password` creates two virtual attributes, `password` and `password_confirmation` that we use to set and save the password.\n\nTo use `has_secure_password`, we need to install [`BCrypt`](https://rubygems.org/gems/bcrypt-ruby/versions/3.1.5). `BCrypt` is a module that encapsulates complex encryption algorithms. `BCrypt` takes a plain text password and turns it into an unrecognizable string of characters using an encryption algorithm. This way, our password is safe even if someone gains access to our database.\n\nLet's add `BCrypt` to our Gemfile. Add it to the bottom of the Gemfile, outside of any blocks:\n\n```Ruby(Gemfile)\n...\n\ngem 'bootstrap-sass'\n\n+# Used for encrypting User passwords\n+gem 'bcrypt'\n\n...\n```\n\nAs usual after adding a gem to the Gemfile, we need to install it:\n\n```bash(Terminal)\n$ bundle install\n\n...\n```\n\nLet's run our specs again:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n...............\n\nFinished in 0.111 seconds (files took 1.41 seconds to load)\n12 examples, 0 failures\n```\n\nOur specs now pass and we are in the green phase of TDD. We still need to add user routes though:\n\n```Ruby(config/routes.rb)\n...\n   resources :topics do\n     resources :posts, except: [:index]\n   end\n\n # #7\n+  resources :users, only: [:new, :create]\n\n...\n```\n\nAt __#7__, we create routes for `new` and `create` actions. The `only` hash key will prevent Rails from creating unnecessary routes.\n\nRun `rake routes` to see the user routes that were generated:\n\n```bash(Terminal)\n$ rake routes | grep user\n```\n\nWe're now able to represent and store users in our app.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.\n\n## Recap\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Active Record Callbacks](http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html) | Callbacks are a convenient and powerful way to ensure that logic happens before or after an operation is performed. |\n| [Active Record Validations](http://guides.rubyonrails.org/active_record_validations.html) | Validations act as constraints on model attributes. |\n| [Regular Expressions](https://en.wikipedia.org/wiki/Regular_expression) | A regular expression defines a specific character pattern that is used to match against a string. If you want to review regular expressions in more depth, [regexr.com](http://regexr.com/) has an online tool to experiment with. |\n| [`has_secure_password`](http://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password) | Integrates with `BCrypt` to provide safe authentication. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nAdd another callback to `User`. The callback should format all names in the same manner, by capitalizing the first letter of both the first and last names of a given user. The callback should follow these instructions for formatting:\n\n1. Run before `User` is saved.\n2. Split the user's `name` on a space (e.g. between a first name and a last name). Loop over each name and uppercase the first letter. Re-combine the first and last names with a space in-between and save it to the `name` attribute.\n3. Your solution does _not_ have to check for an existing name that is properly formatted. For example, \"Steve Jobs\" is properly formatted, but your solution should work on it anyways.\n4. Write your solution using TDD.\n\nThese functions may help you complete this assignment:\n\n* [`String#split`](http://ruby-doc.org/core-2.2.0/String.html#method-i-split)\n* [`String#capitalize`](http://ruby-doc.org/core-2.2.0/String.html#method-i-capitalize)\n* [`Array#join`](http://ruby-doc.org/core-2.2.0/Array.html#method-i-join)\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_kyl8q2clrd popover=true popoverAnimateThumbnail=true popoverContent=link\" style=\"display:inline\"><a href=\"#\">Authentication User Model Solution</a></div>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 36,
          "checkpoint_type": "normal",
          "position": 36,
          "points": 1,
          "ref": "b1c2a389-b9f0-40e8-9739-bb9b2d4f1c60|0"
        },
        {
          "id": 1642,
          "name": "Rails: Authentication - Signing Up",
          "summary": "Signing Up: allowing users to create accounts and sign up Bloccit",
          "body": "<center>\n  ![Seal of Authenticity](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-authenitcation-signup/banner.png)\n</center>\n\n> “Honesty and transparency make you vulnerable. Be honest and transparent anyway.”\n>\n> —  Mother Theresa\n\n## Signing Up\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/iy7wcd5swv\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\nBloccit has the ability to model and persist users, but we have no way of creating a user or signing up for the application. We'll implement sign up in this checkpoint.\n\n## `UsersController`\n\nTo create users, we'll need a controller. Create the `UsersController`:\n\n```bash(Terminal)\n$ rails generate controller Users\n```\n\nStart the Rails server and open [localhost:3000/users/new](http://localhost:3000/users/new). We see an error stating that **\"The action 'new' could not be found for UsersController\"**. This is because we haven't created actions for `UsersController` and we don't have the proper routes in place. We'll write `UsersController` using TDD, as usual.\n\nAdd the following code in `users_controller_spec.rb`:\n\n```Ruby(spec/controllers/users_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe UsersController, type: :controller do\n # #1\n+  let(:new_user_attributes) do\n+    {\n+        name: \"BlocHead\",\n+        email: \"blochead@bloc.io\",\n+        password: \"blochead\",\n+        password_confirmation: \"blochead\"\n+    }\n+  end\n end\n```\n\nAt __#1__, we create a hash of attributes named `new_user_attributes` so we can use them easily throughout our spec.\n\n## `new` Action\n\n```Ruby(spec/controllers/users_controller_spec.rb)\n ...\n\n # #2\n+  describe \"GET new\" do\n+    it \"returns http success\" do\n+      get :new\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"instantiates a new user\" do\n+      get :new\n+      expect(assigns(:user)).to_not be_nil\n+    end\n+  end\n\n ...\n```\n\nAt __#2__, we test the `new` action for HTTP success when issuing a `GET`. The first test expects the response to return an HTTP response code of 200. The second test expects `new` to instantiate a new user.\n\nRun the spec, and see that we have two failing tests.\n\n```bash(Terminal)\n$ rspec spec/controllers/users_controller_spec.rb\n```\n\nLet's write the implementation code for `new` and pass these tests:\n\n```Ruby(app/controllers/users_controller.rb)\n class UsersController < ApplicationController\n+  def new\n+    @user = User.new\n+  end\n end\n```\n\nLet's also create the __new__ view:\n\n```bash(terminal)\n$ touch app/views/users/new.html.erb\n```\n\nAs before, we created an instance variable named `@user` to be used by the __new__ view's form. Run the spec again and our two tests should pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/users_controller_spec.rb\n```\n\n## `create` Action\n\n`create` is the action that is called when the **new** view's form is submitted with valid attributes. Let's write the tests first:\n\n```Ruby(spec/controllers/users_controller_spec.rb)\n ...\n\n # #3\n+  describe \"POST create\" do\n+    it \"returns an http redirect\" do\n+      post :create, user: new_user_attributes\n+      expect(response).to have_http_status(:redirect)\n+    end\n+\n # #4\n+    it \"creates a new user\" do\n+      expect{\n+        post :create, user: new_user_attributes\n+      }.to change(User, :count).by(1)\n+    end\n+\n # #5\n+    it \"sets user name properly\" do\n+      post :create, user: new_user_attributes\n+      expect(assigns(:user).name).to eq new_user_attributes[:name]\n+    end\n+\n # #6\n+    it \"sets user email properly\" do\n+      post :create, user: new_user_attributes\n+      expect(assigns(:user).email).to eq new_user_attributes[:email]\n+    end\n+\n # #7\n+    it \"sets user password properly\" do\n+      post :create, user: new_user_attributes\n+      expect(assigns(:user).password).to eq new_user_attributes[:password]\n+    end\n+\n # #8\n+    it \"sets user password_confirmation properly\" do\n+      post :create, user: new_user_attributes\n+      expect(assigns(:user).password_confirmation).to eq new_user_attributes[:password_confirmation]\n+    end\n+  end\n end\n```\n\nAt __#3__, we test the `create` action for HTTP success when issuing a `POST` with `new_user_attributes` set as the params hash.\n\nAt __#4__, we test that the database count on the users table increases by one when we issue a `POST` to `create`.\n\nAt __#5__, we test that we set `user.name` properly when creating a user.\n\nAt __#6__, we test that we set `user.email` properly when creating a user.\n\nAt __#7__, we test that we set `user.password` properly when creating a user.\n\nAt __#8__, we test that we set `user.password_confirmation` properly when creating a user.\n\nRun the spec to see the six new failures:\n\n```bash(Terminal)\n$ rspec spec/controllers/users_controller_spec.rb\n```\n\nLet's pass these tests by updating `UsersController` with a `create` action:\n\n```Ruby(app/controllers/users_controller.rb)\n class UsersController < ApplicationController\n   def new\n     @user = User.new\n   end\n\n+  def create\n # #9\n+    @user = User.new\n+    @user.name = params[:user][:name]\n+    @user.email = params[:user][:email]\n+    @user.password = params[:user][:password]\n+    @user.password_confirmation = params[:user][:password_confirmation]\n+\n # #10\n+    if @user.save\n+      flash[:notice] = \"Welcome to Bloccit #{@user.name}!\"\n+      redirect_to root_path\n+    else\n+      flash.now[:alert] = \"There was an error creating your account. Please try again.\"\n+      render :new\n+    end\n+  end\n\n end\n```\n\nAt __#9__, we create a new user with `new` and then set the corresponding attributes from the params hash.\n\nAt __#10__, we `save` the new user to the database. If the database `save` is successful, we add a `flash` message and then redirect the user to the root path. Otherwise, we display an error and render the __new__ view.\n\nRun the spec again and our six tests pass.\n\n> Remember that we already created `new` and `create` routes in the previous checkpoint, so we do not need to modify `routes.rb` at this point, as we have done in the past with other controllers.\n\n## HTML\n\nLet's build the views for creating users. Open the users __new__ view and add the following:\n\n```Ruby(app/views/users/new.html.erb)\n+<h2>Sign up</h2>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-8\">\n+    <%= form_for @user do |f| %>\n <!-- #11 -->\n+      <% if @user.errors.any? %>\n+        <div class=\"alert alert-danger\">\n+          <h4><%= pluralize(@user.errors.count, \"error\") %>.</h4>\n+          <ul>\n+            <% @user.errors.full_messages.each do |msg| %>\n+              <li><%= msg %></li>\n+            <% end %>\n+          </ul>\n+        </div>\n+      <% end %>\n <!-- #12 -->\n+      <%= form_group_tag(@user.errors[:name]) do %>\n+        <%= f.label :name %>\n+        <%= f.text_field :name, autofocus: true, class: 'form-control', placeholder: \"Enter name\" %>\n+      <% end %>\n+      <%= form_group_tag(@user.errors[:email]) do %>\n+        <%= f.label :email %>\n+        <%= f.email_field :email, class: 'form-control', placeholder: \"Enter email\" %>\n+      <% end %>\n+      <%= form_group_tag(@user.errors[:password]) do %>\n+        <%= f.label :password %>\n+        <%= f.password_field :password, class: 'form-control', placeholder: \"Enter password\" %>\n+      <% end %>\n+      <%= form_group_tag(@user.errors[:password_confirmation]) do %>\n+        <%= f.label :password_confirmation %>\n+        <%= f.password_field :password_confirmation, class: 'form-control', placeholder: \"Enter password confirmation\" %>\n+      <% end %>\n+      <div class=\"form-group\">\n+        <%= f.submit \"Sign up\", class: 'btn btn-success' %>\n+      </div>\n+    <% end %>\n+  </div>\n+</div>\n```\n\nAt __#11__, we check the `errors` hash on `@user`. The `errors` hash is provided by [`ActiveModel:Errors`](http://api.rubyonrails.org/classes/ActiveModel/Errors.html). If there are errors with `@user`, such as invalid attributes, we display the corresponding error messages.\n\nAt __#12__, we add form fields for `name` and `email`, as well as the virtual attributes provided by `has_secure_password`: `password` and `password_confirmation`.\n\nIt's been a while since we updated our home page. Let's use this opportunity to enhance the home page with an improved design and a call-to-action for signing up:\n\n```Ruby(app/views/welcome/index.html.erb)\n-<h1>Welcome to Bloccit</h1>\n-<p id=\"index-title\">This is the home page for Bloccit.</p>\n-<div class=\"posts\">Post 1 goes here.</div>\n-<div class=\"posts\">Post 2 goes here.</div>\n-<section>I am the content in a section element.</section>\n\n+<br>\n+<div class=\"jumbotron\">\n+  <h1>Bloccit</h1>\n+  <p>Bloccit is a resource for sharing links with your friends!</p>\n+  <p>\n+    <%= link_to \"Sign Up\", new_user_path, class: 'btn btn-primary' %> today!\n+  </p>\n+</div>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-4\">\n+    <h2>Solves world hunger</h2>\n+    <p>Bloccit will deliver food and water to those in need, all over the world.</p>\n+  </div>\n+  <div class=\"col-md-4\">\n+    <h2>Eliminates poverty</h2>\n+    <p>Bloccit will deliver money and education to those in need, all over the world.</p>\n+  </div>\n+  <div class=\"col-md-4\">\n+    <h2>Makes you better looking</h2>\n+    <p>Bloccit will make you better looking: it's scientifically proven to make men look like Ryan Gosling and women look like Shakira.</p>\n+  </div>\n+</div>\n```\n\nLet's also add a **Sign Up** link to the top navigation:\n\n```HTML(app/views/layouts/application.html.erb)\n...\n\n   <ul class=\"nav nav-tabs\">\n     <li><%= link_to \"Bloccit\", root_path %></li>\n     <li><%= link_to \"Topics\", topics_path %></li>\n     <li><%= link_to \"About\", about_path %></li>\n\n+    <div class=\"pull-right user-info\">\n+      <%= link_to \"Sign Up\", new_user_path %>\n+    </div>\n  </ul>\n\n  <% if flash[:notice] %>\n\n...\n```\n\n## CSS Housekeeping\n\nWhile we're updating our home page, we can improve its appearance by adding some breathing room around our tap nav elements. Add the following class selectors:\n\n```css(app/assets/stylesheets/application.scss)\n ...\n @import \"bootstrap\";\n\n+.user-info {\n+  margin-top: 9px;\n+}\n+\n+.nav {\n+  margin-top: 5px;\n+}\n```\n\nTry creating valid and invalid users. Your results should look similar to the images below. First for a valid user:\n\n<center>\n![Successful User Creation](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-authenitcation-signup/successful-user-signup.png)\n</center>\n\n... and if you try to create an invalid user, with a mismatching Password and Password Confirmation:\n\n<center>\n![Failed User Creation](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-authenitcation-signup/failed-user-signup.png)\n</center>\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Deploy your updated master branch to production:\n\n```bash(Terminal)\n$ git push heroku master\n```",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nLet's add a static confirmation HTML page after a user submits the sign up form. The confirmation should verify the name and email address they entered by displaying the values they entered and asking them if they are correct.\n\n1. Create a new view for confirmation. It should look something like this:\n\n  <center>\n  ![Confirmation](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-authenitcation-signup/confirmation.png)\n  </center>\n\n2. Your form in `users/new.html.erb` will need to point to the new confirmation page. You can use `:url => { :action => :confirm }` in `form_for` to accomplish this:\n\n  ```Ruby(app/views/users/new.html.erb)\n  ...\n\n  <%= form_for @user, :url => { :action => :confirm } do |f| %>\n\n  ...\n  ```\n\n3. Add a route for your confirmation page. The route should be a `POST` to 'users/confirm' and point to `users#confirm`.\n\n4. Create a `confirm` action in `UsersController`. `confirm` should create a new user from the params hash and set its attributes appropriately. Send the params hash back to the `create` action in `UsersController` to save the params to the database after user confirmation. Use a button in the confirm form to achieve this:\n\n  `<%= button_to \"Yes\", {controller: \"users\", action: \"create\", params: params}, class: 'btn btn-success' %>`\n\n5. When a user clicks the \"No\" button it should take them back to the initial sign up view.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_embed wistia_async_lo965qun1z popover=true popoverAnimateThumbnail=true popoverContent=link\" style=\"display:inline\"><a href=\"#\">Authentication Sign Up Solution</a></div>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 37,
          "checkpoint_type": "normal",
          "position": 37,
          "points": 1,
          "ref": "9553ae36-d732-435e-b3cb-d77cbe741e30|0"
        },
        {
          "id": 1734,
          "name": "Rails: Authentication - Signing In",
          "summary": "Signing In: allowing users to sign into Bloccit with persistent sessions",
          "body": "<center>\n  ![Session Lager](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-authentication-login/Session-Page-Banner.jpg)\n</center>\n\n> “Milk is for babies. When you grow up you have to drink beer.”\n>\n> — Arnold Schwarzenegger\n\n## Signing In\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/tp6prfeod4\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nNow that users can _sign up_ for Bloccit, they'll need to be able to _sign in_. Signing in to an application requires user information to persist while a user is signed in to Bloccit. That is, we must authenticate and retain user information so that we know who the user is until they sign out. We'll use a [session object](https://en.wikipedia.org/wiki/Session_%28computer_science%29) to persist a user's information after they sign in to Bloccit.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Sessions\n\nThere are many ways to implement a session object. The canonical implementation of a session is an [HTTP cookie](https://en.wikipedia.org/wiki/HTTP_cookie) and is used by many web applications, including Ruby on Rails applications. We'll use a combination of our own code plus Rails' [session object](http://guides.rubyonrails.org/security.html#sessions) to implement sessions in Bloccit.\n\nSessions are tracked and persisted by storing values in the client's cookies. They persist for a duration of time, or a duration based on action (i.e. sign in and sign out). Our session object will persist a user's information while they are signed in to Bloccit.\n\nGenerate a session controller without any actions:\n\n```bash(Terminal)\n$ rails generate controller Sessions\n```\n\nWe'll use this controller to create and destroy a user's session.\n\n## TDD the `SessionsController`\n\nLet's TDD the routing functions for our session object:\n\n```Ruby(spec/controllers/sessions_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe SessionsController, type: :controller do\n+  let(:my_user) { User.create!(name: \"Blochead\", email: \"blochead@bloc.io\", password: \"password\") }\n+\n+  describe \"GET new\" do\n+    it \"returns http success\" do\n+      get :new\n+      expect(response).to have_http_status(:success)\n+    end\n+  end\n+\n+  describe \"POST sessions\" do\n+    it \"returns http success\" do\n+      post :create, session: {email: my_user.email}\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"initializes a session\" do\n+      post :create, session: {email: my_user.email, password: my_user.password}\n+      expect(session[:user_id]).to eq my_user.id\n+    end\n+\n+    it \"does not add a user id to session due to missing password\" do\n+      post :create, session: {email: my_user.email}\n+      expect(session[:user_id]).to be_nil\n+    end\n+\n+    it \"flashes #error with bad email address\" do\n+      post :create, session: {email: \"does not exist\"}\n+      expect(flash.now[:alert]).to be_present\n+    end\n+\n+    it \"renders #new with bad email address\" do\n+      post :create, session: {email: \"does not exist\"}\n+      expect(response).to render_template :new\n+    end\n+\n+    it \"redirects to the root view\" do\n+      post :create, session: {email: my_user.email, password: my_user.password}\n+      expect(response).to redirect_to(root_path)\n+    end\n+  end\n end\n```\n\nRun the spec to see the seven new examples and failures:\n\n```bash(Terminal)\n$ rspec spec/controllers/sessions_controller_spec.rb\n```\n\nLet's add some tests for `destroy`:\n\n```Ruby(spec/controllers/sessions_controller_spec.rb)\n...\n\n+  describe \"DELETE sessions/id\" do\n+    it \"render the #welcome view\" do\n+      delete :destroy, id: my_user.id\n+      expect(response).to redirect_to root_path\n+    end\n+\n+    it \"deletes the user's session\" do\n+      delete :destroy, id: my_user.id\n+      expect(assigns(:session)).to be_nil\n+    end\n+\n+    it \"flashes #notice\" do\n+      delete :destroy, id: my_user.id\n+      expect(flash[:notice]).to be_present\n+    end\n+  end\n\n...\n```\n\nWe have tests for signing in. Run them and see that all ten fail.\n\nLet's add a test to `users_controller_spec.rb` that checks a user is signed in after signing up:\n\n```Ruby(spec/controllers/users_controller_spec.rb)\n...\n     it \"sets user password_confirmation properly\" do\n       post :create, user: new_user_attributes\n       expect(assigns(:user).password_confirmation).to eq new_user_attributes[:password_confirmation]\n     end\n\n+    it \"logs the user in after sign up\" do\n+      post :create, user: new_user_attributes\n+      expect(session[:user_id]).to eq assigns(:user).id\n+    end\n   end\n end\n```\n\nNext, we'll code the actions in the `SessionsController` to pass these tests.\n\n## `SessionsController`\n\nPer our spec, we need `new`, `create`, and `destroy` actions for `SessionsController`:\n\n```Ruby(app/controllers/sessions_controller.rb)\n class SessionsController < ApplicationController\n+ def new\n+ end\n+\n+ def create\n # #1\n+   user = User.find_by(email: params[:session][:email].downcase)\n\n # #2\n+   if user && user.authenticate(params[:session][:password])\n+     create_session(user)\n+     flash[:notice] = \"Welcome, #{user.name}!\"\n+     redirect_to root_path\n+   else\n+     flash.now[:alert] = 'Invalid email/password combination'\n+     render :new\n+   end\n+ end\n+\n+ def destroy\n # #3\n+   destroy_session(current_user)\n+   flash[:notice] = \"You've been signed out, come back soon!\"\n+   redirect_to root_path\n+ end\n end\n```\n\nAt __#1__, we search the database for a user with the specified email address in the `params` hash. We use `downcase` to normalize the email address since the addresses stored in the database are stored as lowercase strings.\n\nAt __#2__, we verify that `user` is not `nil` and that the password in the `params` hash matches the specified password. The conditional statement will exit early if `user` is `nil`, because it checks for that first. This order of execution will prevent a null pointer exception when `user.authenticate` is called if `user` is `nil`. If the `user` is successfully authenticated, we call a `create_session` function (which we have yet to define), display a flash notice, and then redirect the user to `root_path`. If authentication was not successful, we flash a warning message and render the __new__ view.\n\nAt __#3__, we define `destroy`. This method will delete a user's session. `destroy` logs the user out by calling `destroy_session(current_user)`, flashes a notice that they've been logged out, and redirects them to `root_path`.\n\nWe called `create_session` and `destroy_session` methods that do not exist yet in `SessionsController`. When we generated the controller, Rails created a file named `app/helpers/sessions_helper.rb` where we can put helper methods for `SessionController`. Open `SessionsHelper` and code `create_session` and `destroy_session`:\n\n> Calling `create_session` and `destroy_session` before they exist is another example of \"wishful coding\". Wishful coding helps you stay focused on one problem at a time, and is a useful strategy for efficient programming.\n\n```Ruby(app/helpers/sessions_helper.rb)\n module SessionsHelper\n # #4\n+  def create_session(user)\n+    session[:user_id] = user.id\n+  end\n+\n # #5\n+  def destroy_session(user)\n+    session[:user_id] = nil\n+  end\n+\n # #6\n+  def current_user\n+    User.find_by(id: session[:user_id])\n+  end\n end\n```\n\nAt __#4__, we define `create_session`. `create_session` sets `user_id` on the `session` object to `user.id`, which is unique for each user. [`session`](http://guides.rubyonrails.org/security.html#what-are-sessions-questionmark) is an object Rails provides to track the state of a particular user. There is a one-to-one relationship between session objects and user ids. A one-to-one relationship means that a session object can only have one user id and a user id is related to one session object.\n\nAt __#5__, we define `destroy_session`. We clear the user id on the session object by setting it to `nil`, which effectively destroys the user session because we can't track it via their user id any longer.\n\nAt __#6__, we define `current_user`, which returns the current user of the application. `current_user` encapsulates the pattern of finding the current user that we would otherwise call throughout Bloccit. Thus we won't have to constantly call `User.find_by(id: session[:user_id])`; `current_user` is our shortcut to that functionality. `current_user` finds the signed-in user by taking the user id from the session and searching the database for the user in question. When the user closes Bloccit, the related session object will be destroyed. Because our session only stores the user id, we need to retrieve the  `User` instance, and all of its properties, by searching the database for the record with the corresponding user id.\n\n`SessionsController` has no way of finding `create_session` - it won't recognize it as a valid method. We need to include `SessionsHelper` either directly in `SessionsController`, or in `ApplicationController` (which `SessionsController` inherits from). Let's add it to `ApplicationController`, since we'll need to use it in other controllers later:\n\n```ruby(app/controllers/application_controller.rb)\n   # Prevent CSRF attacks by raising an exception.\n   # For APIs, you may want to use :null_session instead.\n   protect_from_forgery with: :exception\n+  include SessionsHelper\n end\n```\n\nRun the tests again and they will still fail since we haven't added the routes. Add the appropriate routes:\n\n```(config/routes.rb)\n...\n\n   resources :users, only: [:new, :create]\n\n+  resources :sessions, only: [:new, :create, :destroy]\n\n...\n```\n\nCheck the new session routes from the command line:\n\n```bash(Terminal)\n$ rake routes | grep session\n```\n\nRun the tests for `SessionsController` again:\n\n```bash(Terminal)\n$ rspec spec/controllers/sessions_controller_spec.rb\n```\n\nOur tests still fail even though we've added our routes because `SessionsController` cannot find a `new.html.erb` template in `views/sessions`. The template does not exist yet because we generated the controller without specifying any actions, so we'll need to manually create the __new__ view:\n\n```bash(Terminal)\n$ touch app/views/sessions/new.html.erb\n```\n\nRun the tests again, and they should pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/sessions_controller_spec.rb\n```\n\n## User Interface\n\nSessions are unlike our other objects in Bloccit in that there is no tangible representation of a session, like there is for a user, for example. A session  keeps track of a user's state - signed in or signed out. Let's update Bloccit to show whether a user is signed in or not. We'll add a **Sign In** link to the welcome page similar to our **Sign Up** link:\n\n```ruby(app/views/welcome/index.html.erb)\n ...\n+      <%= link_to \"Sign In\", new_session_path %> or\n       <%= link_to \"Sign Up\", new_user_path, class: 'btn btn-primary' %> today!\n ...\n```\n\nLet's add a \"Sign In\" link to the navigation:\n\n```Ruby(app/views/layouts/application.html.erb)\n ...\n\n-        <%= link_to \"Sign Up\", new_user_path %>\n+        <% if current_user %>\n+          <%= current_user.name %> - <%= link_to \"Sign Out\", session_path(current_user), method: :delete %>\n+        <% else %>\n+          <%= link_to \"Sign In\", new_session_path %> or\n+          <%= link_to \"Sign Up\", new_user_path %>\n+        <% end %>\n\n ...\n```\n\nLet's complete the **new** view so users can sign in:\n\n```HTML(app/views/sessions/new.html.erb)\n+<h2>Sign in</h2>\n+\n+<div class=\"row\">\n+  <div class=\"col-md-8\">\n+    <%= form_for :session, url: sessions_path do |f|  %>\n+      <div class=\"form-group\">\n+        <%= f.label :email %>\n+        <%= f.email_field :email, autofocus: true, class: 'form-control', placeholder: \"Enter email\" %>\n+      </div>\n+      <div class=\"form-group\">\n+        <%= f.label :password %>\n+        <%= f.password_field :password, class: 'form-control', placeholder: \"Enter password\" %>\n+      </div>\n+      <div class=\"form-group\">\n+        <%= f.label :remember_me, class: 'checkbox' do %>\n+          Remember Me <%= f.check_box :remember_me, :style => \"margin-left: 10px;\"  %>\n+        <% end %>\n+        <%= f.submit \"Sign in\", class: 'btn btn-success' %>\n+      </div>\n+    <% end %>\n+  </div>\n+</div>\n```\n\nOpen the **new** view by navigating to [http://localhost:3000/sessions/new](http://localhost:3000/sessions/new), and try to sign in with a **valid** Email and Password. You should be successfully signed in to Bloccit.\n\n\n## Sign In New users\n\nNow that we can sign in users, let's automatically sign in users after they sign up.\n\nFirst, run the tests to see a failure:\n\n```bash(Terminal)\n$ rspec spec/controllers/users_controller_spec.rb\n```\n\nTo pass this test, update `UsersController`:\n\n```ruby(app/controllers/users_controller.rb)\n class UsersController < ApplicationController\n   def new\n     @user = User.new\n   end\n\n   def create\n     @user = User.new\n     @user.name = params[:user][:name]\n     @user.email = params[:user][:email]\n     @user.password = params[:user][:password]\n     @user.password_confirmation = params[:user][:password_confirmation]\n\n     if @user.save\n       flash[:notice] = \"Welcome to Bloccit #{@user.name}!\"\n+      create_session(@user)\n       redirect_to root_path\n     else\n       flash.now[:alert] = \"There was an error creating your account. Please try again.\"\n       render :new\n     end\n   end\n end\n```\n\nWith this change, `users_controller_spec.rb` passes and new users are seamlessly signed into Bloccit.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Deploy the latest app to Heroku:\n\n```bash(Terminal)\n$ git push heroku master\n```\n\n## Recap\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Sessions](https://en.wikipedia.org/wiki/Session_%28computer_science%29) | Sessions give us the ability to retain state throughout our application as users browse different pages and connections are created and destroyed. We use sessions to power our stateful sign in and sign out mechanism in Bloccit, but sessions can be used for many other things, such as tracking the pages a user clicks on. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nLet's add avatars to Bloccit. We'll use [Gravatar](https://en.gravatar.com/) to implement this feature. Sign up for Gravatar using the **same email address** you used for your first Bloccit user. Gravatar, which stands for globally recognized avatar, associates an avatar with your email address(es).\n\n1. You'll want the avatar to appear like so:\n\n  <center>\n  ![Avatar](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-authentication-login/avatar.png)\n  </center>\n\n  You'll need to use the following code to retrieve the Gravatar:\n\n  ```ruby\n  +  def avatar_url(user)\n  +    gravatar_id = Digest::MD5::hexdigest(user.email).downcase\n  +    \"http://gravatar.com/avatar/#{gravatar_id}.png?s=48\"\n  +  end\n  ```\n\n> Though we provided the code above, you have to decide where to put it.\n\n2. Use the `avatar_url` method in `application.html.erb` to display the user's gravatar next to their name when they're signed in.\n3. Modify the CSS in `app/assets/stylesheets/application.scss` and `app/assets/stylesheets/users.scss` to display the avatar and surrounding content in an aesthetically pleasing manner.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/pbjjui1g97?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Authentication Sign In Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 38,
          "checkpoint_type": "normal",
          "position": 38,
          "points": 1,
          "ref": "0cac4448-cd0b-44d8-a9ec-4a1b44ab8168|0"
        },
        {
          "id": 1643,
          "name": "Rails: Posts and Users",
          "summary": "Posts and Users: associating posts and users",
          "body": "<!-- { ids:[1643], name:'Rails: Posts and Users', summary:'Posts and Users: associating posts and users' } -->\n\n> “Associate yourself with people of good quality, for it is better to be alone than in bad company.”\n>\n> — Booker T. Washington\n\nNow that we can create, authenticate, and persist users, we should personalize the Bloccit experience. In this checkpoint, we'll associate users and posts, to allow ownership of content in Bloccit.\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/a9olegiqbp\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## `User`, Meet `Post`\n\nTo allow ownership of posts, we'll need to associate the Post and User models. Let's write tests for this association first:\n\n```ruby(spec/models/user_spec.rb)\n require 'rails_helper'\n\n RSpec.describe User, type: :model do\n   let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"password\") }\n\n+  it { is_expected.to have_many(:posts) }\n\n   # Shoulda tests for name\n   it { is_expected.to validate_presence_of(:name) }\n   it { is_expected.to validate_length_of(:name).is_at_least(1) }\n ...\n```\n\n... and now we'll add `User` scope to our post tests:\n\n```ruby(spec/models/post_spec.rb)\n ...\n   let(:title) { RandomData.random_sentence }\n   let(:body) { RandomData.random_paragraph }\n   let(:topic) { Topic.create!(name: name, description: description) }\n-  let(:post) { topic.posts.create!(title: title, body: body) }\n # #1\n+  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n # #2\n+  let(:post) { topic.posts.create!(title: title, body: body, user: user) }\n\n   it { is_expected.to belong_to(:topic) }\n+  it { is_expected.to belong_to(:user) }\n\n   it { is_expected.to validate_presence_of(:title) }\n   it { is_expected.to validate_presence_of(:body) }\n   it { is_expected.to validate_presence_of(:topic) }\n+  it { is_expected.to validate_presence_of(:user) }\n\n   it { is_expected.to validate_length_of(:title).is_at_least(5) }\n   it { is_expected.to validate_length_of(:body).is_at_least(20) }\n\n   describe \"attributes\" do\n-    it \"has a title and body attribute\" do\n-      expect(post).to have_attributes(title: title, body: body)\n+    it \"has a title, body, and user attribute\" do\n+      expect(post).to have_attributes(title: title, body: body, user: user)\n     end\n   end\n end\n```\n\nAt __#1__, we create a user to associate with a test post.\n\nAt __#2__, we associate `user` with `post` when we create the test post.\n\nWe'll also need to update `comment_spec.rb` to reflect the new association since comments belong to posts, and we'll now be unable to create posts without a user:\n\n```ruby(spec/models/comment_spec.rb)\n RSpec.describe Comment, type: :model do\n   let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph) }\n+  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n+  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n   let(:comment) { Comment.create!(body: 'Comment Body', post: post) }\n\n   describe \"attributes\" do\n ...\n```\n\nFinally, we need to update `posts_controller_spec.rb` for the post and user association. Add a user for `my_post` to belong to:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe PostsController, type: :controller do\n+  let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n   let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph) }\n+  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n\n ...\n```\n\nRun the specs and see a number of failures due to the fact that users and posts are not associated:\n\n```bash(Terminal)\n$ rspec spec\n```\n\nTo associate users and posts, we'll use a [standalone migration](http://guides.rubyonrails.org/migrations.html#creating-a-standalone-migration) to add a user_id column to the posts table. The user_id (foreign key) will allow a user to have many posts and allow a post to belong to a user.\n\nOn the command line, generate a new migration:\n\n```bash(Terminal)\n$ rails g migration AddUserToPosts user_id:integer:index\n      invoke  active_record\n      create    db/migrate/20150720221814_add_user_to_posts.rb\n```\n\nThe name of the migration is very important. We followed the Rails convention for adding an attribute to a table and automatically populated the migration file with the correct code. If we didn't follow this convention, we'd have to add the code manually. The migration file we just created should look like this:\n\n```ruby(db/migrate/20150720221814_add_user_to_posts.rb)\nclass AddUserToPosts < ActiveRecord::Migration\n  def change\n    add_column :posts, :user_id, :integer\n    add_index :posts, :user_id\n  end\nend\n```\n\n> We added an index to the user_id column. We should always index foreign keys because an index optimizes query performance when operating on tables with associated attributes.\n\n\nMigrate the database:\n\n```bash(Terminal)\n$ rake db:migrate\n== 20150720221814 AddUserToPosts: migrating ===================================\n-- add_column(:posts, :user_id, :integer)\n   -> 0.0008s\n-- add_index(:posts, :user_id)\n   -> 0.0010s\n== 20150720221814 AddUserToPosts: migrated (0.0019s) ==========================\n```\n\nNow that we have the database structure to support the user and post association, let's update the models. Open `Post` and add the `belongs_to` declaration:\n\n```ruby(app/models/post.rb)\n class Post < ActiveRecord::Base\n   belongs_to :topic\n+  belongs_to :user\n   has_many :comments, dependent: :destroy\n\n   validates :title, length: { minimum: 5 }, presence: true\n   validates :body, length: { minimum: 20 }, presence: true\n   validates :topic, presence: true\n+  validates :user, presence: true\n end\n```\n\nOpen `user.rb` and add the `has_many` declaration:\n\n```ruby(app/models/user.rb)\n  class User < ActiveRecord::Base\n+   has_many :posts\n   ...\n  end\n```\n\nRun the full spec to confirm that `post_spec.rb`, `user_spec.rb`, and `comment_spec.rb` are all passing:\n\n```bash(Terminal)\n$ rspec spec\n```\n\nWe still have failures in our `posts_controller_spec.rb` because we haven't updated `PostsController` to create posts with associated users. Before we do that, let's seed updated posts into our database to ensure all our posts are associated with users.\n\n## Updating Seeds\n\nThe posts in our database have no associated users because we haven't updated `seeds.rb` to create posts scoped to users. Let's update `seeds.rb` so that the next time we seed the database, posts will be scoped to users:\n\n```ruby(db/seeds.rb)\n+# Create Users\n+5.times do\n+  User.create!(\n # #3\n+  name:     RandomData.random_name,\n+  email:    RandomData.random_email,\n+  password: RandomData.random_sentence\n+  )\n+end\n+users = User.all\n\n # Create Topics\n 15.times do\n   Topic.create!(\n     name:         RandomData.random_sentence,\n     description:  RandomData.random_paragraph\n   )\n end\n topics = Topic.all\n\n # Create Posts\n 50.times do\n   Post.create!(\n+    user:   users.sample,\n     topic:  topics.sample,\n     title:  Faker::Lorem.sentence,\n     body:   Faker::Lorem.paragraph\n   )\n end\n posts = Post.all\n\n ...\n\n puts \"Seed finished\"\n+puts \"#{User.count} users created\"\n puts \"#{Topic.count} topics created\"\n puts \"#{Post.count} posts created\"\n puts \"#{Comment.count} comments created\"\n```\n\nAt __#3__, we wishful-coded two methods that we'll need to add to `RandomData`:\n\n```ruby(lib/random_data.rb)\n module RandomData\n+  def self.random_name\n+    first_name = random_word.capitalize\n+    last_name = random_word.capitalize\n+    \"#{first_name} #{last_name}\"\n+  end\n+\n+  def self.random_email\n+    \"#{random_word}@#{random_word}.#{random_word}\"\n+  end\n ...\n```\n\nIt's helpful to modify one user that we can use to sign in and test functionality. This will eliminate the burden of creating a new test user every time we refresh the database. Add the following, **using your own email address**:\n\n```ruby(db/seeds.rb)\n\n ...\n\n+user = User.first\n+user.update_attributes!(\n+  email: 'youremail.com', # replace this with your personal email\n+  password: 'helloworld'\n+)\n\n puts \"Seed finished\"\n puts \"#{User.count} users created\"\n puts \"#{Topic.count} topics created\"\n puts \"#{Post.count} posts created\"\n puts \"#{Comment.count} comments created\"\n```\n\nLet's reset the database with user-scoped posts:\n\n```bash(Terminal)\n$ rake db:reset\n```\n\n> `rake db:reset` drops the database and uses the seed file to repopulate it.\n\nYou should see an output similar to: (truncated for brevity)\n\n```bash(Terminal)\n...\nSeed finished\n5 users created\n10 topics creates\n50 posts created\n100 comments created\n```\n\n## Testing the Association\n\nIt's often helpful to test new associations in the Rails console. Launch the console from the command line and create a user:\n\n```bash(Terminal)\n$ rails c\n\n>> u = User.create!(name: \"Bloccer\", email: \"user@bloccit.com\", password: \"helloworld\")\n```\n\nRetrieve all posts for `u` using the `posts` method that was automatically generated by `has_many :posts`:\n\n```ruby(Console)\n>> u.posts\n```\n\nWe haven't created any user-specific posts, so the `posts` method will return an empty results collection:\n\n```ruby(Console)\n  Post Load (0.2ms)  SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"user_id\" = 1\n=> #<ActiveRecord::Associations::CollectionProxy []>\n```\n\n> `CollectionProxy` is an array-like object provided by Rails that allows method chaining and generates performant SQL queries. There aren't any posts associated with the user instance `u`, thus the collection proxy shows `[]`, which symbolizes an empty array.\n\nCreate a post and scope it to a user:\n\n```ruby(Console)\n>> u.posts.create!(topic: Topic.first, title: \"New Post\", body: \"This is a new post in Bloccit!\")\n```\n\nWe should see:\n\n```ruby(Console)\n  Topic Load (0.2ms)  SELECT  \"topics\".* FROM \"topics\"  ORDER BY \"topics\".\"id\" ASC LIMIT 1\n   (0.0ms)  begin transaction\n  SQL (0.3ms)  INSERT INTO \"posts\" (\"topic_id\", \"title\", \"body\", \"user_id\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?, ?, ?)  [[\"topic_id\", 7], [\"title\", \"New Post\"], [\"body\", \"This is a new post in Bloccit!\"], [\"user_id\", 1], [\"created_at\", \"2015-07-21 01:12:04.533450\"], [\"updated_at\", \"2015-07-21 01:12:04.533450\"]]\n   (1.5ms)  commit transaction\n=> #<Post id: 54, title: \"New Post\", body: \"This is a new post in Bloccit!\", created_at: \"2015-07-21 01:12:04\", updated_at: \"2015-07-21 01:12:04\", topic_id: 7, user_id: 1>\n```\n\nCount the posts for the user `u`:\n\n```ruby(Console)\n>> u.posts.count\n   (0.3ms)  SELECT COUNT(*) FROM \"posts\" WHERE \"posts\".\"user_id\" = 1\n=> 1\n```\n\n> Because we created the post within the scope of a user, Rails automatically added the user_id to the post.\n\n## Updating `PostsController`\n\nA user who is signed in and creates a post should own the post. Recall that we use `current_user` in `SessionsHelper` to designate the user who is signed in. We need to update the `create` method in `PostsController` to create user-scoped posts that belong to the user returned by `current_user`. Before we do that, we'll want to make sure that users are signed in before allowing them to create or update a post, otherwise the value of `current_user` will be `nil` and assigning it to the post will cause our validations to fail. Let's update `posts_controller_spec.rb` to test that guest (un-signed-in) users are redirected if they attempt to create or update a post:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n require 'rails_helper'\n # #4\n+include SessionsHelper\n\n RSpec.describe PostsController, type: :controller do\n   let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n   let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n   let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n\n # #5\n+  context \"guest user\" do\n # #6\n+    describe \"GET show\" do\n+      it \"returns http success\" do\n+        get :show, topic_id: my_topic.id, id: my_post.id\n+        expect(response).to have_http_status(:success)\n+      end\n+\n+      it \"renders the #show view\" do\n+        get :show, topic_id: my_topic.id, id: my_post.id\n+        expect(response).to render_template :show\n+      end\n+\n+      it \"assigns my_post to @post\" do\n+        get :show, topic_id: my_topic.id, id: my_post.id\n+        expect(assigns(:post)).to eq(my_post)\n+      end\n+    end\n+\n # #7\n+    describe \"GET new\" do\n+      it \"returns http redirect\" do\n+        get :new, topic_id: my_topic.id\n # #8\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n+\n+    describe \"POST create\" do\n+      it \"returns http redirect\" do\n+        post :create, topic_id: my_topic.id, post: {title: RandomData.random_sentence, body: RandomData.random_paragraph}\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n+\n+    describe \"GET edit\" do\n+      it \"returns http redirect\" do\n+        get :edit, topic_id: my_topic.id, id: my_post.id\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n+\n+    describe \"PUT update\" do\n+      it \"returns http redirect\" do\n+        new_title = RandomData.random_sentence\n+        new_body = RandomData.random_paragraph\n+\n+        put :update, topic_id: my_topic.id, id: my_post.id, post: {title: new_title, body: new_body}\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n+\n+    describe \"DELETE destroy\" do\n+      it \"returns http redirect\" do\n+        delete :destroy, topic_id: my_topic.id, id: my_post.id\n+        expect(response).to have_http_status(:redirect)\n+      end\n+    end\n+  end\n ...\n```\n\nAt __#4__, we add `SessionsHelper` so that we can use the `create_session(user)` method later in the spec.\n\nAt __#5__, we add a context for a guest (un-signed-in) user. Contexts organize tests based on the state of an object.\n\nAt __#6__, we define the `show` tests, which allow guests to view posts in Bloccit.\n\nAt __#7__, we define tests for the other CRUD actions. We won't allow guests to access the `create`, `new`, `edit`, `update`, or `destroy` actions.\n\nAt __#8__, we `expect` guests to be redirected if they attempt to create, update, or delete a post.\n\nOur existing specs reside at __#9__, which we'll update soon to test that signed in users are able to create posts.\n\nRun the guest user section of the spec and view the four failed tests:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e \"guest user\"\n```\n\nTo pass the tests let's first implement the logic needed to redirect guest users in `ApplicationController`:\n\n```ruby(app/controllers/application_controller.rb)\n class ApplicationController < ActionController::Base\n   # Prevent CSRF attacks by raising an exception.\n   # For APIs, you may want to use :null_session instead.\n   protect_from_forgery with: :exception\n   include SessionsHelper\n\n+  private\n # #10\n+  def require_sign_in\n+    unless current_user\n+      flash[:alert] = \"You must be logged in to do that\"\n # #11\n+      redirect_to new_session_path\n+    end\n+  end\nend\n```\n\nAt __#10__, we define `require_sign_in` to redirect un-signed-in users. We define this method in `ApplicationController` because we'll eventually want to call it from other controllers.\n\n> Remember that controllers are classes, and all controllers **inherit** from the `ApplicationController` class.\n\nAt __#11__, we redirect un-signed-in users to the sign-in page.\n\nUse `require_sign_in` in `PostsController` to redirect guest users from actions they won't be able to access:\n\n```ruby(app/controllers/posts_controller.rb)\nclass PostsController < ApplicationController\n # #12\n+  before_action :require_sign_in, except: :show\n ...\n```\nAt __#12__, we use a `before_action` filter to call the `require_sign_in` method before each of our controller actions, except for the `show` action.\n\nRun the guest user section of the spec again:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e \"guest user\"\n```\n\nNow that we've made sure users are signed in before allowing them to create or update a post, let's update the `create` method in `PostsController` to create user-scoped posts. Update the signed-in user specs in `posts_controller_spec.rb`:\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n require 'rails_helper'\n include SessionsHelper\n\n RSpec.describe PostsController, type: :controller do\n   let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n   let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n   let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n\n   context \"guest user\" do\n     describe \"GET show\" do\n       it \"returns http success\" do\n         get :show, topic_id: my_topic.id, id: my_post.id\n         expect(response).to have_http_status(:success)\n       end\n\n       it \"renders the #show view\" do\n         get :show, topic_id: my_topic.id, id: my_post.id\n         expect(response).to render_template :show\n       end\n\n       it \"assigns my_post to @post\" do\n         get :show, topic_id: my_topic.id, id: my_post.id\n         expect(assigns(:post)).to eq(my_post)\n       end\n     end\n\n     ...\n\n     describe \"DELETE destroy\" do\n       it \"returns http redirect\" do\n         delete :destroy, topic_id: my_topic.id, id: my_post.id\n         expect(response).to have_http_status(:redirect)\n       end\n     end\n   end\n\n # #13\n+  context \"signed-in user\" do\n+    before do\n+      create_session(my_user)\n+    end\n\n     describe \"GET show\" do\n       it \"returns http success\" do\n         get :show, topic_id: my_topic.id, id: my_post.id\n         expect(response).to have_http_status(:success)\n       end\n\n       it \"renders the #show view\" do\n         get :show, topic_id: my_topic.id, id: my_post.id\n         expect(response).to render_template :show\n       end\n\n       it \"assigns my_post to @post\" do\n         get :show, topic_id: my_topic.id, id: my_post.id\n         expect(assigns(:post)).to eq(my_post)\n       end\n     end\n\n     ...\n\n     describe \"DELETE destroy\" do\n       it \"deletes the post\" do\n         delete :destroy, topic_id: my_topic.id, id: my_post.id\n         count = Post.where({id: my_post.id}).size\n         expect(count).to eq 0\n       end\n\n       it \"redirects to topic show\" do\n         delete :destroy, topic_id: my_topic.id, id: my_post.id\n         expect(response).to redirect_to my_topic\n       end\n     end\n+  end\n end\n```\n\n> The `...` signify the code between `describe \"GET show\" do` and `describe \"DELETE destroy\" do`; do not remove that code from your file.\n\nAt __#13__, we wrap our existing specs in a context so that they become our signed-in user specs. __Remember to indent all the code we've just wrapped in this context.__\n\nRun the specs for a signed-in user and note the failures caused by the `create` action:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb -e \"signed-in user\"\n```\n\nUpdate `PostsController` to associate new posts with the `current_user`:\n\n```ruby(app/controllers/posts_controller.rb)\n ...\n   def create\n     @post = Post.new\n     @post.title = params[:post][:title]\n     @post.body = params[:post][:body]\n     @topic = Topic.find(params[:topic_id])\n     @post.topic = @topic\n # #14\n+    @post.user = current_user\n  ...\n```\n\nAt __#14__, we assign `@post.user` in the same way we assigned `@post.topic`, to properly scope the new post.\n\nRun `posts_controller_spec.rb` a final time to confirm that all tests are passing as expected:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb\n```\n\nWe're now associating posts with the user who created them.\n\n## Mass Assignment and Strong Parameters\n\nThe `create` action in `PostsController` has a \"code smell\", which is a term to describe code that works, but _feels_ like it could be written better. Watch the following video to learn about strong parameters and how to refactor our controllers to use them, thus removing the unpleasant odor:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/2rkgx7rm1m\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWe made the following changes using mass-assignment and strong parameters:\n\n```ruby(app/controllers/posts_controller.rb)\n ...\n\n   def create\n-    @post = Post.new\n-    @post.title = params[:post][:title]\n-    @post.body = params[:post][:body]\n     @topic = Topic.find(params[:topic_id])\n-    @post.topic = @topic\n+    @post = @topic.posts.build(post_params)\n     @post.user = current_user\n\n     if @post.save\n       flash[:notice] = \"Post was saved successfully.\"\n       redirect_to [@topic, @post]\n     else\n       flash.now[:alert] = \"There was an error saving the post. Please try again.\"\n       render :new\n     end\n   end\n\n ...\n\n   def update\n     @post = Post.find(params[:id])\n-    @post.title = params[:post][:title]\n-    @post.body = params[:post][:body]\n+    @post.assign_attributes(post_params)\n\n     if @post.save\n       flash[:notice] = \"Post was updated successfully.\"\n       redirect_to [@post.topic, @post]\n     else\n       flash.now[:alert] = \"There was an error saving the post. Please try again.\"\n       render :edit\n     end\n   end\n\n ...\n\n# remember to add private methods to the bottom of the file. Any method defined below private, will be private.\n+  private\n+\n+  def post_params\n+    params.require(:post).permit(:title, :body)\n+  end\n end\n```\n\nWe also made similar updates to `Topics Controller`:\n\n```ruby(app/controllers/topics_controller.rb)\n ...\n\n   def create\n-    @topic = Topic.new\n-    @topic.name = params[:topic][:name]\n-    @topic.description = params[:topic][:description]\n-    @topic.public = params[:topic][:public]\n+    @topic = Topic.new(topic_params)\n\n     if @topic.save\n       flash[:notice] = \"Topic was saved successfully.\"\n       redirect_to @topic\n     else\n       flash.now[:alert] = \"Error creating topic. Please try again.\"\n       render :new\n     end\n   end\n\n ...\n\n   def update\n     @topic = Topic.find(params[:id])\n\n-    @topic.name = params[:topic][:name]\n-    @topic.description = params[:topic][:description]\n-    @topic.public = params[:topic][:public]\n+    @topic.assign_attributes(topic_params)\n\n     if @topic.save\n       redirect_to @topic\n     else\n       flash.now[:alert] = \"Error saving topic. Please try again.\"\n       render :edit\n     end\n   end\n\n   ...\n\n+  private\n+\n+  def topic_params\n+    params.require(:topic).permit(:name, :description, :public)\n+  end\n end\n```\n\nBecause we refactored code, we should run our specs to confirm that we didn't accidentally break something.\n\n> After refactoring code, you should always run your tests as a matter of course.\n\n```bash(Terminal)\n$ rspec spec\n```\n\nWith our specs passing, we can feel confident about our refactored code.\n\n## Adding Author Information\n\nNow that we know who is submitting posts, let's display that information. Open the topics __show__ view and update the `<small>` section:\n\n```erb(app/views/topics/show.html.erb)\n ...\n       <small>\n-        submitted <%= time_ago_in_words(post.created_at) %> ago <br>\n+        submitted <%= time_ago_in_words(post.created_at) %> ago by <%= post.user.name %> <br>\n         <%= post.comments.count %> Comments\n       </small>\n ...\n```\n\nLet's also update the posts __show__ view:\n\n```erb(app/views/posts/show.html.erb)\n-<h1><%= @post.title %></h1>\n+<h1>\n+  <%= @post.title %> <br>\n+  <small>\n+    submitted <%= time_ago_in_words(@post.created_at) %> ago by <%= @post.user.name %>\n+  </small>\n+</h1>\n\n ...\n```\n\nStart the Rails server and open Bloccit to the **show** view of a topic. Confirm that the post author information is displayed.\n\n## Scoping Posts\n\nAs the number of posts increases, it will be important to display them in order. We can do this using a **scope**, which allows us to reference queries as method calls. Rails has a `default_scope` declaration we can add to `Post`, which allows us to modify the default order in which posts are retrieved from the database:\n\n> This type of scope is different than our usage of \"scope\" when we discussed post-scoped users. The scope in question here is an actual method provided by Rails, the former usage of scope is simply an adjective to describe a post that belongs to a user.\n\n```ruby(app/models/post.rb)\n class Post < ActiveRecord::Base\n   belongs_to :topic\n   belongs_to :user\n   has_many :comments, dependent: :destroy\n\n+  default_scope { order('created_at DESC') }\n ...\n```\n\nThe `default_scope` will order all posts by their `created_at` date, in descending order, with the most recent posts displayed first. The most recent posts will be displayed first on topic __show__ views (where the posts associated with a topic are listed). Refresh a topic __show__ view and observe the results of these changes.\n\n> Scopes are powerful tools in Rails. They allow you to name and chain together SQL commands to select specific objects in a specific order.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Deploy to Heroku and migrate your production database:\n\n```bash(Terminal)\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Active Record Migrations](http://guides.rubyonrails.org/active_record_migrations.html) | Active Record Migrations allow you to evolve your database schema over time. They use Ruby so that you don't have to write SQL from scratch. |\n| [Database Index](http://en.wikipedia.org/wiki/Database_index) | A database index is a data structure that improves the speed of data retrieval operations by quickly locating data, without searching every row in the database. |\n| [`belongs_to` Association](http://guides.rubyonrails.org/association_basics.html#the-belongs-to-association) | The `belongs_to` association establishes a one-to-one connection with another model. The instance of the declaring model \"belongs to\" an instance of another model. |\n| [`has_many` Association](http://guides.rubyonrails.org/association_basics.html#the-has-many-association) | The `has_many` association establishes a one-to-many connection with another model. The instance of the declaring model \"has many\" (zero or more) instances of another model. |\n| [Active Record Scopes](http://guides.rubyonrails.org/active_record_querying.html#scopes) | Active Record scopes allow commonly-used queries to be referenced as method calls. `scope` methods return an `ActiveRecord::Relationship` object. |\n| [`default_scope`](http://guides.rubyonrails.org/active_record_querying.html#applying-a-default-scope) | A `default_scope` is a scope that is applied across all queries to the model it's called in. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nUnderstanding scopes will make you a much more efficient Rails programmer, and will make your apps run faster as well.\n\n1. Read the [Rails Guides section on scopes](http://guides.rubyonrails.org/active_record_querying.html#scopes), then add the following scopes to the `Post` class:\n\n  - An `ordered_by_title` scope; and\n  - An `ordered_by_reverse_created_at` scope\n\n\n2. Open the Rails Console and test your scopes:\n\n  ```ruby(Console)\n  >> Post.unscoped { Post.ordered_by_title.first }\n  >> Post.unscoped { Post.ordered_by_reverse_created_at.first }\n  ```\n\n  >To use other scopes when a default scope is defined, use the [`unscoped` method](http://guides.rubyonrails.org/active_record_querying.html#overriding-conditions)\n\nOnce your assignment is complete, push it to its own remote branch for your mentor to review:\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/mhcyw8imf0?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Post and Users Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 39,
          "checkpoint_type": "normal",
          "position": 39,
          "points": 1,
          "ref": "ec1d6271-57aa-44a0-b9ba-e4d6749155fb|0"
        },
        {
          "id": 1644,
          "name": "Rails: Authorization",
          "summary": "Authorization: user roles and access rights",
          "body": "<!-- { ids:[1644], name:'Rails: Authorization', summary:'Authorization: user roles and access rights' } -->\n<center>\n  ![authorized personnel only](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-authorization/authorized-personnel-only.jpg)\n</center>\n\n> “Nothing strengthens authority so much as silence.”\n>\n> — Leonardo da Vinci\n\n## Authorization\n\n<center>\n<iframe src=\"//fast.wistia.net/embed/iframe/045z3nvlbg\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWe've authenticated our app, allowing users to create password-secured accounts and sign in and out. With authentication we know who our users are, but not what they're allowed to do. For that we need to add authorization to Bloccit.\n\nAuthorization refers to the access rights each user has to resources and the operations they can perform on them. Authorization is a set of rules and permissions, according to user roles. An example of an authorization rule could be: _\"The owner of a post should be able to edit or delete it.\"_ In this example, the user role is owner, the resource is a post, and the permission is the ability of a user to edit or delete a post.\n\nAnother example of an authorization rule might be: _\"Administrative users should be able to edit / delete posts, independent of ownership.\"_ In this example, the user role is administrator, post is the resource, and editing / deleting are the actions an administrator can perform on posts.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Defining Bloccit Roles and Rules\n\nLet's start by defining the roles we need for Bloccit, and the actions and resources users will have access to.\n\nWe currently have users who can post and comment on Bloccit. We'll call these users __members__ and make __member__ the default user role.\n\nWe also want an all-powerful user – a user who can create, edit, and delete topics, posts, and comments at will. Let's call this user the __admin__.\n\nFinally, we'll have the casual visitor, somebody who hasn't signed up for Bloccit yet. We'll call this user a __guest__ user and let them view everything, but not create, edit, or delete anything.\n\nWe end up with this hierarchy of roles and access rights:\n\n| **Role** | **Authorization Rules** |\n| :-- | :-- |\n| __Admin__ | Can create, update, or delete any topic or post. |\n| __Member__ | Can create, update, or delete only their own posts. |\n| __Guest__ | Can read anything on the site, but can't post until they sign up to become a member. |\n\nLet's move on and prepare our app to use roles.\n\n## Role Specs\n\nIn order to differentiate users by their roles, we want to have methods to call on instance of `User` that returns whether or not the user has a specified role:\n\n```ruby\nuser = User.find(10)\nuser.role = 'admin'\nuser.admin? #=> true\n```\n\nLet's add some specs to define the behavior we expect for roles:\n\n```ruby(spec/models/user_spec.rb)\n ...\n   describe \"attributes\" do\n     ...\n # #1\n+    it \"responds to role\" do\n+      expect(user).to respond_to(:role)\n+    end\n+\n # #2\n+    it \"responds to admin?\" do\n+      expect(user).to respond_to(:admin?)\n+    end\n+\n # #3\n+    it \"responds to member?\" do\n+      expect(user).to respond_to(:member?)\n+    end\n   end\n\n+  describe \"roles\" do\n # #4\n+    it \"is member by default\" do\n+      expect(user.role).to eq(\"member\")\n+    end\n+\n # #5\n+    context \"member user\" do\n+      it \"returns true for #member?\" do\n+        expect(user.member?).to be_truthy\n+      end\n+\n+      it \"returns false for #admin?\" do\n+        expect(user.admin?).to be_falsey\n+      end\n+    end\n+\n # #6\n+    context \"admin user\" do\n+      before do\n+        user.admin!\n+      end\n+\n+      it \"returns false for #member?\" do\n+        expect(user.member?).to be_falsey\n+      end\n+\n+      it \"returns true for #admin?\" do\n+        expect(user.admin?).to be_truthy\n+      end\n+    end\n+  end\n```\n\nAt __#1__, we expect that users will respond to `role`.\n\nAt __#2__, we expect users will respond to `admin?`, which will return whether or not a user is an admin. We'll implement this using the [`ActiveRecord::Enum`](http://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html) class.\n\nAt __#3__, we expect users will respond to `member?`, which will return whether or not a user is a member.\n\nAt __#4__, we expect that users will be assigned the role of member by default.\n\nAt __#5__ and __#6__, we test member and admin users within separate contexts.\n\nRun `user_spec.rb` and see our new tests fail:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n```\n\n## Role Enum Attribute\n\nWe'll represent rules via an [enum](http://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html), which is a special attribute type whose values map to integers, but can be referenced by name. For example, `enum role: [:member, :admin]` will use a column in the database named role, but allows us to reference and assign the role using `member` or `admin`. This allows us to restrict the roles to only those we've specified (member and admin) while still being easy to work with. Let's watch a video exploring the advantages of using enums:\n\n<center>\n  <iframe src=\"https://fast.wistia.net/embed/iframe/1wnjbsidj1\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center><br/>\n\nLet's create the following migration to add a role column to the users table:\n\n```bash(Terminal)\n$ rails g migration AddRoleToUsers role:integer\n  invoke  active_record\n  create    db/migrate/20150803224903_add_role_to_users.rb\n```\n\n> Note the migration name. We use Rails conventions to create a new column - role - which has type integer to represent the role a user has.\n\nMigrate the database using `rake db:migrate`.\n\nTo use the role column as an enum, add the following to `User`:\n\n```ruby(app/models/user.rb)\n class User < ActiveRecord::Base\n   has_many :posts\n\n   before_save { self.email = email.downcase }\n+  before_save { self.role ||= :member }\n\n   validates :name, length: { minimum: 1, maximum: 100 }, presence: true\n\n   validates :email,\n             presence: true,\n             uniqueness: { case_sensitive: false },\n             length: { minimum: 3, maximum: 254 }\n   validates :password, presence: true, length: { minimum: 6 }, if: \"password_digest.nil?\"\n   validates :password, length: { minimum: 6 }, allow_blank: true\n\n   has_secure_password\n\n+  enum role: [:member, :admin]\nend\n```\n\n> `||=` is a Ruby trick. The code `self.role ||= :member`, then, is shorthand for `self.role = :member if self.role.nil?`.\n\nRun `user_spec.rb` again and see that the role enum passes all the specs, confirming that we've created the member and admin roles for users:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n```\n\nWe're ready to use user roles in our controllers to implement authorization rules for admins and members.\n\n## Roles in the `TopicsController`\n\nRecall our authorization rules:\n\n| **Role** | **Authorization Rules** |\n| :-- | :-- |\n| __Admin__ | Can create, update, or delete any topic or post. |\n| __Member__ | Can create, update, or delete only their own posts. |\n| __Guest__ | Can read anything on the site, but can't post until they sign up to become a member. |\n\nOnly admins will be able to create, update, and delete topics. Let's update our `topics_controller_spec.rb` to reflect the different roles users can have. `topics_controller_spec.rb` should look [like this](https://github.com/Bloc/curriculum-public/blob/master/web-development/rails/foundation/40-Authorization/topics_controller_spec.rb). We've divided `topics_controller_spec.rb` into three contexts: a guest user, a member user, and an admin user. We expect guests and members to be able to view the topic __index__ and __show__ pages, but to be redirected from all other topic actions and views. We expect admins to have access to all topic actions and views.\n\nRun the specs and note the nine failures caused because we are not redirecting guests and members:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb\n```\n\nUpdate `TopicsController` to redirect these users:\n\n```ruby(app/controllers/topics_controller.rb)\n class TopicsController < ApplicationController\n # #7\n+  before_action :require_sign_in, except: [:index, :show]\n # #8\n+  before_action :authorize_user, except: [:index, :show]\n ...\n\n   private\n   def topic_params\n     params.require(:topic).permit(:name, :description, :public)\n   end\n+\n # #9\n+  def authorize_user\n+    unless current_user.admin?\n+      flash[:alert] = \"You must be an admin to do that.\"\n+      redirect_to topics_path\n+    end\n+  end\n end\n```\n\nAt __#7__, we use the `before_action` filter and the `require_sign_in` method from `ApplicationController` to redirect guest users who attempt to access controller actions other than `index` or `show`.\n\nAt __#8__, we use another `before_action` filter to check the role of signed-in users. If the `current_user` isn't an admin, we'll redirect them to the topics __index__ view.\n\nAt __#9__, we define `authorize_user`, which is used in __#8__ to redirect non-admin users to `topics_path` (the topics __index__ view).\n\nRun `TopicsControllerSpec` again and confirm that all the tests are passing:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb\n```\n\nMake the first user a member via the Rails console:\n\n```ruby(Console)\n> User.first.member!\n```\n\n> The `member!` method was generated for us because `role` is an enum attribute. It allows us to easily update the role.\n\nSign in to Bloccit with your user and attempt to create, update, and delete a topic. You will be redirected back to the topic __index__ view. Now let's assign our user to be an admin:\n\n```ruby(Console)\n> User.first.admin!\n```\n\nConfirm that, as an admin user, you can now conduct all CRUD operations on topics.\n\n## Roles in the `PostsController`\n\nBased on our authorization rules, guests will be able view posts; members will be able to create posts and update or delete their own posts; and admins will be able to create, update, or delete any post. Update `posts_controller_spec.rb` to reflect the different roles user can have. `posts_controller_spec.rb` should look [like this](https://github.com/Bloc/curriculum-public/blob/master/web-development/rails/foundation/40-Authorization/posts_controller_spec.rb). We've divided `posts_controller_spec.rb` into four contexts:\n\n  * a guest user\n  * a member user modifying another user's post\n  * a member user modifying their own post\n  * an admin user\n\nRun `posts_controller_spec.rb` and see the failing tests that result:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb\n```\n\nUpdate `PostsController` to use authorization:\n\n```ruby(app/controllers/posts_controller.rb)\n class PostsController < ApplicationController\n   before_action :require_sign_in, except: :show\n # #10\n+  before_action :authorize_user, except: [:show, :new, :create]\n ...\n\n   private\n   def post_params\n     params.require(:post).permit(:title, :body)\n   end\n+\n+  def authorize_user\n+    post = Post.find(params[:id])\n # #11\n+    unless current_user == post.user || current_user.admin?\n+      flash[:alert] = \"You must be an admin to do that.\"\n+      redirect_to [post.topic, post]\n+    end\n+  end\n end\n```\n\nAt __#10__, we use a second `before_action` filter to check the role of a signed-in user. If the `current_user` isn't authorized based on their role, we'll redirect them to the posts __show__ view.\n\nAt __#11__ we redirect the user unless they own the post they're attempting to modify, or they're an admin.\n\nRun `posts_controller_spec.rb` and confirm that all the tests are passing:\n\n```bash(Terminal)\n$ rspec spec/controllers/posts_controller_spec.rb\n```\n\nUpdate the first user via the Rails console:\n\n```ruby(Console)\n> User.first.member!\n```\n\nSign in to Bloccit with your user and attempt to update and delete another user's post. You will be redirected to the post __show__ view. Give your user an admin role:\n\n```ruby(Console)\n> User.first.admin!\n```\n\nConfirm that you can conduct CRUD operations on any post.\n\n## Seed Users\n\nUpdating a user's role via the Rails console is clunky. Let's add a few special users to `seeds.rb` so we can then use them to test different authorization levels in our app:\n\n```ruby(db/seeds.rb)\n ...\n\n-user = User.first\n-user.update_attributes!(\n-  email: 'youremail.com',\n-  password: 'helloworld'\n-)\n+# Create an admin user\n+admin = User.create!(\n+  name:     'Admin User',\n+  email:    'admin@example.com',\n+  password: 'helloworld',\n+  role:     'admin'\n+)\n+\n+# Create a member\n+member = User.create!(\n+  name:     'Member User',\n+  email:    'member@example.com',\n+  password: 'helloworld'\n+)\n\n ...\n```\n\nReseed the database using `rake db:reset`.\n\n## Restricting Access to Links\n\nSo far we've restricted controller actions, which ensures no user can perform an action on a resource without proper authorization. But they can still see links to some of these actions. Even though following them without authorization will only result in being redirected with a warning, this is not a good user experience. If a user isn't allowed to perform a certain action, they shouldn't see the option to do so in the first place.\n\nUpdate the topics __index__ to only display a \"New Topic\" link to admin users:\n\n```erb(app/views/topics/index.html.erb)\n ...\n <!-- #12 -->\n+  <% if current_user && current_user.admin? %>\n     <div class=\"col-md-4\">\n       <%= link_to \"New Topic\", new_topic_path, class: 'btn btn-success' %>\n     </div>\n+  <% end %>\n </div>\n```\n\nAt __#12__, we check if there is a signed-in `current_user`, and that `current_user` is an admin.\n\nVisit the topics __index__ view as a member or guest and confirm that the \"New Topic\" link is not displayed.\n\nWhile this logic works, it's a bit too complicated for a view. Remember, it's good practice to keep views as free of logic as possible. This makes them easier to write, maintain, and test. Let's move it into a view helper:\n\n```ruby(app/helpers/topics_helper.rb)\n module TopicsHelper\n+  def user_is_authorized_for_topics?\n+  \t current_user && current_user.admin?\n+  end\n end\n```\n\n> Rails helpers are automatically available to their corresponding views. This means that methods defined in `TopicsHelper` will be available in all the topic views.\n\nUse `user_is_authorized_for_topics?` in the topic __index__ view:\n\n```erb(app/views/topics/index.html.erb)\n ...\n-  <% if current_user && current_user.admin? %>\n+  <% if user_is_authorized_for_topics? %>\n     <div class=\"col-md-4\">\n       <%= link_to \"New Topic\", new_topic_path, class: 'btn btn-success' %>\n     </div>\n   <% end %>\n </div>\n```\n\nRefresh the topics __index__ view, the \"New Topic\" link continues to be hidden for guests and members. Update the topics __show__ view so that only admins see the links to update or delete a topic:\n\n\n```erb(app/views/topics/show.html.erb)\n <h1><%= @topic.name %></h1>\n\n+<% if user_is_authorized_for_topics? %>\n   <%= link_to \"Edit Topic\", edit_topic_path, class: 'btn btn-success' %>\n   <%= link_to \"Delete Topic\", @topic, method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure you want to delete this topic?' } %>\n+<% end %>\n```\n\nVisit the topics __show__ view as a member or guest and confirm that the links are not displayed. Using an admin user, confirm that the links are displayed.\n\nLet's also update the topics __show__ view to only show the \"New Post\" link to signed-in users:\n\n```erb(app/views/topics/show.html.erb)\n+  <% if current_user %>\n     <div class=\"col-md-4\">\n       <%= link_to \"New Post\", new_topic_post_path(@topic), class: 'btn btn-success' %>\n     </div>\n+  <% end %>\n </div>\n```\n\nFinally, on the posts __show__ view, we only want to display the \"Edit Post\" and \"Delete Post\" links to the creator of the post or to admin users. Let's create a helper method in `PostsHelper`:\n\n```ruby(app/helpers/posts_helper.rb)\n module PostsHelper\n+  def user_is_authorized_for_post?(post)\n+  \t current_user && (current_user == post.user || current_user.admin?)\n+  end\n end\n```\n\n`authorize_user_for_post` checks if there is a signed-in `current_user`, and if that `current_user` either owns the post, or is an admin.\n\nLet's use this helper in the posts __show__ view:\n\n```erb(app/views/posts/show.html.erb)\n ...\n+  <% if user_is_authorized_for_post?(@post) %>\n     <div class=\"col-md-4\">\n       <%= link_to \"Edit Post\", edit_topic_post_path(@post.topic, @post), class: 'btn btn-success' %>\n       <%= link_to \"Delete Post\", [@post.topic, @post], method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure you want to delete this post?' } %>\n     </div>\n+  <% end %> </div>\n```\n\nUse a member user and go to another user's post. You won't see links to edit or delete the post. Create a new post and confirm that you can edit and delete it. Finally, use an admin user and confirm you can update any post.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Then deploy to Heroku.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| Defining Roles | Adding roles to users allows us to enforce rules and permisions for what individual users are allowed to access and do. Bloccit supports **admin**, **member**, and **guest** roles. |\n| View Helpers | View helpers are modules with methods that are available in views. They are used to reduce duplication and code complexity in views. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nAdd a third role, moderator, to Bloccit. Moderators will exist between simple members and powerful admins. They will help police Bloccit and ensure our members don't get unruly:\n\n| **Role** | **Authorization Rules** |\n| :-- | :-- |\n| __Moderator__ | Can update, but not create or delete, existing topics. Can create or update, but not delete, any post. |\n\n  1. Add the  `moderator` role to the `role` enum\n  2. Update `TopicsController` and the topics views to allow moderators to update existing topics. TDD your changes.\n  3. Update `PostsController` and the posts views to allow moderators to update any existing post. TDD your changes.\n  4. Test your changes in the browser. Confirm that moderators can update (but not create or delete topics) and that they can create and update, but not delete, posts.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.",
          "roadmap_section_id": 120,
          "active_index": 40,
          "checkpoint_type": "normal",
          "position": 40,
          "points": 1,
          "ref": "edcc0bbe-3b70-452a-9cec-bac2bc788dd5|0"
        },
        {
          "id": 1646,
          "name": "Rails: Comments",
          "summary": "Comments: associating posts and comments with shallow nesting",
          "body": "<!-- { ids:[1646], name:'Rails: Comments', summary:'Comments: associating posts and comments with shallow nesting' } -->\n\n<center>\n  ![churchill](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-comments/churchill_victory.jpg)\n</center>\n\n> “'No comment' is a splendid expression. I am using it again and again.”\n>\n> — Winston Churchill\n\n## Commenting\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/47m3qygm5g\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWe want to allow Bloccit users to comment on posts. We'll build comments as a separate resource, and in doing so, we'll introduce [shallow nesting](http://edgeguides.rubyonrails.org/routing.html#shallow-nesting) to prevent our routes from becoming long and cumbersome.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Associating Comments with Users\n\nLike posts, comments should have an explicit owner. We'll associate comments with users so we can display a comment's author with the comment. Let's update `comment_spec.rb` to reflect this relationship:\n\n```ruby(spec/models/comment_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Comment, type: :model do\n   let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n   let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n   let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n-  let(:comment) { Comment.create!(body: 'Comment Body', post: post) }\n # #1\n+  let(:comment) { Comment.create!(body: 'Comment Body', post: post, user: user) }\n+\n # #2\n+    it { is_expected.to belong_to(:post) }\n+    it { is_expected.to belong_to(:user) }\n # #3\n+    it { is_expected.to validate_presence_of(:body) }\n+    it { is_expected.to validate_length_of(:body).is_at_least(5) }\n\n   describe \"attributes\" do\n     it \"responds to body\" do\n       expect(comment).to have_attributes(body: \"Comment Body\")\n     end\n   end\n end\n```\n\nAt __#1__, we create a comment with an associated user.\n\nAt __#2__, we test that a comment belongs to a user and a post.\n\nAt __#3__, we test that a comment's body is present and  has a minimum length of five.\n\nRun `comment_spec.rb` and note the failures:\n\n```bash(Terminal)\n$ rspec spec/models/comment_spec.rb\n```\n\nBefore we fix them, let's also update `post_spec.rb` and `user_spec.rb` to test post and user associations with comments:\n\n```ruby(spec/models/post_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Post, type: :model do\n   let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n   let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n   let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n\n+  it { is_expected.to have_many(:comments) }\n ...\n```\n\n```ruby(spec/models/user_spec.rb)\n require 'rails_helper'\n\n RSpec.describe User, type: :model do\n   let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"password\") }\n\n   it { is_expected.to have_many(:posts) }\n+  it { is_expected.to have_many(:comments) }\n ...\n```\n\nRun the specs and see the five failures from our new tests:\n\n```bash(Terminal)\n$ rspec spec\n```\n\nTo pass our specs, we'll associate comments with users by generating a new migration to add a user_id foreign key to the comments table:\n\n```bash(Terminal)\n$ rails generate migration AddUserToComments user:references\n      invoke  active_record\n      create    db/migrate/20150819182127_add_user_to_comments.rb\n```\n\nRun the migration to add the foreign key:\n\n```bash(Terminal)\n$ rake db:migrate\n```\n\nUpdate `User` to reflect the association with comments:\n\n```ruby(app/models/user.rb)\n class User < ActiveRecord::Base\n   has_many :posts\n+  has_many :comments\n```\n\nUpdate `Comment` to reflect the association with users and add validations:\n\n```ruby(app/models/comment.rb)\n class Comment < ActiveRecord::Base\n   belongs_to :post\n+  belongs_to :user\n+\n+  validates :body, length: { minimum: 5 }, presence: true\n+  validates :user, presence: true\n end\n```\n\nWith these changes our specs should pass:\n\n```bash(Terminal)\n$ rspec spec\n```\n\nBefore we create `CommentsController`, let's update `seeds.rb` to reflect our new association:\n\n```ruby(db/seeds.rb)\n ...\n # Create Comments\n 100.times do\n   Comment.create!(\n+    user: users.sample,\n     post: posts.sample,\n     body: RandomData.random_paragraph\n   )\n ...\n```\n\nReset the database to create comments with users:\n\n```bash(Terminal)\n$ rake db:reset\n```\n\n## Shallow Routes\n\nBefore we can create a controller for comments, we need to create comment routes. We could nest comments under posts:\n\n> Don't actually make these changes.\n\n```ruby(config/routes.rb)\n Rails.application.routes.draw do\n   resources :topics do\n     resources :posts, except: [:index] do\n       resources :comments, only: [:create, :destroy]\n     end\n   end\n ...\n```\n\nBut that would create deeply nested routes:\n\n```bash\n  topic_post_comments POST   /topics/:topic_id/posts/:post_id/comments(.:format)    comments#create\n  topic_post_comment DELETE /topics/:topic_id/posts/:post_id/comments/:id(.:format) comments#destroy\n```\n\nDeep nesting is undesirable because it forces us to pass in two ids (topic and post) to create a comment and three ids (topic, post, and comment) to delete a comment. While having the entire context might seem beneficial, it's unnecessary given that we can find a comment's post with `comment.post` and the comment's topic with `comment.post.topic`. Deep nesting is cumbersome, because it requires us to pass extra parameters. Worse, it's unnecessary and violates a good practice to never nest resources more than one level deep.\n\nLet's use shallow nesting to nest comments solely under posts:\n\n```ruby(config/routes.rb)\n Rails.application.routes.draw do\n   resources :topics do\n     resources :posts, except: [:index]\n   end\n+\n # #4\n+  resources :posts, only: [] do\n # #5\n+    resources :comments, only: [:create, :destroy]\n+  end\n```\n\nAt __#4__, we use `only: []` because we don't want to create any `/posts/:id` routes, just `posts/:post_id/comments` routes.\n\nAt __#5__, we only add `create` and `destroy` routes for comments. We'll display comments on the posts **show** view, so we won't need `index` or `new` routes. We also won't give users the ability to view individual comments or edit comments, removing the need for `show`, `update`, and `edit` routes.\n\nUse `rake routes` to see our new shallow-nested comment routes:\n\n```bash(Terminal)\n$ rake routes | grep comment\n  post_comments POST   /posts/:post_id/comments(.:format)        comments#create\n  post_comment DELETE /posts/:post_id/comments/:id(.:format)     comments#destroy\n```\n\nNext we'll create `CommentsController` to use our new comment routes.\n\n## `CommentsController` and Specs\n\nGenerate a controller for comments:\n\n```bash(Terminal)\n$ rails generate controller comments\n```\n\nBefore we code the comment controller, let's code the `comments_controller_spec.rb`. Based on our routes and desired functionality, we need to test the creation and deletion of comments in `CommentsController`:\n\n```ruby(spec/controllers/comments_controller_spec.rb)\n require 'rails_helper'\n+include SessionsHelper\n\n RSpec.describe CommentsController, type: :controller do\n+  let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n+  let(:other_user) { User.create!(name: RandomData.random_name, email: RandomData.random_email, password: \"helloworld\", role: :member) }\n+  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n+  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n+  let(:my_comment) { Comment.create!(body: 'Comment Body', post: my_post, user: my_user) }\n+\n # #6\n+  context \"guest\" do\n+    describe \"POST create\" do\n+      it \"redirects the user to the sign in view\" do\n+        post :create, post_id: my_post.id, comment: {body: RandomData.random_paragraph}\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n+\n+    describe \"DELETE destroy\" do\n+      it \"redirects the user to the sign in view\" do\n+        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n+  end\n+\n # #7\n+  context \"member user doing CRUD on a comment they don't own\" do\n+    before do\n+      create_session(other_user)\n+    end\n+\n+    describe \"POST create\" do\n+      it \"increases the number of comments by 1\" do\n+        expect{ post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence} }.to change(Comment,:count).by(1)\n+      end\n+\n+      it \"redirects to the post show view\" do\n+        post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence}\n+        expect(response).to redirect_to [my_topic, my_post]\n+      end\n+    end\n+\n+    describe \"DELETE destroy\" do\n+      it \"redirects the user to the posts show view\" do\n+        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        expect(response).to redirect_to([my_topic, my_post])\n+      end\n+    end\n+  end\n+\n+\n # #8\n+  context \"member user doing CRUD on a comment they own\" do\n+    before do\n+      create_session(my_user)\n+    end\n+\n+    describe \"POST create\" do\n+      it \"increases the number of comments by 1\" do\n+        expect{ post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence} }.to change(Comment,:count).by(1)\n+      end\n+\n+      it \"redirects to the post show view\" do\n+        post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence}\n+        expect(response).to redirect_to [my_topic, my_post]\n+      end\n+    end\n+\n+    describe \"DELETE destroy\" do\n+      it \"deletes the comment\" do\n+        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        count = Comment.where({id: my_comment.id}).count\n+        expect(count).to eq 0\n+      end\n+\n+      it \"redirects to the post show view\" do\n+        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        expect(response).to redirect_to [my_topic, my_post]\n+      end\n+    end\n+  end\n+\n # #9\n+  context \"admin user doing CRUD on a comment they don't own\" do\n+    before do\n+      other_user.admin!\n+      create_session(other_user)\n+    end\n+\n+    describe \"POST create\" do\n+      it \"increases the number of comments by 1\" do\n+        expect{ post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence} }.to change(Comment,:count).by(1)\n+      end\n+\n+      it \"redirects to the post show view\" do\n+        post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence}\n+        expect(response).to redirect_to [my_topic, my_post]\n+      end\n+    end\n+\n+    describe \"DELETE destroy\" do\n+      it \"deletes the comment\" do\n+        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        count = Comment.where({id: my_comment.id}).count\n+        expect(count).to eq 0\n+      end\n+\n+      it \"redirects to the post show view\" do\n+        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        expect(response).to redirect_to [my_topic, my_post]\n+      end\n+    end\n+  end\nend\n```\n\nAt __#6__, we create specs for guest users, who we will redirect to sign in if they attempt to create or delete a comment.\n\nAt __#7__, we create specs for member users who attempt to create new comments or delete comments they don't own. We will allow member users to create new comments, but we'll redirect them to the posts __show__ view if they try to delete another user's comment.\n\nAt __#8__, we test that members users are able to create new comments and delete their own comments.\n\nAt __#9__, we test that admin users are able to create and delete any comment, regardless of owner.\n\nRun this spec and see 13 failures:\n\n```bash(Terminal)\n$ rspec spec/controllers/comments_controller_spec.rb\n```\n\nLet's pass the `create` tests first:\n\n```ruby(app/controllers/comments_controller.rb)\nclass CommentsController < ApplicationController\n # #10\n+  before_action :require_sign_in\n+\n+  def create\n # #11\n+    @post = Post.find(params[:post_id])\n+    comment = @post.comments.new(comment_params)\n+    comment.user = current_user\n+\n+    if comment.save\n+      flash[:notice] = \"Comment saved successfully.\"\n # #12\n+      redirect_to [@post.topic, @post]\n+    else\n+      flash[:alert] = \"Comment failed to save.\"\n # #13\n+      redirect_to [@post.topic, @post]\n+    end\n+  end\n+\n+  private\n+\n # #14\n+  def comment_params\n+    params.require(:comment).permit(:body)\n+  end\n end\n```\n\nAt __#10__, we use `require_sign_in` to ensure that guest users are not permitted to create comments.\n\nAt __#11__, we find the correct post using `post_id` and then create a new comment using `comment_params`. We assign the comment's user to `current_user`, which returns the signed-in user instance.\n\nAt __#12__ and __#13__ we redirect to the posts __show__ view. Depending on whether the comment was valid, we'll either display a success or an error message to the user.\n\nAt __#14__, we define a private `comment_params` method that white lists the parameters we need to create comments.\n\nRun `comments_controller_spec.rb` again and note that the seven `create` tests pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/comments_controller_spec.rb\n```\n\nWe still have six `delete` test failures, let's pass them now:\n\n```ruby(app/controllers/comments_controller.rb)\n class CommentsController < ApplicationController\n   before_action :require_sign_in\n # #15\n+  before_action :authorize_user, only: [:destroy]\n ...\n+  def destroy\n+    @post = Post.find(params[:post_id])\n+    comment = @post.comments.find(params[:id])\n+\n+    if comment.destroy\n+      flash[:notice] = \"Comment was deleted successfully.\"\n+      redirect_to [@post.topic, @post]\n+    else\n+      flash[:alert] = \"Comment couldn't be deleted. Try again.\"\n+      redirect_to [@post.topic, @post]\n+    end\n+  end\n+\n   private\n\n   def comment_params\n     params.require(:comment).permit(:body)\n   end\n+\n # #16\n+  def authorize_user\n+    comment = Comment.find(params[:id])\n+    unless current_user == comment.user || current_user.admin?\n+      flash[:alert] = \"You do not have permission to delete a comment.\"\n+      redirect_to [comment.post.topic, comment.post]\n+    end\n+  end\n end\n```\n\nAt __#15__, we add `authorize_user` filter to ensure that unauthorized users are not permitted to delete comments.\n\nAt __#16__, we define the `authorize_user` method which allows the comment owner or an admin user to delete the comment. We redirect unauthorized users to the post __show__ view.\n\nRun `comments_controller_spec.rb` again and see that all the tests for `create` and `delete` are now passing:\n\n```bash(Terminal)\n$ rspec spec/controllers/comments_controller_spec.rb\n```\n\n## View Changes\n\nLet's finish our comment feature by giving users the ability to view, create, and delete comments from the application.\n\nWe want to display comments on the post __show__ view. We could display the comments belonging to a post using an `each` loop, as we do when we display the posts that belong to a topic, but let's take a DRYer approach using partials. Create a `_comment.html.erb` partial:\n\n```bash(Terminal)\n$ touch app/views/comments/_comment.html.erb\n```\n\nIn the comment partial, add the code to display an individual comment:\n\n```erb(app/views/comments/_comment.html.erb)\n+<div class=\"media\">\n+  <div class=\"media-body\">\n+    <small>\n+      <%= comment.user.name %> commented <%= time_ago_in_words(comment.created_at) %> ago\n+    </small>\n+    <p><%= comment.body %></p>\n+  </div>\n+</div>\n```\n\nWe'll call the partial in the posts __show__ view:\n\n```erb(app/views/posts/show.html.erb)\n ...\n   <div class=\"col-md-8\">\n     <p><%= @post.body %></p>\n+    <div>\n+      <h3>Comments</h3>\n+      <%= render @post.comments %>\n+    </div>\n   </div>\n ...\n```\n\nThis simple line of code will call `_comment.html.erb` and render all the comments which belong to the given post. Let's take a deeper dive into how this actually works by calling `render` more explicitly.\n\nThe `render` method provides [syntactic sugar](http://en.wikipedia.org/wiki/Syntactic_sugar) to make it easier to read and use. As with `link_to`, this can cause confusion when you're first becoming familiar with what the method does. Consider the following call to `render`, which is explicit:\n\n```erb\n<% @post.comments.each do |comment| %>\n  <%= render({ partial: 'comments/comment', locals: {comment: comment} }) %>\n<% end %>\n```\n\nThe above version is explicit. It loops through a collection, and for each element in the collection, feeds `render` a hash argument with a `:partial` key that points to the file we want to render, and a `:locals` key with a hash of local variables.\n\nWe could simplify the above call like this:\n\n```erb\n<% @post.comments.each do |comment| %>\n  <%= render partial: 'comments/comment', locals: {comment: comment} %>\n<% end %>\n```\n\nIn the above call to `render`, we implied the parentheses and brackets for a terser syntax. We can make this simpler yet by applying some syntactic sugar:\n\n```erb\n<% @post.comments.each do |comment| %>\n  <%= render comment %>\n<% end %>\n```\n\nThe above version still iterates through the collection, but it instead feeds `render` a single object as an argument. Using Rails conventions, `render` automatically looks for a `comments/_comment.html.erb` partial, and passes `comment` as a local variable. We can make this even simplier though, by removing the loop:\n\n```erb\n<%= render @post.comments %>\n```\n\nThe final version is terse. When we use `render` this way, the method recognizes that we're rendering a collection, and iterates through that collection. For each `comment` belonging to `@post`, the `render` method searches for the conventionally named partial file (`comments/_comment.html.erb`) and renders it. `comment` is automatically passed to the partial as a local variable.\n\n> For more on `render` and partials, read the Rails Guide on [using partials](http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials).\n\nGo to the __show__ view of a post and confirm that its comments are displayed.\n\n<center>\n  ![displaying-comments](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-comments/diplaying-comments.png)\n</center>\n\nWe can see comments thanks to `seeds.rb`, but we don't have a way to create them from the application. Create a `comments/_form.html.erb` partial so users can create comments for a post, from the UI:\n\n```bash(Terminal)\n$ touch app/views/comments/_form.html.erb\n```\n\nAdd the code to create a new comment:\n\n```erb(app/views/comments/_form.html.erb)\n+<h4>Add a comment</h4>\n <!-- #17 -->\n+<%= form_for [post, comment] do |f| %>\n+  <div class=\"form-group\">\n <!-- #18 -->\n+    <%= f.label :body, class: 'sr-only' %>\n+    <%= f.text_field :body, class: 'form-control', placeholder: \"Enter a new comment\" %>\n+  </div>\n+  <%= f.submit \"Submit Comment\", class: 'btn btn-default pull-right' %>\n+<% end %>\n```\n\nAt __#17__, we create a form for a post and comment, because comments are shallowly nested under posts.\n\nAt __#18__, we create a label with a class of `sr-only`. This adds a [hidden label](http://getbootstrap.com/css/#callout-inline-form-labels) for users using [screen readers](https://en.wikipedia.org/wiki/Screen_reader).\n\nTo use the form, update the posts __show__ view:\n\n```erb(app/views/posts/show.html.erb)\n ...\n   <div class=\"col-md-8\">\n     <p><%= @post.body %></p>\n     <div>\n       <h3>Comments</h3>\n       <%= render @post.comments %>\n     </div>\n <!-- #19 -->\n+    <% if current_user %>\n <!-- #20 -->\n+      <%= render 'comments/form', comment: Comment.new, post: @post %>\n+    <% end %>\n   </div>\n ...\n```\n\nAt __#19__, we allow signed in users to see the comment form.\n\nAt __#20__, we render the comment form, and use `comments/form`, because we are rendering the comment form from a post view. If we didn't specify `comments`, Rails would render the posts __form__ partial by default.\n\nThe __show__ view for any post with a signed-in user will display a form for creating a comment.\n\n<center>\n  ![comment-form](http://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-comments/comment-form.png)\n</center>\n\nTry creating some valid and invalid comments from the UI.\n\nThe final piece of the puzzle is to allow users to delete comments. We'll add a link to the `_comment.html.erb` to allow authorized users to delete a comment. First, let's create a helper method to determine if a user is authorized to delete a comment:\n\n```ruby(app/helpers/comments_helper.rb)\n module CommentsHelper\n+  def user_is_authorized_for_comment?(comment)\n+     current_user && (current_user == comment.user || current_user.admin?)\n+  end\n end\n```\n\nWe'll use the helper method to selectively display a link to delete a comment:\n\n```erb(app/views/comments/_comment.html.erb)\n <div class=\"media\">\n   <div class=\"media-body\">\n     <small>\n       <%= comment.user.name %> commented <%= time_ago_in_words(comment.created_at) %> ago\n+      <% if user_is_authorized_for_comment?(comment) %>\n+        | <%= link_to \"Delete\", [@post, comment], method: :delete %>\n+      <% end %>\n     </small>\n     <p><%= comment.body %></p>\n   </div>\n </div>\n```\n\nRefresh the post __show__ page and confirm that you can delete comments that you created, but not the comments of other users.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Deploy to Heroku and migrate your production database:\n\n```bash(Terminal)\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [`belongs_to` Association](http://guides.rubyonrails.org/association_basics.html#the-belongs-to-association) | The `belongs_to` association establishes a one-to-one relationship between two models. Each instance of the declaring model `belongs_to` an instance of the other (parent) model. |\n| [`has_many` Association](http://guides.rubyonrails.org/association_basics.html#the-has-many-association) | A `has_many` association establishes a one-to-many connection from one model to many other models. Each instance of the declaring model has zero or more instances of the child model. |\n| [Partial templates](http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials) | Partial templates, called \"partials,\" are devices for breaking the rendering process into manageable segments. Partials allow the code that renders a particular piece of a response to be moved to its own file, and is a best practice for keeping code DRY. |\n| [Rendering Collections](http://guides.rubyonrails.org/layouts_and_rendering.html#rendering-collections) | We use partials to render collections. When you pass a collection to a partial via the `:collection` option, Rails inserts the partial once for each instance in the collection. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nUse partials and `render` to DRYly refactor the `each` loops we used to display topics and posts:\n\n1. Create `_topic.html.erb` and `_post.html.erb` partials.\n\n2. Populate both partials with code to display individual instances of topic and post.\n\n3. Use the `_topic.html.erb` partial in topics __index__ view.\n\n4. Use the `_post.html.erb` partial in the topics __show__ view.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/83fnzei1zt?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Commenting Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 41,
          "checkpoint_type": "normal",
          "position": 41,
          "points": 1,
          "ref": "db00e804-d8e6-422b-b41a-cba714c2a315|0"
        },
        {
          "id": 1648,
          "name": "Rails: Labels",
          "summary": "Labels: polymorphically associating labels with topics and posts",
          "body": "<!-- { ids:[1648], name:'Rails: Labels', summary:'Labels: polymorphically associating labels with topics and posts' } -->\n\n<center>\n  ![Labels](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-labels/warning-labels.jpg)\n</center>\n\n> “Labels are for filing. Labels are for clothing. Labels are not for people.”\n>\n> — [Martina Navratilova](https://en.wikipedia.org/wiki/Martina_Navratilova)\n\n## Labeling\n\nLabels will empower Bloccit users to categorize topics and posts in a flexible, user-driven manner. While building a labeling feature, we'll learn about two new important programming concepts: many-to-many relationships and polymorphism.\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/ao4x2db9bz\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Many-to-Many Relationships\n\nWe want to be able to reuse a label for multiple topics and posts. In other words, we should be able to associate the same label with more than one topic or post simultaneously:\n\n<center>\n![Labels](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-labels/labels.png)\n</center>\n\nTopics can have many labels and a label can belong to many topics. We call this relationship a [**many to many** relationship](https://en.wikipedia.org/wiki/Many-to-many_%28data_model%29). Posts can have many labels and a label can belong to many posts. This is also a **many-to-many** relationship. Because we have multiple many-to-many relationships with labels, we will combine the interface for topics and posts into a polymorphic relationship called `labelings`:\n\n![through](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-labels/through.png)\n\n## `Label`\n\nLet's create `Label`. Create `spec/models/label_spec.rb`:\n\n\n```bash(Terminal)\n$ touch spec/models/label_spec.rb\n```\n\nOpen `label_spec.rb` and code the following tests:\n\n```(spec/models/label_spec.rb)\n+require 'rails_helper'\n+\n+RSpec.describe Label, type: :model do\n # #1\n+  it { is_expected.to have_many :labelings }\n # #2\n+  it { is_expected.to have_many(:topics).through(:labelings) }\n+  it { is_expected.to have_many(:posts).through(:labelings) }\n\n+end\n```\n\nAt __#1__, we specify that a label should `have_many` `labelings` A `labeling` could be either a topic or a post (our polymorphic relationships).\n\nAt __#2__, we specify that a label should `have_many` `topics` and `posts` through `labelings`.\n\n\nRun the spec:\n\n```bash(Terminal)\n$ rspec spec/models/label_spec.rb\n```\n... and note the error:\n\n```bash(Terminal)\nuninitialized constant Label (NameError)\n```\n\nThis is because we haven't created `Label` yet. Let's do that now:\n\n```bash(Terminal)\n$ touch app/models/label.rb\n```\n\nTo fix the `NameError`, we'll need to declare the class. Open `label.rb` and add the following:\n\n```ruby(app/models/label.rb)\n+class Label < ActiveRecord::Base\n+end\n```\n\nRun the spec again. We still see failures:\n\n```bash(Terminal)\n$ rspec spec/models/label_spec.rb\nFFF\n\nFailures:\n\n  1) Label\n     Failure/Error: it { is_expected.to have_many :labelings }\n     ActiveRecord::StatementInvalid:\n       Could not find table 'labels'\n  ...\n```\n\nWe see that `ActiveRecord` could not find a table named `labels`. We need to create a migration file to create `labels`:\n\n```bash(Terminal)\n$ rails generate migration CreateLabels\n```\n\nAdd the following code to the new migration file:\n\n```ruby(db/migrate/20160112215057_create_labels.rb)\n class CreateLabels < ActiveRecord::Migration\n   def change\n     create_table :labels do |t|\n+      t.string :name\n+\n+      t.timestamps null: false\n     end\n   end\n end\n```\n\nMigrate the database:\n\n```bash(Terminal)\n$ rake db:migrate\n```\n\nRun the specs again:\n\n```bash(Terminal)\n$ rspec spec/models/label_spec.rb\nFFF\n\nFailures:\n\n  1) Label should have many labelings\n     Failure/Error: it { is_expected.to have_many :labelings }\n       Expected Label to have a has_many association called labelings (no association called labelings)\n```\n\nThey're still failing! That's because we still need to add the actual association in `Label`:\n\n```ruby(app/models/label.rb)\n class Label < ActiveRecord::Base\n # #3\n+  has_many :labelings\n # #4\n+  has_many :topics, through: :labelings, source: :labelable, source_type: :Topic\n # #5\n+  has_many :posts, through: :labelings, source: :labelable, source_type: :Post\n end\n```\n\n\nAt __#3__, we use `has_many` to associate a label with many labelings.\n\nAt __#4__, a label has many topics through the labelings table. We'll explain `source: :labelable` later in this checkpoint.\n\nAt __#5__, similarly, a label has many posts through the labelings table.\n\nRun the specs again; they almost pass, but we need to define `Labeling`.\n\n## `Labeling`\n\nLet's define how `Labeling` should behave by creating a spec for it. We'll manually write the spec rather than use `rails generate` to create the model and its associated files. We chose to manually create some of the files in this checkpoint to illustrate the fact that `rails generate` creates files and writes code on our behalf. Use `touch` to create `spec/models/labeling_spec.rb`:\n\n```bash(Terminal)\n$ touch spec/models/labeling_spec.rb\n```\n\nOpen `labeling_spec.rb` and add the following tests:\n\n```(spec/models/labeling_spec.rb)\n+require 'rails_helper'\n+\n+RSpec.describe Labeling, type: :model do\n # #6\n+  it { is_expected.to belong_to :labelable }\n+end\n```\n\nAt __#6__, we expect labelings to `belong_to` `Labelable`. `Labelable` is an _interface_. An interface is similar to a class in that it contains method definitions. The difference between an interface and a class is that an interface has no implementation of the methods which it defines.\n\nWe'll define `Labelable` using Ruby's [polymorphic associations](http://guides.rubyonrails.org/association_basics.html#polymorphic-associations). [Polymorphism](https://en.wikipedia.org/wiki/Polymorphism_%28computer_science%29) is when one object can take the form of another object. A polymorphic object has the ability to mutate into a different object, if the new object has the same interface as the old object. We need `Labeling` to be able to belong to more than one model (`Topic` and `Post`), thus the need for the polymorphic association. If we were only to apply `Labeling` to `Topic`, for example, we would _not_ need a polymorphic association.\n\nLet's create `Labeling` and make it polymorphic:\n\n```bash(Terminal)\n$ touch app/models/labeling.rb\n```\n\nOpen `Labeling` and add the following:\n\n```(app/models/labeling.rb)\n+class Labeling < ActiveRecord::Base\n # #7\n+  belongs_to :labelable, polymorphic: true\n+end\n```\n\n\nAt __#7__, we stipulate that `Labeling` is `polymorphic` and that it can mutate into different types of objects through `labelable`.\n\nRun the spec:\n\n```bash(Terminal)\n$ rspec spec/models/labeling_spec.rb\n```\n\nOur specs fail. This is because we need to create the associations at the database level:\n\n```bash(Terminal)\n$ rails generate migration CreateLabelings\n```\n\n\nLet's add the code we need to our migration:\n\n```ruby(db/migrate/20160112231149_create_labelings.rb)\n class CreateLabelings < ActiveRecord::Migration\n   def change\n     create_table :labelings do |t|\n+      t.references :label, index: true\n # #8\n+      t.references :labelable, polymorphic: true, index: true\n+      t.timestamps null: false\n+    end\n+    add_foreign_key :labelings, :labels\n   end\n end\n```\n\nAt __#8__, we create a column which will have the name `labelable_id` using `t.references :labelable`. We also use `polymorphic: true` which adds a type column called `labelable_type` to associate a labeling with different objects.\n\nMigrate the database:\n\n```bash(Terminal)\n$ rake db:migrate\n```\n\n\nOur `Label` and `Labeling` specs pass. We can now build our polymorphic many-to-many relationship.\n\n## Adding Labels to Topics and Posts\n\nNow that we've created the relationship between `Labeling` and `Label`, let's create the other end of the relationship. Let's start with topics first by writing some tests:\n\n```Ruby(spec/models/topic_spec.rb)\n ...\n\n   let(:topic) { Topic.create!(name: name, description: description) }\n\n   it { is_expected.to have_many(:posts) }\n # #9\n+  it { is_expected.to have_many(:labelings) }\n # #10\n+  it { is_expected.to have_many(:labels).through(:labelings) }\n \n   describe \"attributes\" do\n     it \"has name, description, and public attributes\" do\n ...\n```\n\nAt __#9__, we expect topics to have many labelings.\n\nAt __#10__, we expect topics to have many labels through labelings as depicted in our graphic earlier in the checkpoint.\n\nLet's add similar tests to `post_spec.rb`:\n\n```ruby(spec/models/post_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Post, type: :model do\n   let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n   let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n   let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n\n+  it { is_expected.to have_many(:labelings) }\n+  it { is_expected.to have_many(:labels).through(:labelings) }\n\n   it { is_expected.to have_many(:comments) }\n   it { is_expected.to belong_to(:topic) }\n   it { is_expected.to belong_to(:user) }\n\n ...\n```\n\nLet's add another test to `spec/models/label_spec.rb` to verify that we can associate the same label to a different topic and post:\n\n```(spec/models/label_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Label, type: :model do\n+  let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n+  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n+  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n+  let(:label) { Label.create!(name: 'Label') }\n+\n   it { is_expected.to have_many :labelings }\n   it { is_expected.to have_many(:topics).through(:labelings) }\n   it { is_expected.to have_many(:posts).through(:labelings) }\n\n+  describe \"labelings\" do\n+    it \"allows the same label to be associated with a different topic and post\" do\n+      topic.labels << label\n+      post.labels << label\n+\n+      topic_label = topic.labels[0]\n+      post_label = post.labels[0]\n # #11\n+      expect(topic_label).to eql(post_label)\n+    end\n+  end\n end\n```\n\nAt __#11__, we `expect` that the label associated with `post` and `topic` is the same, thus ensuring we can simultaneously associate a label with multiple topics and posts.\n\nIf we run our specs we will see some failures. Let's update `Topic` so that we can apply labels to it:\n\n```ruby(app/models/topic.rb)\n class Topic < ActiveRecord::Base\n   has_many :posts, dependent: :destroy\n # #12\n+  has_many :labelings, as: :labelable\n # #13\n+  has_many :labels, through: :labelings\n end\n```\n\nAt __#12__, we define a `has_many` relationship between `Topic` and `Labeling`, using the `labeleable` interface.\n\nAt __#13__, we define a `has_many` relationship between `Topic` to `Label`, using the `Labeling` class through the `labeleable` interface.\n\nWe'll also update `Post` because we want a relationship between `Post` and `Labeling`:\n\n```ruby(app/models/post.rb)\n class Post < ActiveRecord::Base\n   belongs_to :topic\n   belongs_to :user\n   has_many :comments, dependent: :destroy\n+  has_many :labelings, as: :labelable\n+  has_many :labels, through: :labelings\n\n   default_scope { order('created_at DESC') }\n\n ...\n```\n\nLet's run our specs:\n\n```bash(Terminal)\n$ rspec spec\n```\n\nWe see failures, some of the same type:\n\n```bash(terminal)\n1) Post should have many labels through labelings\n     Failure/Error: it { is_expected.to have_many(:labels).through(:labelings) }\n     NoMethodError:\n       undefined method `class_name' for nil:NilClass\n```\n\nOur test which tests that both topics and posts `have_many` labels fails for both topics and posts. This is because we need to tell `Labeling` that it also `belongs_to` `Label` in order for our `have_many(:labels).through(:labelings)` spec to pass. Let's add this relationship to `Labeling`:\n\n```ruby(app/models/labeling.rb)\n class Labeling < ActiveRecord::Base\n   belongs_to :labelable, polymorphic: true\n+  belongs_to :label\n end\n```\n\nRun the specs again, they now pass!\n\n## `LabelsController`\n\nLet's use a generator to create `LabelsController` to save us some time:\n\n```bash(Terminal)\n$ rails generate controller Labels show\n```\n\nBecause we specified the `show` action for `LabelsController`, we will only be able to view labels for now. Before implementing the `show` action, we'll write tests for it first. Open the spec and update it with the following specs:\n\n```ruby(spec/controllers/labels_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe LabelsController, type: :controller do\n+  let(:my_label) { Label.create!(name: \"L1\") }\n+\n   describe \"GET show\" do\n     it \"returns http success\" do\n-      get :show\n+      get :show, { id: my_label.id }\n       expect(response).to have_http_status(:success)\n     end\n+\n # #14\n+    it \"renders the #show view\" do\n+      get :show, { id: my_label.id }\n+      expect(response).to render_template :show\n+    end\n+\n # #15\n+   it \"assigns my_label to @label\" do\n+     get :show, { id: my_label.id }\n+     expect(assigns(:label)).to eq(my_label)\n+   end\n   end\n end\n```\n\nAt __#14__, we see our standard test for testing if the **show** view was rendered properly.\n\nAt __#15__, we test that `label` was assigned properly.\n\nRun the specs and note the failure. Let's implement the `show` action in `LabelsController` to pass the tests:\n\n```ruby(app/controllers/labels_controller.rb)\n class LabelsController < ApplicationController\n   def show\n+    @label = Label.find(params[:id])\n   end\n end\n```\n\nRun the specs and verify that the tests pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/labels_controller_spec.rb\n```\n\nNow that we have a working `show` action, we'll implement the user interface to display labels.\n\n## Implementing the Labeling User Interface\n\nWe want users to be able to create and add labels when creating or updating a topic or post. Labels will require an input field for the `name` attribute, so we'll use a form. Create a form partial in the `app/views/labels/` directory:\n\n```bash(Terminal)\n$ touch app/views/labels/_form.html.erb\n```\n\nOpen the partial and add the following code:\n\n```erb(app/views/labels/_form.html.erb)\n+ <div class=\"form-group\">\n+   <%= f.label :labels %>\n <!-- #16 -->\n+   <%= f.text_field :labels,\n+                    class: 'form-control',\n+                    placeholder: \"Enter labels (separated by commas)\",\n+                    value: labels.map(&:name).join(', ') %>\n+ </div>\n```\n\nAt __#16__, we use a text field so that a user can submit multiple labels at once. We set the value of the text field to `labels.map(&:name).join(', ')`. Let's break down `labels.map(&:name).join(', ')`. `labels` is the array of label objects. `map` iterates over each label object and creates a new array where each value in the new array is a label name. We then use `.join(', ')` on the new array to create a string of labels. This could also be written as:\n\n```ruby\n  new_labels = labels.map(&:name)\n  labels_string = new_labels.join(', ')\n```\n\nLet's add the label form partial to the topic **new** view:\n\n```erb(app/views/topics/new.html.erb)\n...\n\n         <%= f.label :description %>\n         <%= f.text_area :description, rows: 8, class: 'form-control', placeholder: \"Enter topic description\" %>\n       </div>\n+\n <!-- #17 -->\n+      <div class=\"form-group\">\n+        <%= render partial: 'labels/form', locals: { f: f, labels: @topic.labels } %>\n+      </div>\n+\n       <div class=\"form-group\">\n...\n```\n\nAt __#17__, we render the label form partial and pass it the form object as `f`, as well as `@topic.labels` as `labels` in the `locals` params hash.\n\nLet's also add the label form partial to the topic **edit** view:\n\n```erb(app/views/topics/edit.html.erb)\n...\n\n         <%= f.label :description %>\n         <%= f.text_area :description, rows: 8, class: 'form-control', placeholder: \"Enter topic description\" %>\n       </div>\n+\n <!-- #18 -->\n+      <div class=\"form-group\">\n+        <%= render partial: 'labels/form', locals: { f: f, labels: @topic.labels } %>\n+      </div>\n+\n       <div class=\"form-group\">\n\n...\n```\n\nAt __#18__, we render the label form partial with the same parameters as the **new** view.\n\nLet's add similar code to our **new** and **edit** views for posts. Since we already have a partial form for posts, let's add the label form partial to it:\n\n```erb(app/views/posts/_form.html.erb)\n ...\n     <%= f.label :body %>\n     <%= f.text_area :body, rows: 8, class: 'form-control', placeholder: \"Enter post body\" %>\n   <% end %>\n\n <!-- #19 -->\n+  <div class=\"form-group\">\n+    <%= render partial: 'labels/form', locals: { f: f, topic: @topic, labels: @post.labels } %>\n+  </div>\n\n   <div class=\"form-group\">\n     <%= f.submit \"Save\", class: 'btn btn-success' %>\n   </div>\n```\n\nAt __#19__, we pass the label form partial the form as `f`, the current topic (`@topic`) as `topic`, and the labels associated with the current post (`@post.labels`), as `labels`.\n\nCheck the new and edit forms for both topics and posts at [localhost](http://localhost:3000). You should see the following:\n\n![New Form](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-labels/new_label_form.png)\n\nWe have a user interface to enter labels when creating and editing topics and posts. Create a topic or post with a new label. The label isn't displayed on the resulting view after creation since we haven't actually added the actions to the controller to create the labels when a topic or post is created.\n\n## Creating Labels from the Topic and Post Controllers\n\nTo submit labels from the topic __new__ and __edit__ views, we'll need to update the associated actions in `TopicsController`:\n\n```ruby(app/controllers/topics_controller.rb)\n...\n\n   def create\n     @topic = Topic.new(topic_params)\n\n     if @topic.save\n # #20\n+      @topic.labels = Label.update_labels(params[:topic][:labels])\n       flash[:notice] = \"Topic was saved successfully.\"\n       redirect_to @topic\n     else\n       flash.now[:alert] = \"Error creating topic. Please try again.\"\n       render :new\n     end\n   end\n...\n\n  def update\n     @topic = Topic.find(params[:id])\n\n     @topic.assign_attributes(topic_params)\n\n     if @topic.save\n # #21\n+      @topic.labels = Label.update_labels(params[:topic][:labels])\n       flash[:notice] = \"Topic was updated successfully.\"\n       redirect_to @topic\n     else\n       flash.now[:alert] = \"Error saving topic. Please try again.\"\n       render :edit\n     end\n   end\n\n...\n```\n\nAt __#20__ and __#21__, we wishfully call a class method named `update_labels` on `Label`. (We'll implement `update_labels` soon.) We pass it the labels associated with the current topic if the topic was saved successfully. We only update the labels if the save was successful so that we avoid creating labels without topics.\n\nLet's implement `update_labels` using TDD:\n\n```ruby(spec/models/label_spec.rb)\n...\n\n   let(:label) { Label.create!(name: 'Label') }\n+  let(:label2) { Label.create!(name: 'Label2') }\n\n...\n\n       expect(topic_label).to eql(post_label)\n     end\n   end\n\n+\n # #22\n+   describe \".update_labels\" do\n+     it \"takes a comma delimited string and returns an array of Labels\" do\n+       labels = \"#{label.name}, #{label2.name}\"\n+       labels_as_a = [label, label2]\n # #23\n+       expect(Label.update_labels(labels)).to eq(labels_as_a)\n+     end\n+   end\n  end\n```\n\nAt __#22__, we see `describe \".update_labels\" do`. We are using a `.` to describe `update_labels` because `update_labels` is a [class method](http://www.railstips.org/blog/archives/2009/05/11/class-and-instance-methods-in-ruby/). `update_labels` is a class method because it affects more than one `Label` at a time, thus it does not make sense to make it an instance method.\n\nAt __#23__, we expect `update_labels` to return an array of label objects which are parsed from the comma-delimited string that is passed in.\n\nRun the spec and note the failure:\n\n```bash(Terminal)\n$ rspec spec/models/label_spec.rb\n..F\n\nFailures:\n\n  1) Label#update_labels takes a comma delimited string and returns an array of Labels\n     Failure/Error: expect(update_labels(labels)).to eq(labels_as_a)\n     NoMethodError:\n       undefined method `update_labels' for #<RSpec::ExampleGroups::Label::UpdateLabels:0x007ff9040fc0f8>\n```\n\nLet's implement `update_labels` and pass the test:\n\n```ruby(app/models/label.rb)\n class Label < ActiveRecord::Base\n   has_many :labelings\n   has_many :topics, through: :labelings, source: :labelable, source_type: :Topic\n   has_many :posts, through: :labelings, source: :labelable, source_type: :Post\n\n+  def self.update_labels(label_string)\n # #24\n+    return Label.none if label_string.blank?\n+\n # #25\n+    label_string.split(\",\").map do |label|\n+      Label.find_or_create_by(name: label.strip)\n+    end\n+  end\nend\n```\n\nAt __#24__, we return if the `label_string` passed in is `blank`.\n\nAt __#25__, `update_labels` splits up `label_string` which is how we are storing our labels on the backend by splitting the string on a comma. For each label, we call `find_or_create` using the label name. This ensures that we never create a duplicate label.\n\nRun the spec and verify that the test passes:\n\n```bash(Terminal)\n$ rspec spec/models/label_spec.rb\n```\n\nTo submit labels from the post __new__ and __edit__ views, we'll update the associated actions in `PostsController`:\n\n```ruby(app/controllers/posts_controller.rb)\n...\n\n   def create\n     @topic = Topic.find(params[:topic_id])\n     @post = @topic.posts.build(post_params)\n     @post.user = current_user\n\n     if @post.save\n+      @post.labels = Label.update_labels(params[:post][:labels])\n       flash[:notice] = \"Post was saved successfully.\"\n       redirect_to [@topic, @post]\n     else\n\n...\n\n   def update\n     @post = Post.find(params[:id])\n     @post.assign_attributes(post_params)\n\n     if @post.save\n+      @post.labels = Label.update_labels(params[:post][:labels])\n       flash[:notice] = \"Post was updated successfully.\"\n       redirect_to [@post.topic, @post]\n     else\n\n...\n```\n\nOpen a topic and post __new__ or __edit__ view in your browser and create or update a topic or post with labels. Open the Rails console and confirm that the topic or post you updated has the labels you created for it.\n\n## Viewing Labels\n\nWe can create labels for topics and posts, but we can't view them on their __show__ views. Let's create a new partial to display labels:\n\n```bash(Terminal)\n$ touch app/views/labels/_list.html.erb\n```\n\nOpen the partial and add the following code:\n\n```erb(app/views/labels/_list.html.erb)\n+<% unless labels.empty?  %>\n<!-- #26 -->\n+  <%= labels_to_buttons(labels) %>\n+<% end %>\n```\n\nAt __#26__, if the labels array is not empty, we render the labels using a wishfully-coded helper method named `labels_to_buttons`.\n\nAs always, when we wishfully code a method we should implement it immediately. Let's create a test for `labels_to_buttons` in `labels_helper_spec.rb`:\n\n```ruby(spec/helpers/labels_helper_spec.rb)\n require 'rails_helper'\n\n # Specs in this file have access to a helper object that includes\n # the LabelsHelper. For example:\n #\n # describe LabelsHelper do\n #   describe \"string concat\" do\n #     it \"concats two strings with spaces\" do\n #       expect(helper.concat_strings(\"this\",\"that\")).to eq(\"this that\")\n #     end\n #   end\n # end\n RSpec.describe LabelsHelper, type: :helper do\n-  pending \"add some examples to (or delete) #{__FILE__}\"\n+  describe \"labels_to_buttons\" do\n+    it \"turns labels into HTML buttons\" do\n+      L1 = Label.create!(name: \"L1\")\n+      L2 = Label.create!(name: \"L2\")\n+      expected_html = '<a class=\"btn-xs btn-primary\" href=\"/labels/1\">L1</a> <a class=\"btn-xs btn-primary\" href=\"/labels/2\">L2</a>'\n # #27\n+      expect(labels_to_buttons([L1, L2])).to eq expected_html\n+    end\n+  end\nend\n```\n\nAt __#27__, given an array of `Label`s, we expect `labels_to_buttons` to generate HTML links that are stylizied as buttons. This test will fail since we haven't implemented the method. Let's write the implementation now:\n\n```ruby(app/helpers/labels_helper.rb)\n  module LabelsHelper\n # #28\n+   def labels_to_buttons(labels)\n+     raw labels.map { |l| link_to l.name, label_path(id: l.id), class: 'btn-xs btn-primary' }.join(' ')\n+   end\n  end\n```\n\nAt __#28__, there are a few new things happening:\n- [`raw`](http://api.rubyonrails.org/classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw) tells Ruby to call `map` without _escaping_ the string that is returned. Often times strings must be _escaped_ because they contain special characters in them that the parser will confuse as part of the program. Escaping a character in a string is typically done by prepending the character that needs to be _escaped_ with a `\\`. If we were to not use `raw` then ruby would escape the output of `labels.map` which would result in broken links and funny characters showing up in Bloccit.\n- `map` iterates over the labels array for each item in the array.\n- `map` creates a link (using `link_to`) to each label path using `label_path(id: l.id)`.\n- The link is displayed as `l.name` (the first parameter passed to `link_to`) and is styled by the third parameter to `link_to`, `class: 'btn-xs btn-primary'`.\n- We then join each of these HTML generated links and separate them with a space using `.join(' ')`.\n\n> The output of `labels.map{ ...` will look like the following:\n>\n> `<a class=\"btn-xs btn-primary\" href=\"/labels/1\">L1</a> <a class=\"btn-xs btn-primary\" href=\"/labels/2\">L2</a>`\n>\n> Notice how each link (`<a> </a>`) is separated by a space? This provides ample space between each CSS styled label. We separate each link by a space so that the labels aren't visually jammed together.\n\nEven though we wrote the implementation of `labels_to_buttons(labels)`, our specs in `labels_helper_spec.rb` won't pass. This is because `labels_to_buttons(labels)` uses the `label_path` method which does not exist yet. We need to add proper routes in order for `label_path` to function. Using resourceful routing, add a route to the **show** view for a label which will simultaneously provide us with a working `label_path` method:\n\n```ruby(config/routes.rb)\n...\n\n-  get 'labels/show'\n+  resources :labels, only: [:show]\n\n...\n```\n\nOur specs in `labels_helper_spec.rb ` should pass now that the routes are in place:\n\n```bash(terminal)\n $ rspec spec/helpers/labels_helper_spec.rb\n .\n\n Finished in 0.02863 seconds (files took 1.33 seconds to load)\n 1 example, 0 failures\n```\n\nWe have our partial for displaying a list of labels, so let's add it to the topic **show** view:\n\n```erb(app/views/topics/show.html.erb)\n...\n\n <div class=\"row\">\n   <div class=\"col-md-8\">\n-    <p class=\"lead\"><%= @topic.description %></p>\n+    <p class=\"lead\">\n+      <%= render partial: \"labels/list\", locals: { labels: @topic.labels } %>\n+      <br />\n+      <%= @topic.description %>\n+    </p>\n     <% @topic.posts.each do |post| %>\n       <div class=\"media\">\n         <div class=\"media-body\">\n           <h4 class=\"media-heading\">\n             <%= link_to post.title, topic_post_path(@topic, post) %>\n+            <%= render partial: \"labels/list\", locals: { labels: post.labels } %>\n           </h4>\n           <small>\n...\n```\n\nLet's also modify the post **show** view for labels:\n\n```erb(app/views/posts/show.html.erb)\n  <h1>\n    <%= @post.title %> <br>\n    <small>\n      submitted <%= time_ago_in_words(@post.created_at) %> ago by <%= @post.user.name %>\n    </small>\n  </h1>\n+ <div class=\"row\">\n+   <div class=\"col-md-8\">\n+     <%= render partial: \"labels/list\", locals: { labels: @post.labels } %>\n+     <br />\n+   </div>\n+ </div>\n+ <br />\n  <div class=\"row\">\n    <div class=\"col-md-8\">\n      <p><%= @post.body %></p>\n\n...\n```\n\nWe can now view labels in both the topic and post **show** views. Open the views and verify that you see a list of labels that you created earlier. Add more labels and confirm that they display as well.\n\n<center>\n![Labels](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-labels/bloccit-visual.png)\n</center>\n\nFinally, let's add the __show__ view for a label itself:\n\n```(app/views/labels/show.html.erb)\n- <h1>Labels#show</h1>\n- <p>Find me in app/views/labels/show.html.erb</p>\n+ <div class=\"row\">\n+   <div class=\"col-md-8\">\n+     <h1>Label: <%= @label.name %></h1>\n <!-- #29 -->\n+     <% @label.topics.each do |topic| %>\n+       <div>\n+         Topic: <%= link_to topic.name, topic %>\n+       </div>\n+     <% end %>\n <!-- #30 -->\n+     <% @label.posts.each do |post| %>\n+       <div>\n+         Post: <%= link_to post.title, topic_post_path(post.topic, post) %>\n+       </div>\n+     <% end %>\n+   </div>\n+ </div>\n```\n\nAt __#29__, we iterate through the label's associated topics and render a link to them using the topic name as the displayed text.\n\nAt __#30__, we iterate through the label's associated posts and render a link to them using the post title as the displayed text.\n\nExperiment with the new label **show** view in your browser, and take a deep breath. This was a challenging checkpoint!\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.\n\nDeploy to Heroku and migrate your production database:\n\n```bash(Terminal)\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\nOpen the production app to view and test the updates.\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Many-To-Many Relationship](https://en.wikipedia.org/wiki/Many-to-many_%28data_model%29) | In Bloccit, we have many topics, posts, and labels. The many-to-many relationship provides labels with the flexibility to belong to more than one object, and our topics and posts the ability to have more than one label. If you'd like an additional explanation on many-to-many relationships in Ruby, here's a [railscast](http://railscasts.com/episodes/47-two-many-to-many) which covers the topic. |\n| [Polymorphic Associations](http://guides.rubyonrails.org/association_basics.html#polymorphic-associations) | A polymorphic object is one whose operations can also be applied to values of some other type, or types. We use polymorphism in Bloccit to create a `labelable` interface so that labels can be associated with more than one other object type, namely a topic or post. |",
          "assignment": "Create a new Git branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nAll feedback is a gift, so let's give Bloccit users the ability to leave comments on topics as well as posts.\n\n1. Associate comments with topics as well as posts. This will allow users to comment on a topic as well as a post.\n\n  Comments should:\n\n  1. Belong to posts;\n  2. Belong to topics;\n\n  Topics should:\n\n  1. Have many posts;\n  2. Have many comments;\n\n2. Display comments on the topic **show** view.\n\n3. Add `create` and `destroy` comment routes under topics.\n\n4. Update the comment `_comment` and `_form` partials to handle comments that belong to topics.\n\n5. Update `CommentsController` to handle comments belonging to topics and posts.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.",
          "roadmap_section_id": 120,
          "active_index": 42,
          "checkpoint_type": "normal",
          "position": 42,
          "points": 1,
          "ref": "ebe1b53d-cd7a-4354-bd4d-548e0674d610|0"
        },
        {
          "id": 1654,
          "name": "Rails: Voting",
          "summary": "Voting: allowing users to vote on and algorithmically rank posts",
          "body": "<!-- { ids:[1654], name:'Rails: Voting', summary:'Voting: allowing users to vote on and algorithmically rank posts' } -->\n\n<center>\n  ![voted](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-voting/voted.png)\n</center>\n\n> “If voting changed anything, they'd make it illegal.”\n>\n> — Emma Goldman\n\n## Let's Vote!\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/jmovhyern8\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nAs Bloccit grows there will be thousands of posts, and users will want a feature to distinguish the good from the bad. We'll build a voting feature to allow users to up or down vote posts.\n\n![votes](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-voting/vote-example.png)\n\nTo get users to the Bloccit Ballot Box we'll need to do the following:\n\n* Create a `Vote` model to handle vote data. The `Vote` model will be associated with the `User` and `Post` models;\n* Add elements to the UI to allow users to vote on posts. Users should only be able to vote once on a given post;\n* Sort the posts for a given topic in order of highest votes to lowest votes. We should also create a simple time-decay algorithm to keep our feed fresh with new posts.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## The Vote Model\n\nCreate a `Vote` model with attributes for `value` (an integer), a reference to users, and a reference to posts:\n\n```bash(Terminal)\n$ rails g model Vote value:integer user:references:index post:references:index\n```\n\nCreate the votes table:\n\n```bash(Terminal)\n$ rake db:migrate\n```\n\nLet's TDD the basic properties of the `Vote` model:\n\n```ruby(spec/models/vote_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Vote, type: :model do\n-  pending \"add some examples to (or delete) #{__FILE__}\"\n+  let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n+  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n+  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n+  let(:vote) { Vote.create!(value: 1, post: post, user: user) }\n+\n # #1\n+  it { is_expected.to belong_to(:post) }\n+  it { is_expected.to belong_to(:user) }\n # #2\n+  it { is_expected.to validate_presence_of(:value) }\n # #3\n+  it { is_expected.to validate_inclusion_of(:value).in_array([-1, 1]) }\n end\n```\n\nAt __#1__, we test that votes belong to posts and users.\n\nAt __#2__, we test that `value` is present when votes are created.\n\nAt __#3__, we validate that `value` is either `-1` (a down vote) or `1` (an up vote).\n\nRun the spec:\n\n```bash(Terminal)\n$ rspec spec/models/vote_spec.rb\n```\n\nNote that the two `value` validations tests are failing. Let's add the validations necessary so that the tests pass:\n\n```ruby(app/models/vote.rb)\n class Vote < ActiveRecord::Base\n   belongs_to :user\n   belongs_to :post\n+\n+  validates :value, inclusion: { in: [-1, 1], message: \"%{value} is not a valid vote.\" }, presence: true\n end\n```\n\nThe [inclusion validation](http://guides.rubyonrails.org/active_record_validations.html#inclusion) ensures that `value` is assigned either a `-1` or `1`. Run the spec again:\n\n```bash(Terminal)\n$ rspec spec/models/vote_spec.rb\n```\n\n... and all the tests will pass. Let's add tests to `post_spec.rb` and `user_spec.rb` to test the association between posts, users, and votes:\n\n```ruby(spec/models/post_spec.rb)\n ...\n   it { is_expected.to have_many(:comments) }\n+  it { is_expected.to have_many(:votes) }\n ...\n```\n\n```ruby(spec/models/user_spec.rb)\n ...\n   it { is_expected.to have_many(:comments) }\n+  it { is_expected.to have_many(:votes) }\n ...\n```\n\nRun each spec:\n\n```bash(Terminal)\n$ rspec spec/models/post_spec.rb\n$ rspec spec/models/user_spec.rb\n```\n\nEach spec will have one failure for the vote association. Let's update `Post` and `User` to reflect their association with votes and pass the tests:\n\n```ruby(app/model/post.rb)\n class Post < ActiveRecord::Base\n   belongs_to :topic\n   belongs_to :user\n   has_many :comments, dependent: :destroy\n # #4\n+  has_many :votes, dependent: :destroy\n ...\n```\n\nAt __#4__, we add the `votes` association to `Post`. This relates the models and allows us to call `post.votes`. We also add `dependent: :destroy` to ensure that votes are destroyed when their parent post is deleted.\n\nUpdate `User` in a similar fashion:\n\n```ruby(app/model/user.rb)\n class User < ActiveRecord::Base\n-  has_many :posts\n-  has_many :comments\n+  has_many :posts, dependent: :destroy\n+  has_many :comments, dependent: :destroy\n+  has_many :votes, dependent: :destroy\n ...\n```\n\nWe also updated the `posts` and `comments` associations so that all dependent posts, comments, and votes are destroyed when their parent user is deleted. Run the specs again and they will all pass:\n\n```bash(Terminal)\n$ rspec spec/models/post_spec.rb\n$ rspec spec/models/user_spec.rb\n```\n\n## Implementing Voting Methods\n\nWe can see how many votes have been cast on a `post` by calling `post.votes`, thanks to the `has_many :votes` declaration in `Post`. We'll also want a way to view only up votes, only down votes, and the sum of all up and down votes. We'll add methods to `Post` to accomplish this. We'll use TDD to define the expected behavior of `up_votes`, `down_votes`, and `points`:\n\n```ruby(spec/models/post_spec.rb)\n ...\n\n   describe \"attributes\" do\n     it \"has title and body attributes\" do\n       expect(post).to have_attributes(title: title, body: body)\n     end\n   end\n\n+  describe \"voting\" do\n # #5\n+    before do\n+      3.times { post.votes.create!(value: 1) }\n+      2.times { post.votes.create!(value: -1) }\n+      @up_votes = post.votes.where(value: 1).count\n+      @down_votes = post.votes.where(value: -1).count\n+    end\n+\n # #6\n+    describe \"#up_votes\" do\n+      it \"counts the number of votes with value = 1\" do\n+        expect( post.up_votes ).to eq(@up_votes)\n+      end\n+    end\n+\n # #7\n+    describe \"#down_votes\" do\n+      it \"counts the number of votes with value = -1\" do\n+        expect( post.down_votes ).to eq(@down_votes)\n+      end\n+    end\n+\n # #8\n+    describe \"#points\" do\n+      it \"returns the sum of all down and up votes\" do\n+        expect( post.points ).to eq(@up_votes - @down_votes)\n+      end\n+    end\n+  end\n end\n```\n\nAt __#5__, we create three up votes and two down votes before each voting spec.\n\nAt __#6__, we test that `up_votes` returns the count of up votes\n\nAt __#7__, we test that `down_votes` returns the count of down votes.\n\nAt __#8__, we test that `points` returns the sum of all votes on the post.\n\nRun `post_spec.rb`:\n\n```bash(Terminal)\n$ rspec spec/models/post_spec.rb\n```\n\n... and note the three failing specs, because we haven't implemented the methods in `Post`. Let's pass these tests by implementing `up_votes`, `down_votes`, and `points`:\n\n```ruby(app/models/post.rb)\n   ...\n   validates :user, presence: true\n+\n+  def up_votes\n # #9\n+    votes.where(value: 1).count\n+  end\n+\n+  def down_votes\n # #10\n+    votes.where(value: -1).count\n+  end\n+\n+  def points\n # #11\n+    votes.sum(:value)\n+  end\n end\n```\n\n> Remember that `votes` in the above code is an implied `self.votes`.\n\nAt __#9__, we find the up votes for a post by passing `value: 1` to `where`. This fetches a collection of votes with a value of `1`. We then call `count` on the collection to get a total of all up votes.\n\nAt __#10__, we find the down votes for a post by passing `value: -1` to `where`. `where(value: -1)` fetches only the votes with a value of `-1`. We then call `count` on the collection to get a total of all up votes.\n\nAt __#11__, we use ActiveRecord's `sum` method to add the value of all the given post's votes. Passing `:value` to `sum` tells it what attribute to sum in the collection.\n\nRun `post_spec.rb` to confirm that we've implemented the voting methods as we planned, and note that all tests pass:\n\n```bash(Terminal)\n$ rspec spec/models/post_spec.rb\n```\n\nLet's seed votes into our development database so we have more sample data to work with:\n\n```ruby(db/seeds.rb)\n ...\n # Create Posts\n 50.times do\n-  Post.create!(\n+  post = Post.create!(\n     user:   users.sample,\n     topic:  topics.sample,\n     title:  RandomData.random_sentence,\n     body:   RandomData.random_paragraph\n   )\n+\n # #12\n+  post.update_attribute(:created_at, rand(10.minutes .. 1.year).ago)\n # #13\n+  rand(1..5).times { post.votes.create!(value: [-1, 1].sample, user: users.sample) }\n\n ...\n\n puts \"#{Topic.count} topics created\"\n puts \"#{Post.count} posts created\"\n puts \"#{Comment.count} comments created\"\n+puts \"#{Vote.count} votes created\"\n```\n\nAt __#12__, we update the time a post was created. This makes our seeded data more realistic and will allow us to see our ranking algorithm in action later in the checkpoint.\n\nAt __#13__, we create between one and five votes for each post. `[-1, 1].sample` randomly creates either an up vote or a down vote.\n\nReseed the database to insert voting data:\n\n```bash(Terminal)\n$ rake db:reset\n```\n\n## Implementing the UI\n\nLet's implement the UI to allow Bloccit users to up and down vote posts. To start we'll need to generate `VotesController`:\n\n```bash(Terminal)\n$ rails generate controller Votes\n```\n\nWe'll keep the UI for voting simple and use Reddit-like up and down arrows, with a score shown between the arrows. To build this, we'll need three separate divs, one for each arrow and one for the score. We'll also surround the three divs with an outer div that groups the three elements together. Voting is sufficiently distinct and repeatable to merit a separate partial, in which to store the modular view elements for a voter user interface. Create the following partial file:\n\n```bash(Terminal)\n$ touch app/views/votes/_voter.html.erb\n```\n\n```erb(app/views/votes/_voter.html.erb)\n+<div>\n+  <div><%= link_to \" \", '#', class: 'glyphicon glyphicon-chevron-up' %></div>\n+  <div><strong><%= post.points %></strong></div>\n+  <div><%= link_to \" \", '#', class: 'glyphicon glyphicon-chevron-down' %></div>\n+</div>\n```\n\nBecause we haven't yet determined these links' locations yet, we stubbed their paths in the `link_to` methods.\n\n> A pound sign in quotes — '#' or \"#\" — is the conventional path for a pending or stubbed link.\n\nUsers should be able to vote on each post, so we need to `render` our __voter__ partial wherever we show posts. There are two places we do that -  the posts __show__ view and the topics __show__ view. Add the call to `render` to the posts __show__ view:\n\n```erb(app/views/posts/show.html.erb)\n-<h1>\n-  <%= @post.title %> <br>\n-  <small>\n-    submitted <%= time_ago_in_words(@post.created_at) %> ago by <%= @post.user.name %>\n-  </small>\n-</h1>\n+<div>\n+  <%= render partial: 'votes/voter', locals: { post: @post } %>\n+  <h1>\n+    <%= @post.title %> <br>\n+    <small>\n+      submitted <%= time_ago_in_words(@post.created_at) %> ago by <%= @post.user.name %>\n+    </small>\n+  </h1>\n+</div>\n ...\n```\n\n> Because the partial has access to the `@post` variable, we don't technically need to pass it here. Other views where we would like to incorporate this partial might not have an identical `@post` variable, however, so it's a good idea to pass `post` in explicitly, rather than implicitly expect `@post`. This is why the partial we created references `post` instead of `@post`.\n\n## Styling the Voter\n\nOpen Bloccit in the browser and view the posts __show__ view:\n\n![unstyled-voting-arrows](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-voting/unstyled-voting-arrows.png)\n\nThere are a couple display issues with the __voter__ partial. The `post.title` should be aligned horizontally with the __voter__ partial, and `post.points` should be aligned vertically with the up and down arrows. Let's fix these styling issues.\n\nWe can polish the formatting using custom CSS. Open `app/assets/stylesheets/votes.scss` and add the following CSS rule:\n\n```scss(app/assets/stylesheets/votes.scss)\n+.vote-arrows {\n+  width: 40px;\n+  text-align: center;\n+}\n```\n\nThen add `.vote-arrows` and the Bootstrap class `.pull-left` to the outermost div in `app/views/votes/_voter.html.erb`, to justify the contents of that partial to the left.\n\n```erb(app/views/votes/_voter.html.erb)\n-<div>\n+<div class=\"vote-arrows pull-left\">\n   <div><%= link_to \" \", '#', class: 'glyphicon glyphicon-chevron-up' %></div>\n   <div><strong><%= post.points %></strong></div>\n   <div><%= link_to \" \", '#', class: 'glyphicon glyphicon-chevron-down' %></div>\n </div>\n```\n\nRefresh the posts __show__ view and notice how much better it's looking. We can still improve it though, perhaps by displaying the vote tally of the post more prominently. Let's use the methods we added to `Post` to make the __show__ view even cooler:\n\n```erb(app/views/posts/show.html.erb)\n ...\n   <% if user_is_authorized_for_post?(@post) %>\n     <div class=\"col-md-4\">\n       <%= link_to \"Edit Post\", edit_topic_post_path(@post.topic, @post), class: 'btn btn-success' %>\n       <%= link_to \"Delete Post\", [@post.topic, @post], method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure you want to delete this post?' } %>\n     </div>\n   <% end %>\n+  <div class=\"col-md-4\">\n+    <h3>\n // #14\n+      <%= pluralize(@post.points, 'point') %>\n+      <div>\n+        <small>\n+          <%= pluralize(@post.up_votes, 'up vote') %>,\n+          <%= pluralize(@post.down_votes, 'down vote') %>\n+        </small>\n+      </div>\n+    </h3>\n+  </div>\n </div>\n```\n\nAt __#14__, we use the [`pluralize` helper method](http://apidock.com/rails/ActionView/Helpers/TextHelper/pluralize) to display the correctly pluralized forms of \"point\", \"up vote\", and \"down vote\".\n\nRefresh the view in localhost and see how easy it is to view a post's votes.\n\n<center>\n  ![post-show-with-votes](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-voting/post-show-with-votes.png)\n</center>\n\n## Votes on the Topics Show View\n\nThe topics __show__ view should `render` the __voter__ partial as well so that users are able to vote on posts without clicking on the post view, thus making voting a little more convenient for users:\n\n```erb(app/views/topics/show.html.erb)\n ...\n     <% @topic.posts.each do |post| %>\n       <div class=\"media\">\n+        <%= render partial: 'votes/voter', locals: { post: post } %>\n ...\n```\n\nBecause our voter partial is DRY and modular, no other change is needed. View the modified topics __show__ view in the browser.\n\n## Routing Votes\n\nIn the __voter__ partial, we stubbed out the destination URL in the `link_to` methods, but we'll need to update this so the vote arrow links point to the correct vote routes. Votes are different than topics or posts, because they do not need a complete RESTful resource. In other words, there are no forms or specific views for votes, only the links in the `voter` partial. Our best option is to create a couple of routes manually in `routes.rb`:\n\n```ruby(config/routes.rb)\n Rails.application.routes.draw do\n   resources :topics do\n     resources :posts, except: [:index]\n   end\n\n   resources :posts, only: [] do\n     resources :comments, only: [:create, :destroy]\n\n+    post '/up-vote' => 'votes#up_vote', as: :up_vote\n+    post '/down-vote' => 'votes#down_vote', as: :down_vote\n   end\n ...\n```\n\nThese new lines create `POST` routes at the URL `posts/:id/up-vote` and `posts/:id/down-vote`. The `as` key-value pairs at the end stipulate the method names which will be associated with these routes: `up_vote_path` and `down_vote_path`.\n\n> Why are we declaring these routes as `POST` requests? What other actions are defined as `POST` requests? What do all these actions have in common?\n\nNow that we have valid routes, we can update the `link_to` methods in the `voter` partial:\n\n```erb(app/views/votes/_voter.html.erb)\n <div class=\"vote-arrows pull-left\">\n-  <div><%= link_to \" \", '#', class: 'glyphicon glyphicon-chevron-up' %></div>\n // #15\n+  <div><%= link_to \" \", post_up_vote_path(post), class: 'glyphicon glyphicon-chevron-up', method: :post %></div>\n  <div><strong><%= post.points %></strong></div>\n-  <div><%= link_to \" \", '#', class: 'glyphicon glyphicon-chevron-down' %></div>\n // #16\n+  <div><%= link_to \" \", post_down_vote_path(post), class: 'glyphicon glyphicon-chevron-down', method: :post %></div>\n </div>\n```\n\nAt __#15__ and __#16__, we used `method: :post`, because `link_to` generates `GET` requests by default.\n\nClick on an up vote link and see an error like this:\n\n![unknown-action](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-voting/unknown-action.png)\n\nThis is because `VotesController` is empty. We've defined the routes, but have not written the controller methods.\n\n## Implementing the Votes Controller\n\nWe'll need to define two methods in `VotesController` to serve as the endpoints for the `up_vote` and `down_vote` routes. We'll start by TDDing the expected behavior of the `up_vote` action:\n\n```ruby(spec/controllers/votes_controller_spec.rb)\n require 'rails_helper'\n+include SessionsHelper\n+\n RSpec.describe VotesController, type: :controller do\n+  let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n+  let(:other_user) { User.create!(name: RandomData.random_name, email: RandomData.random_email, password: \"helloworld\", role: :member) }\n+  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n+  let(:user_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: other_user) }\n+  let(:my_vote) { Vote.create!(value: 1) }\n+\n # #17\n+  context \"guest\" do\n+    describe \"POST up_vote\" do\n+      it \"redirects the user to the sign in view\" do\n+        post :up_vote, post_id: user_post.id\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n+  end\n+\n # #18\n+  context \"signed in user\" do\n+    before do\n+      create_session(my_user)\n+      request.env[\"HTTP_REFERER\"] = topic_post_path(my_topic, user_post)\n+    end\n+\n+    describe \"POST up_vote\" do\n # #19\n+      it \"the users first vote increases number of post votes by one\" do\n+        votes = user_post.votes.count\n+        post :up_vote, post_id: user_post.id\n+        expect(user_post.votes.count).to eq(votes + 1)\n+      end\n+\n # #20\n+      it \"the users second vote does not increase the number of votes\" do\n+        post :up_vote, post_id: user_post.id\n+        votes = user_post.votes.count\n+        post :up_vote, post_id: user_post.id\n+        expect(user_post.votes.count).to eq(votes)\n+      end\n+\n # #21\n+      it \"increases the sum of post votes by one\" do\n+        points = user_post.points\n+        post :up_vote, post_id: user_post.id\n+        expect(user_post.points).to eq(points + 1)\n+      end\n+\n # #22\n+      it \":back redirects to posts show page\" do\n+        request.env[\"HTTP_REFERER\"] = topic_post_path(my_topic, user_post)\n+        post :up_vote, post_id: user_post.id\n+        expect(response).to redirect_to([my_topic, user_post])\n+      end\n+\n # #23\n+      it \":back redirects to posts topic show\" do\n+        request.env[\"HTTP_REFERER\"] = topic_path(my_topic)\n+        post :up_vote, post_id: user_post.id\n+        expect(response).to redirect_to(my_topic)\n+      end\n+    end\n+  end\n end\n```\n\nAt __#17__, we test that unsigned-in users are redirected to the sign-in page, as they will not be allowed to vote on posts.\n\nAt __#18__, we create a context to test signed-in users, who should be allowed to vote on posts.\n\nAt __#19__, we expect that the first time a user up votes a post, a new vote is created for the post.\n\nAt __#20__, we test that a new vote is not created if the user repeatedly up votes a post.\n\nAt __#21__, we expect that up voting a post will increase the number of points on the post by one.\n\nAt __#22__ and __#23__, we test to ensure that users are redirected back to the correct view (posts __show__ or topics __show__) depending on which view they up voted from. We do this by setting `request.env[\"HTTP_REFERER\"]` to the requesting URL.\n\nRun `votes_controller_spec.rb` and see the six new failures:\n\n```bash(Terminal)\n$ rspec spec/controllers/votes_controller_spec.rb\n```\n\nFrom our tests, we know that `up_vote` should find the relevant vote if one already exists for that post and the current user. It should update the vote if it exists, or create a new one if not. Our tests have told us what to implement, so let's do that now:\n\n```ruby(app/controllers/votes_controller.rb)\n class VotesController < ApplicationController\n # #24\n+  before_action :require_sign_in\n+\n+  def up_vote\n+    @post = Post.find(params[:post_id])\n+    @vote = @post.votes.where(user_id: current_user.id).first\n+\n+    if @vote\n+      @vote.update_attribute(:value, 1)\n+    else\n+      @vote = current_user.votes.create(value: 1, post: @post)\n+    end\n+\n # #25\n+    redirect_to :back\n+  end\nend\n```\n\nAt __#24__, we require user to be signed-in before they're allowed to vote on a post.\n\nAt __#25__, we redirect the user [back](http://apidock.com/rails/ActionController/Redirecting/redirect_to) to the view that issued the request.\n\nRun the specs to confirm that they pass, then up vote a post in the browser to test it yourself.\n\n```bash(Terminal)\n$ rspec spec/controllers/votes_controller_spec.rb\n```\n\nLet's TDD down voting:\n\n```ruby(spec/controllers/votes_controller_spec.rb)\n ...\n   context \"guest\" do\n     describe \"POST up_vote\" do\n       it \"redirects the user to the sign in view\" do\n         post :up_vote, post_id: user_post.id\n         expect(response).to redirect_to(new_session_path)\n       end\n     end\n+\n+    describe \"POST down_vote\" do\n+      it \"redirects the user to the sign in view\" do\n+        post :down_vote, post_id: user_post.id\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n   end\n\n   context \"signed in user\" do\n ...\n+    describe \"POST down_vote\" do\n+      it \"the users first vote increases number of post votes by one\" do\n+        votes = user_post.votes.count\n+        post :down_vote, post_id: user_post.id\n+        expect(user_post.votes.count).to eq(votes + 1)\n+      end\n+\n+      it \"the users second vote does not increase the number of votes\" do\n+        post :down_vote, post_id: user_post.id\n+        votes = user_post.votes.count\n+        post :down_vote, post_id: user_post.id\n+        expect(user_post.votes.count).to eq(votes)\n+      end\n+\n+      it \"decreases the sum of post votes by one\" do\n+        points = user_post.points\n+        post :down_vote, post_id: user_post.id\n+        expect(user_post.points).to eq(points - 1)\n+      end\n+\n+      it \":back redirects to posts show page\" do\n+        request.env[\"HTTP_REFERER\"] = topic_post_path(my_topic, user_post)\n+        post :down_vote, post_id: user_post.id\n+        expect(response).to redirect_to([my_topic, user_post])\n+      end\n+\n+      it \":back redirects to posts topic show\" do\n+        request.env[\"HTTP_REFERER\"] = topic_path(my_topic)\n+        post :down_vote, post_id: user_post.id\n+        expect(response).to redirect_to(my_topic)\n+      end\n+    end\n   end\n end\n```\n\nRun the spec again and confirm that the six down vote specs are failing:\n\n```bash(Terminal)\n$ rspec spec/controllers/votes_controller_spec.rb\n```\n\nAdd a method for `down_vote` to pass the new down vote failures:\n\n```ruby(app/controllers/votes_controller.rb)\n class VotesController < ApplicationController\n ...\n+\n+  def down_vote\n+    @post = Post.find(params[:post_id])\n+    @vote = @post.votes.where(user_id: current_user.id).first\n+\n+    if @vote\n+      @vote.update_attribute(:value, -1)\n+    else\n+      @vote = current_user.votes.create(value: -1, post: @post)\n+    end\n+\n+    redirect_to :back\n+  end\n ...\n```\n\nRun the specs again and all tests should pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/votes_controller_spec.rb\n```\n\nWe could stop here, but our code isn't very DRY. We have separate methods with a lot of overlapping code, so we should think of a DRYer way to implement this feature. Let's extract the duplicate logic into a separate method for updating vote values. By doing this, we keep `up_vote` and `down_vote` very simple. Add `private` method named `update_vote`:\n\n```ruby(app/controllers/votes_controller.rb)\n class VotesController < ApplicationController\n   before_action :require_sign_in\n\n-  def up_vote\n-    @post = Post.find(params[:post_id])\n-    @vote = @post.votes.where(user_id: current_user.id).first\n-\n-    if @vote\n-      @vote.update_attribute(:value, 1)\n-    else\n-      @vote = current_user.votes.create(value: 1, post: @post)\n-    end\n-\n-    redirect_to :back\n-  end\n+  def up_vote\n+    update_vote(1)\n+    redirect_to :back\n+  end\n-  def down_vote\n-    @post = Post.find(params[:post_id])\n-    @vote = @post.votes.where(user_id: current_user.id).first\n-\n-    if @vote\n-      @vote.update_attribute(:value, -1)\n-    else\n-      @vote = current_user.votes.create(value: -1, post: @post)\n-    end\n-\n-    redirect_to :back\n-  end\n+  def down_vote\n+    update_vote(-1)\n+    redirect_to :back\n+  end\n+\n+  private  \n+  def update_vote(new_value)\n+    @post = Post.find(params[:post_id])\n+    @vote = @post.votes.where(user_id: current_user.id).first\n+\n+    if @vote\n+      @vote.update_attribute(:value, new_value)\n+    else\n+      @vote = current_user.votes.create(value: new_value, post: @post)\n+    end\n+  end\n end\n```\n\nRun the spec again:\n\n```bash(Terminal)\n$ rspec spec/controllers/votes_controller_spec.rb\n```\n\nNote that all tests still pass, so we know our changes have changed the factor of the code, but not its behavior. This is one of the wonderful things about TDD and testing in general. We were able to confidently refactor code without worry of breaking the feature. Manually test up and down voting posts in the browser.\n\n## Toggling the Voter Partial\n\nWe're currently displaying the __voter__ partial to all users, but only allowing signed in users to actually vote. Let's update the partial so that only signed in users will be allowed to see it, and avoid potential confusion from users who are not signed in:\n\n```erb(app/views/votes/_voter.html.erb)\n+<% if current_user %>\n   <div class=\"vote-arrows pull-left\">\n   ...\n+<% end %>\n```\n\nSign out of Bloccit, voting links should no longer be displayed.\n\n## Ranking Posts\n\nNow that we have a way to create values for posts, we should leverage it to order posts more intelligently. We'll want to store the rank of a post to make them easier to order, so let's add an attribute for it in the `posts` table:\n\n```bash(Terminal)\n$ rails g migration AddRankToPosts rank:float\n$ rake db:migrate\n```\n\n> We created the `rank` attribute as a `float` (decimal) to have greater flexibility with ranking algorithms later.\n\nWe need to rank the posts after each vote is cast. This is a perfect opportunity to use an `after_save` [callback](http://guides.rubyonrails.org/active_record_callbacks.html). Add tests to `vote_spec.rb` to define the expectations for the callback:\n\n```ruby(spec/models/vote_spec.rb)\n ...\n+  describe \"update_post callback\" do\n+    it \"triggers update_post on save\" do\n # #26\n+      expect(vote).to receive(:update_post).at_least(:once)\n+      vote.save!\n+    end\n+\n+    it \"#update_post should call update_rank on post \" do\n # #27\n+      expect(post).to receive(:update_rank).at_least(:once)\n+      vote.save!\n+    end\n+  end\n end\n```\n\nAt __#26__, we expect `update_post_rank` to be called on `vote` after it's saved.\n\nAt __#27__, we expect that the `vote`'s `post` will receive a call to `update_rank`.\n\nRun `vote_spec.rb` and note the two failures:\n\n```bash(Terminal)\n$ rspec spec/models/vote_spec.rb\n```\n\nLet's add the callback to `Vote` and pass the tests:\n\n```ruby(app/models/vote.rb)\n class Vote < ActiveRecord::Base\n   belongs_to :user\n   belongs_to :post\n+  after_save :update_post\n\n   validates :value, inclusion: { in: [-1, 1], message: \"%{value} is not a valid vote.\" }, presence: true\n\n+  private\n+\n+  def update_post\n+    post.update_rank\n+  end\n end\n```\n\nRun the spec and note that there are still two failures:\n\n```bash(Terminal)\n$ rspec spec/models/vote_spec.rb\n```\n\nThe `after_save` method will run `update_post` every time a `vote` is saved. The `update_post` method **wishfully** calls a method named `update_rank` on a vote's `post` object. We haven't created `update_rank` in `Post` yet, so open `post_spec.rb` and add the tests for it:\n\n```ruby(spec/models/post_spec.rb)\n ...\n     describe \"#points\" do\n       it \"returns the sum of all down and up votes\" do\n         expect( post.points ).to eq(1) # 3 - 2\n       end\n     end\n\n+    describe \"#update_rank\" do\n # #28\n+      it \"calculates the correct rank\" do\n+        post.update_rank\n+        expect(post.rank).to eq (post.points + (post.created_at - Time.new(1970,1,1)) / 1.day.seconds)\n+      end\n+\n+      it \"updates the rank when an up vote is created\" do\n+        old_rank = post.rank\n+        post.votes.create!(value: 1)\n+        expect(post.rank).to eq (old_rank + 1)\n+      end\n+\n+      it \"updates the rank when a down vote is created\" do\n+        old_rank = post.rank\n+        post.votes.create!(value: -1)\n+        expect(post.rank).to eq (old_rank - 1)\n+      end\n+    end\n   end\n end\n```\nAt __#28__ we expect that a post's rank will be determined by the following calculation:\n\n* Determine the age of the post by subtracting a standard time from its `created_at` time. A standard time in this context is known as an [epoch](http://dictionary.reference.com/browse/epoch). This makes newer posts start with a higher ranking, which decays over time;\n\n> The epoch we chose is slightly arbitrary, though it's commonly used in time-based ranking algorithms. January 1, 1970 is significant because it's [Unix Time Zero](http://en.wikipedia.org/wiki/Unix_time). Reddit, for example, uses an epoch of January 1, 2005 for their [ranking algorithm](https://github.com/reddit/reddit/blob/master/r2/r2/lib/db/_sorts.pyx#L55). Check out [this link](http://www.wolframalpha.com/input/?i=january+1st+1970+%2B+1134028003+seconds) for an explanation of the use of 1134028003.\n\n* Divide the distance in seconds since the epoch by the number of seconds in a day. This gives us the age in days;\n\n* Add the points (i.e. sum of the votes) to the age. This means that the passing of one day will be equivalent to one down vote;\n\n> Using a time-decay algorithm like this will keep our post ranks fresh. If we didn't use time-decay, a highly ranked but out-of-date post could remain at the top of list for years. Think about how annoying it would be to see \"MAN WALKS ON THE MOON\" at the top of Bloccit, 46 years after it happened.\n\n<center>\n  ![we_landed_on_the_moon](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-voting/we_landed_on_the_moon.gif)\n</center>\n\nRun `post_spec.rb` and notice that we have six failing tests, because caused by the missing `update_rank` method. We have six failing tests instead of just three because whenever we create a vote, we call the `update_rank` method. Let's implement `update_rank` and pass the failing tests in `vote_spec.rb` and `post_spec.rb`:\n\n```ruby(app/models/post.rb)\n   ...\n+  def update_rank\n+    age_in_days = (created_at - Time.new(1970,1,1)) / 1.day.seconds\n+    new_rank = points + age_in_days\n+    update_attribute(:rank, new_rank)\n+  end\n end\n```\n\nRun both specs, and all tests should pass:\n\n```bash(Terminal)\n$ rspec spec/models/vote_spec.rb\n$ rspec spec/models/post_spec.rb\n```\n\nNow that we have a `rank` that's determined by an algorithm, we'll employ it in the `default_scope`, so that posts are ordered by rank by default. Since we want the largest rank numbers displayed first, we'll use descending (`DESC`) order. Update the current `default_scope` declaration with `'rank DESC'`:\n\n```ruby(app/models/post.rb)\n class Post < ActiveRecord::Base\n ...\n-  default_scope { order('created_at DESC') }\n+  default_scope { order('rank DESC') }\n ...\n```\n\nExisting posts won't have their rank updated until they're voted on. Reseed the database to set the rank for all posts using `rake db:reset`.\n\nThe topics __show__ view will now display posts by their rank. Visit the view, create a couple of new posts, and observe what happens when you vote them up or down.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.\n\nDeploy to Heroku and migrate your production database:\n\n```bash(Terminal)\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [`belongs_to` Association`](http://guides.rubyonrails.org/association_basics.html#the-belongs-to-association) | The `belongs_to` association establishes a one-to-one connection from one model to another. Each instance of the declaring model `belongs_to` an instance of the parent model. |\n| [`has_many` Association`](http://guides.rubyonrails.org/association_basics.html#the-has-many-association) | A `has_many` association establishes a one-to-many connection from one model to many others. Each instance of the declaring model has zero or more instances of the child model. |\n| [POST request](http://en.wikipedia.org/wiki/POST_%28HTTP%29) | A POST request is designed to request that a web server accept the data enclosed in the request message's body for storage. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nIt's safe to assume that if a user submits a `post`, they'll want to vote it up. Use TDD to complete this assignment.\n\n  1. Implement an `after_create` method for `Post`. This method will create a new vote for the post on which it's called, associated with both the post and the user who created it.\n  2. Name the `after_create` method `create_vote` and make it private.\n  3. In `create_vote`, use `user.votes.create`, and set the `post` association to equal `self`, and the `value` to equal `1`.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/krvxqphdnv?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Voting Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 43,
          "checkpoint_type": "normal",
          "position": 43,
          "points": 1,
          "ref": "fb19b653-5634-43a0-b279-26eccf33da4f|0"
        },
        {
          "id": 1656,
          "name": "Rails: Favorites",
          "summary": "Favorites: following posts and receiving email updates",
          "body": "<!-- { ids:[1656], name:'Rails: Favorites', summary:'Favorites: following posts and receiving email updates' } -->\n\n<center>\n  ![pooh-and-piglet](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-favoriting/pooh-and-piglet.jpg)\n</center>\n\n> “What day is it?”</br>\n> “It's today,” squeaked Piglet.</br>\n> “My favorite day,” said Pooh.\n\n## Favoriting Posts\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/2cb3siuycs\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nMost social web apps allow users to opt-in for notifications. We'll build a favoriting feature to allow users to flag posts to notify them when a post receives a new comment.\n\nLet's think about the functionality we'll need to build:\n\n* A model to track which posts a user has favorited;\n* A __Favorite__ button on the posts __show__ view to allow users to flag a post as a favorite;\n* A notification feature which emails users when one of their favorited posts receives a new comment.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Implementing the Favorite Model\n\nWe need a new model to track which posts a user has favorited. We'll associate this model, `Favorite`, with the user who flagged the post as a favorite, as well as with the post flagged as a favorite. Let's generate `Favorite`:\n\n```bash(Terminal)\n$ rails generate model favorite user:references:index post:references:index\n```\n\nMigrate the database to create the favorites table:\n\n```bash(Terminal)\n$ rake db:migrate\n```\n\nLet's update `user_spec.rb`, `post_spec.rb`, and `favorite_spec.rb` to test the new associations:\n\n```ruby(spec/models/user_spec.rb)\n ...\n   it { is_expected.to have_many(:votes) }\n+  it { is_expected.to have_many(:favorites) }\n ...\n```\n\n```ruby(spec/models/post_spec.rb)\n ...\n   it { is_expected.to have_many(:votes) }\n+  it { is_expected.to have_many(:favorites) }\n ...\n```\n\n```ruby(spec/models/favorite_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Favorite, type: :model do\n-  pending \"add some examples to (or delete) #{__FILE__}\"\n+  let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n+  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n+  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n+  let(:favorite) { Favorite.create!(post: post, user: user) }\n+\n+  it { is_expected.to belong_to(:post) }\n+  it { is_expected.to belong_to(:user) }\n end\n```\n\nRun the specs, and note each new failure in `user_spec.rb` and `post_spec.rb`:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n$ rspec spec/models/post_spec.rb\n$ rspec spec/models/favorite_spec.rb\n```\n\n`favorite_spec.rb` didn't fail because the `belongs_to` associations in `Favorite` were already created by the migration.\n\nAssociate posts with favorites in the `User` and `Post` classes to pass the new tests:\n\n```ruby(app/models/user.rb)\n ...\n   has_many :votes, dependent: :destroy\n+  has_many :favorites, dependent: :destroy\n ...\n```\n\n```ruby(app/models/post.rb)\n ...\n   has_many :votes, dependent: :destroy\n+  has_many :favorites, dependent: :destroy\n ...\n```\n\nRun the specs again, and all tests should pass:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n$ rspec spec/models/post_spec.rb\n```\n\nWith favorites associated with users and posts, we can use this functionality to alert users when their favorite posts receive new comments.\n\n## Viewing User-Specific Favorites\n\nUsers will undoubtedly want an easy way to see if they have favorited a post. Let's create a `favorite_for(post)` method that returns the favorited status for a given `post`. This sort of logic belongs in the model, not the view or controller. Let's TDD this method:\n\n```ruby(spec/models/user_spec.rb)\n require 'rails_helper'\n ...\n+  describe \"#favorite_for(post)\" do\n+    before do\n+      topic = Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph)\n+      @post = topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user)\n+    end\n+\n+    it \"returns `nil` if the user has not favorited the post\" do\n # #1\n+      expect(user.favorite_for(@post)).to be_nil\n+    end\n+\n+    it \"returns the appropriate favorite if it exists\" do\n # #2\n+      favorite = user.favorites.where(post: @post).create\n # #3\n+      expect(user.favorite_for(@post)).to eq(favorite)\n+    end\n+  end\n end\n```\n\nAt __#1__, we expect that `favorite_for` will return `nil` if the user has not favorited `@post`.\n\nAt __#2__, we create a favorite for `user` and `@post`.\n\nAt __#3__, we expect that `favorite_for` will return the favorite we created in the line before.\n\nRun the spec:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n```\n\nThe two new tests will fail because we haven't implemented the `favorite_for(post)` method yet. Let's add it to `User`:\n\n```ruby(app/models/user.rb)\n ...\n+  def favorite_for(post)\n+    favorites.where(post_id: post.id).first\n+  end\n end\n```\n\nThis method takes a `post` object and uses `where` to retrieve the user's favorites with a `post_id` that matches `post.id`. If the user has favorited `post` it will return an array of one item. If they haven't favorited `post` it will return an empty array. Calling `first` on the array will return either the favorite or `nil` depending on whether they favorited the post.\n\nRun `user_spec.rb` again to confirm that the two tests pass:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n```\n\n## Modifying Views\n\nThe UI implementation for favorites will be simple. We want to display a link on the posts __show__ view so that the user can flag that post as a favorite. We'll also want to display a link for users to unfavorite a post.\n\nBefore we add the link to the view, let's create a controller for favorites:\n\n```bash(Terminal)\n$ rails generate controller Favorites\n```\n\n> We didn't create any views because this controller won't have any normal CRUD views. We'll define `create` and `destroy` actions. Those actions aren't associated with `GET` requests, and will have no views.\n\nAdd the required routes for `create` and `destroy` to `routes.rb`:\n\n```ruby(config/routes.rb)\n   resources :posts, only: [] do\n     resources :comments, only: [:create, :destroy]\n+    resources :favorites, only: [:create, :destroy]\n```\n\nWe have a method for detecting if a user has favorited a post, `FavoritesController`, and the required routes. With these pieces in place, we'll build the links for favoriting. If you guessed that we'll create another partial for this, you're correct.\n\nCreate a `_favorite.html.erb` partial in the `app/views/favorites/` directory:\n\n```bash(Terminal)\n$ touch app/views/favorites/_favorite.html.erb\n```\n\nOpen the partial and add the following code:\n\n```erb(app/views/favorites/_favorite.html.erb)\n // #4\n+<% if favorite = current_user.favorite_for(post) %>\n // #5\n+  <%= link_to [post, favorite], class: 'btn btn-danger', method: :delete do %>\n+    <i class=\"glyphicon glyphicon-star-empty\"> </i>&nbsp; Unfavorite\n+  <% end %>\n+<% else %>\n // #6\n+  <%= link_to [post, Favorite.new], class: 'btn btn-primary', method: :post do %>\n+    <i class=\"glyphicon glyphicon-star\"> </i>&nbsp; Favorite\n+  <% end %>\n+<% end %>\n```\n\nAt __#4__, we use the `favorite_for` method we created in `User`. We collect the `favorite` it returns to use later. This nifty syntax, which relies on the fact that most objects are \"truthy\", while `nil` is not, allows us to both test a condition and get a return value in one line.\n\nAt __#5__, if there is a favorite for the current user and the post, we display a link to unfavorite the post. We also take advantage of the fact that `link_to` can take a block argument of HTML, allowing us to give our link an icon and label.\n\nAt __#6__, if there isn't a favorite for the current user, we display a link to create a new favorite.\n\nRender this partial at the bottom of the posts __show__ view for signed-in users:\n\n```erb(app/views/posts/show.html.erb)\n...\n     <h3>\n       <%= pluralize(@post.points, 'point') %>\n       <div>\n         <small>\n           <%= pluralize(@post.up_votes, 'up vote') %>,\n           <%= pluralize(@post.down_votes, 'down vote') %>\n         </small>\n       </div>\n     </h3>\n+    <% if current_user %>\n+      <%= render partial: 'favorites/favorite', locals: { post: @post } %>\n+    <% end %>\n   </div>\n </div>\n```\n\nGo to `localhost:3000`, sign in, and ensure that the favorite link renders on a post __show__ view:\n\n<center>\n ![favorite-button](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-favoriting/favorite-button.png)\n</center>\n\nThe link looks nice, but if we try to favorite a post, we'll get an error:\n\n```no-highlight\nThe action 'create' could not be found for FavoritesController\n```\n\nAs the error makes clear, this is because there's no `create` method in the `FavoritesController`. We'll work on that next.\n\n## Implementing the Favorites Controller\n\n`FavoritesController` will need two actions to `create` and `destroy` favorites. Let's write with the tests for creating favorites:\n\n```ruby(spec/controllers/favorites_controller_spec.rb)\n require 'rails_helper'\n+include SessionsHelper\n\n RSpec.describe FavoritesController, type: :controller do\n+  let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n+  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n+  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n+\n+  context 'guest user' do\n+    describe 'POST create' do\n+      it 'redirects the user to the sign in view' do\n+        post :create, { post_id: my_post.id }\n # #7\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n+  end\n+\n+  context 'signed in user' do\n+    before do\n+      create_session(my_user)\n+    end\n+\n+    describe 'POST create' do\n # #8\n+      it 'redirects to the posts show view' do\n+        post :create, { post_id: my_post.id }\n+        expect(response).to redirect_to([my_topic, my_post])\n+      end\n+\n+      it 'creates a favorite for the current user and specified post' do\n # #9\n+        expect(my_user.favorites.find_by_post_id(my_post.id)).to be_nil\n+\n+        post :create, { post_id: my_post.id }\n+\n # #10\n+        expect(my_user.favorites.find_by_post_id(my_post.id)).not_to be_nil\n+      end\n+    end\n+  end\n end\n```\n\nAt __#7__, we test that we're redirecting guests if they attempt to favorite a post.\n\nAt __#8__, we expect that after a user favorites a post, we redirect them back to the post's __show__ view. Notice that we can put an `expect` anywhere inside the `it` block. We've been placing them at the end of each `it` block, but that isn't the only place we can use them.\n\nAt __#9__, we expect that no favorites exist for the user and post. Notice we can put `expect` statements anywhere within an `it` block.\n\nAt __#10__, we expect that after a user has favorited a post, they will have a favorite associated with that post.\n\nRun the spec and note the three failures:\n\n```bash(Terminal)\n$ rspec spec/controllers/favorites_controller_spec.rb\n```\n\nLet's implement the code in `FavoritesController` to pass these tests:\n\n```ruby(app/controllers/favorites_controller.rb)\n class FavoritesController < ApplicationController\n # #11\n+  before_action :require_sign_in\n+\n+  def create\n # #12\n+    post = Post.find(params[:post_id])\n+    favorite = current_user.favorites.build(post: post)\n+\n+    if favorite.save\n+      flash[:notice] = \"Post favorited.\"\n+    else\n+      flash[:alert] = \"Favoriting failed.\"\n+    end\n+\n # #13\n+    redirect_to [post.topic, post]\n+  end\n end\n```\n\nAt __#11__, we redirect guest users to sign in before allowing them to favorite a post.\n\nAt __#12__, we find the post we want to favorite using the `post_id` in `params`. We then create a favorite for the `current_user`, passing in the `post` to establish associations for the user, post, and favorite.\n\nAt __#13__, we redirect the user to the post's __show__ view.\n\nRun the spec again and see that the three tests pass:\n\n```bash(Terminal)\n$ rspec spec/controllers/favorites_controller_spec.rb\n```\n\nGo to `localhost:3000` and favorite a post in the browser from the posts __show__ page:\n\n<center>\n  ![post-favorited](http://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-favoriting/post-favorited.png)\n</center>\n\nBecause each favorite is an instance, to unfavorite a post we need to delete the appropriate favorite instance from the database. Let's add the tests for `destroy`:\n\n```ruby(spec/controllers/favorites_controller_spec.rb)\n require 'rails_helper'\n include SessionsHelper\n\n RSpec.describe FavoritesController, type: :controller do\n   let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n   let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n   let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n\n   context 'guest user' do\n     describe 'POST create' do\n       it 'redirects the user to the sign in view' do\n         post :create, { post_id: my_post.id }\n         expect(response).to redirect_to(new_session_path)\n       end\n     end\n+\n # #14\n+    describe 'DELETE destroy' do\n+      it 'redirects the user to the sign in view' do\n+        favorite = my_user.favorites.where(post: my_post).create\n+        delete :destroy, { post_id: my_post.id, id: favorite.id }\n+        expect(response).to redirect_to(new_session_path)\n+      end\n+    end\n   end\n\n   context 'signed in user' do\n     before do\n       create_session(my_user)\n     end\n\n     describe 'POST create' do\n       it 'redirects to the posts show view' do\n         post :create, { post_id: my_post.id }\n         expect(response).to redirect_to([my_topic, my_post])\n       end\n\n       it 'creates a favorite for the current user and specified post' do\n         expect(my_user.favorites.find_by_post_id(my_post.id)).to be_nil\n\n         post :create, { post_id: my_post.id }\n\n         expect(my_user.favorites.find_by_post_id(my_post.id)).not_to be_nil\n       end\n     end\n+\n # #15\n+    describe 'DELETE destroy' do\n+      it 'redirects to the posts show view' do\n+        favorite = my_user.favorites.where(post: my_post).create\n+        delete :destroy, { post_id: my_post.id, id: favorite.id }\n+        expect(response).to redirect_to([my_topic, my_post])\n+      end\n+\n+      it 'destroys the favorite for the current user and post' do\n+        favorite = my_user.favorites.where(post: my_post).create\n # #16\n+        expect( my_user.favorites.find_by_post_id(my_post.id) ).not_to be_nil\n+\n+        delete :destroy, { post_id: my_post.id, id: favorite.id }\n+\n # #17\n+        expect( my_user.favorites.find_by_post_id(my_post.id) ).to be_nil\n+      end\n+    end\n   end\n end\n```\n\nAt __#14__, we test that we redirect guest users to sign in before allowing them to unfavorite a post.\n\nAt __#15__, we test that when a user unfavorites a post, we redirect them to the post's __show__ view.\n\nAt __#16__, we expect that the user and post has an associated favorite that we can delete.\n\nAt __#17__, we expect that the associated favorite is `nil`.\n\nRun the spec and note the three new failures:\n\n```bash(Terminal)\n$ rspec spec/controllers/favorites_controller_spec.rb\n```\n\nLet's implement the `destroy` method in `FavoritesController` and pass the tests:\n\n```ruby(app/controllers/favorites_controller.rb)\n ...\n+  def destroy\n+    post = Post.find(params[:post_id])\n+    favorite = current_user.favorites.find(params[:id])\n+\n+    if favorite.destroy\n+      flash[:notice] = \"Post unfavorited.\"\n+    else\n+      flash[:alert] = \"Unfavoriting failed.\"\n+    end\n+      redirect_to [post.topic, post]\n+  end\n end\n```\n\n> This is bread-and-butter Rails scaffolding, and it should start to feel routine. Still, you should think about the code, and explain it (perhaps to yourself) in your own words.\n\nRun `favorites_controller_spec.rb` again and confirm that all three tests are passing:\n\n```bash(Terminal)\n$ rspec spec/controllers/favorites_controller_spec.rb\n```\n\nAs always, test the behavior manually in localhost, and ensure that you can favorite and unfavorite a post.\n\n## Sending Email Notifications\n\nWhen a user comments on a favorited post, we want to send the user who favorited the post an email update informing them of the new comment. Let's start by configuring Bloccit to send emails. We'll use [SendGrid](https://sendgrid.com/) to send emails. Since we'll be using Sendgrid in our Development and Production environments, we'll create an account via a Heroku add-on. There are a five steps to this process:\n\n1. Sign in to [Heroku](http://heroku.com) and add your credit card info to your account. **Your card will not be charged for free plans** but this validation prevents spammers from abusing the free Sendgrid plan.\n\n2. Re-establish your credentials by signing out of Heroku on the command line:\n\n  ```bash(Terminal)\n  $ heroku auth:logout\n  ```\n\n3. Install the SendGrid add-on from the command line:\n\n  ```bash(Terminal)\n  $ heroku addons:create sendgrid:starter\n\n  Adding sendgrid:starter on bloccit... done, v18 (free)\n  Use `heroku addons:docs sendgrid:starter` to view documentation.\n  ```\n\n4. You will be asked for your Heroku user name and password - enter both on your command line.\n\n5. Verify that you installed SendGrid by typing the following on the command line:\n\n  ```bash(Terminal)\n  $ heroku addons\n  ```\n\n  If you see `sendgrid:starter`, you've installed SendGrid.\n\nWe'll need the username and password for this account, so type the following on the command line to get them from Heroku:\n\n```bash(Terminal)\n$ heroku config:get SENDGRID_USERNAME\n$ heroku config:get SENDGRID_PASSWORD\n```\n\n> When you installed Sendgrid in Heroku, the `SENDGRID_USERNAME` and `SENDGRID_PASSWORD` were automatically created for you.\n\nNext add the following to your `config/environments/development.rb`:\n\n```ruby(config/environments/development.rb)\n   ...\n   # config.action_view.raise_on_missing_translations = true\n+  config.action_mailer.default_url_options = { host: 'localhost' }\n end\n```\n\nAdd the same line to `config/environments/test.rb`:\n\n```ruby(config/environments/test.rb)\n ...\n\n   # Raises error for missing translations\n   # config.action_view.raise_on_missing_translations = true\n+  config.action_mailer.default_url_options = { host: 'localhost' }\n```\n\nOpen `config/environments/production.rb` and add the following lines to the bottom of the file: (Replace \"bloccit\" with your app's name)\n\n```ruby(config/environments/production.rb)\n   config.active_record.dump_schema_after_migration = false\n+  config.action_mailer.default_url_options = { host: 'bloccit.herokuapp.com' }\n end\n```\n\nThis code makes it possible to [generate URLs](http://api.rubyonrails.org/classes/ActionMailer/Base.html#class-ActionMailer::Base-label-Generating+URLs) in emails.\n\nCreate a file in `config/initializers` named `setup_mail.rb`:\n\n```bash(Terminal)\n$ touch config/initializers/setup_mail.rb\n```\n\n... and add the following code:\n\n```ruby(config/initializers/setup_mail.rb)\n+ if Rails.env.development? || Rails.env.production?\n+   ActionMailer::Base.delivery_method = :smtp\n+   ActionMailer::Base.smtp_settings = {\n+     address:        'smtp.sendgrid.net',\n+     port:           '2525',\n+     authentication: :plain,\n+     user_name:      ENV['SENDGRID_USERNAME'],\n+     password:       ENV['SENDGRID_PASSWORD'],\n+     domain:         'heroku.com',\n+     enable_starttls_auto: true\n+   }\n+ end\n```\n\nThe code in `config/initialize` runs when our app starts. We use this when want to set config options or application settings. In this case we need to configure some special settings to send emails.\n\nNotice that we didn't explicitly state the SendGrid username and password. We want to mask these for security concerns, so we assign them to environment variables. Environment variables provide a reference point to information, without revealing the underlying data values.\n\nSensitive data, like API keys and passwords, **should not be stored in GitHub**. Complete our resource on how to [use the Figaro gem to set up environment variables](https://www.bloc.io/resources/environment-variables-with-figaro). Figaro allows you to safely store and access sensitive credentials using variables. Install the gem and add your SendGrid username and password to `application.yml`.\n\nWe're now able to send email notifications, so we'll configure the emails next.\n\n## Implementing the Favorite Mailer\n\nTo send an email, we'll need to create a mailer using [ActionMailer](http://guides.rubyonrails.org/action_mailer_basics.html). Let's create a mailer and format our outgoing email.\n\nTo create an `ActionMailer` class, we use a Rails generator and provide the name of the mailer:\n\n```bash(Terminal)\n$ rails generate mailer FavoriteMailer\n      create  app/mailers/favorite_mailer.rb\n      invoke  erb\n      create    app/views/favorite_mailer\n```\n\nOpen `FavoriteMailer` and update the `from` address to be your **personal email address**:\n\n```ruby(app/mailers/favorite_mailer.rb)\nclass FavoriteMailer < ApplicationMailer\n  default from: \"youremail@email.com\"\nend\n```\n\nThis sets the default `from` for all emails sent from `FavoriteMailer`.\n\nAdd a `new_comment` method in this class. We'll call this method to send an email to users, notifying them that someone has left a comment on one of their favorited posts:\n\n```ruby(app/mailers/favorite_mailer.rb)\n class FavoriteMailer < ApplicationMailer\n   default from: \"youremail.com\"\n\n+  def new_comment(user, post, comment)\n+\n # #18\n+    headers[\"Message-ID\"] = \"<comments/#{comment.id}@your-app-name.example>\"\n+    headers[\"In-Reply-To\"] = \"<post/#{post.id}@your-app-name.example>\"\n+    headers[\"References\"] = \"<post/#{post.id}@your-app-name.example>\"\n+\n+    @user = user\n+    @post = post\n+    @comment = comment\n+\n # #19\n+    mail(to: user.email, subject: \"New comment on #{post.title}\")\n+  end\n end\n```\n\nAt __#18__, we set three different `headers` to enable [conversation threading](https://en.wikipedia.org/wiki/Conversation_threading) in different email clients.\n\nAt __#19__, the [`mail`](http://guides.rubyonrails.org/action_mailer_basics.html#edit-the-mailer) method takes a hash of mail-relevant information - the subject the `to` address, the `from` (we're using the default), and any `cc` or `bcc` information - and prepares the email to be sent.\n\n> We suggest adding your mentor's email as a cc to the list of recipients so they can view the emails as well.\n\n`ActionMailer` follows a similar pattern as Rails controllers; you can define instance variables that will be available to your \"view\" - which is the content sent in the email in this context.\n\nCreate `new_comment.html.erb` inside `app/views/favorite_mailer/`:\n\n```bash(Terminal)\n$ touch app/views/favorite_mailer/new_comment.html.erb\n```\n\nThis view will _not_ use the `application.html.erb` layout we defined for the other layouts in our app. In fact, we can't even reference external CSS in mailer views, as most email clients won't use it. We'll simply create a basic HTML layout:\n\n```erb(app/views/favorite_mailer/new_comment.html.erb)\n+<!DOCTYPE html>\n+<html>\n+  <head>\n+    <meta content=\"text/html; charset=UTF-8\" http-equiv=\"Content-Type\" />\n+  </head>\n+  <body>\n+    <h1>New comment to \"<%= @post.title %>\"</h1>\n+    <small>\n+      By: <%= @comment.user.name %>\n+    </small>\n+    <p>\n+      <%= @comment.body %>\n+    </p>\n+    <p>\n # #20\n+      <%= link_to \"View Comment on site\", topic_post_url(@post.topic, @post, anchor: \"comment-#{@comment.id}\") %>\n+    </p>\n+  </body>\n+</html>\n```\n\nAt __#20__, we use `topic_post_url`. This is _very_ important. When we use `_path` we get a \"relative URL\", such as \"topics/3\". This works within the context of the website because the browser already knows the base URL. But when a user sees this email, they won't be in the application and thus won't have the base URL. Therefore, we have to define it. That is what `_url` does. It generates an \"absolute URL\", such as \"http://myapp.com/topics/3\".\n\nAt __#20__, we also use the `anchor:` option of the `link_to` method. This adds custom parameters to our URL. In this case, because we used the keyword `anchor` the URL will look like: \"http://myapp.com/topics/3/posts/5#comment-21\". This allows us to link the user directly to the comment. Jumping to an anchor is something every browser has supported for a long time. If you provide an `id` tag after the URL, it will jump to that ID on the page.\n\nTo make this anchor redirect where we want it, let's add a unique `id` to the `_comment.html.erb` partial of each `comment` using `content_tag`:\n\n```erb(app/views/comments/_comment.html.erb)\n-<div class=\"media\">\n // #21\n+<%= content_tag :div, class: 'media', id: \"comment-#{comment.id}\" do %>\n   <div class=\"media\">\n     <div class=\"media-body\">\n       <small>\n         <%= comment.user.name %> commented <%= time_ago_in_words(comment.created_at) %> ago\n         <% if user_is_authorized_for_comment?(comment) %>\n           | <%= link_to \"Delete\", [@post, comment], method: :delete %>\n         <% end %>\n       </small>\n       <p><%= comment.body %></p>\n     </div>\n   </div>\n-</div>\n+<% end %>\n```\nAt __#21__, we use `content_tag` to generate HTML, because the alternative, interpolating a comment's ID inside an HTML tag, is difficult to read: `<div class=\"media\" id=\"comment-<%= comment.id %>\">`\n\nIf a user's email client won't render HTML, we want to present them with plain text. We'll create `new_comment.text.erb` in `app/views/favorite_mailer` with the following code:\n\n```erb(app/views/favorite_mailer/new_comment.text.erb)\n+New comment to \"<%= @post.title %>\"\n+<%= \"=\" * (@post.title.length + 12) %>\n+\n+By: <%= @comment.user.name %>\n+\n+<%= @comment.body %>\n+\n+Visit online at: <%= topic_post_url(@post.topic, @post, anchor: \"comment-#{@comment.id}\") %>\n```\n\nWe can test the mailer in the Rails console; retrieve a `user`, `post`, and `comment`, and pass them to the `FavoriteMailer`. We'll then call the `ActionMailer` class method `deliver_now` to send the email:\n\n```ruby\n>> u = User.last # make sure has is a valid email you can check\n>> p = Post.first\n>> c = p.comments.last\n>> FavoriteMailer.new_comment(u, p, c).deliver_now\n```\n\nAt this point you should receive an email in your inbox within a couple of minutes. If not, speak with your mentor in order to figure out what's wrong, and try to troubleshoot it yourself.\n\n> Adding `config.raise_delivery_errors = true` to your `config/environments/development.rb` file will tell `ActionMailer` to raise informative errors if it fails. This can be very helpful for debugging.\n\n## Adding a Callback\n\nWhen we want to do something _every time_ something else happens, it's a good place to use a model callback. Because we want to send an email every time a user comments on a favorited post, let's add a callback to `Comment`. Before we do, let's define our expectations with our specs:\n\n```ruby(spec/models/comment_spec.rb)\n ...\n+  describe \"after_create\" do\n # #22\n+    before do\n+      @another_comment = Comment.new(body: 'Comment Body', post: post, user: user)\n+    end\n+\n # #23\n+    it \"sends an email to users who have favorited the post\" do\n+      favorite = user.favorites.create(post: post)\n+      expect(FavoriteMailer).to receive(:new_comment).with(user, post, @another_comment).and_return(double(deliver_now: true))\n+\n+      @another_comment.save!\n+    end\n+\n # #24\n+    it \"does not send emails to users who haven't favorited the post\" do\n+      expect(FavoriteMailer).not_to receive(:new_comment)\n+\n+      @another_comment.save!\n+    end\n+  end\n end\n```\n\nAt __#22__, we initialize (but don't save) a new comment for `post`.\n\nAt __#23__, we favorite `post` then expect `FavoriteMailer` will receive a call to `new_comment`. We then save `@another_comment` to trigger the after create callback.\n\nAt __#24__, test that `FavoriteMailer` does not receive a call to `new_comment` when `post` isn't favorited.\n\nRun the spec and note the two failures:\n\n```bash(Terminal)\n$ rspec spec/models/comment_spec.rb\n```\n\nPass the tests by adding the callback to `Comment`:\n\n```ruby(app/models/comment.rb)\n class Comment < ActiveRecord::Base\n   ...\n+  after_create :send_favorite_emails\n+\n+  private\n+\n+  def send_favorite_emails\n+    post.favorites.each do |favorite|\n+      FavoriteMailer.new_comment(favorite.user, post, self).deliver_now\n+    end\n+  end\n end\n```\n\nWhen we create a comment we call `send_favorite_emails`. This finds the `favorites` associated with its comment's post, and loops over them. For each `favorite`, it will create and send a new email.\n\nOur tests will now pass and we will send users an email whenever a post they've favorited receives a new comment.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details.\n\nDeploy to Heroku and migrate your production database:\n\n```bash(Terminal)\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [ActionMailer](http://guides.rubyonrails.org/action_mailer_basics.html) | `ActionMailer` allows you to send emails from your application using mailer classes and views. Mailers work similarly to controllers. They inherit from `ApplicationController`, are placed in `app/mailers`, and they have associated views in `app/views`.\n| [ActiveRecord Callback](http://guides.rubyonrails.org/active_record_callbacks.html) | Callbacks are methods that get called at specific moments in an object's life cycle. They are code that runs whenever an `ActiveRecord` object is created, saved, updated, deleted, validated, or loaded from the database. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nIt's reasonable to assume that users will want to favorite and follow the posts they create. Let's write functionality that will have users automatically favorite their own posts upon creation:\n\n1. Add an after create callback to `Post` that creates a favorite for the post and user.\n\n2. Add a `new_post` method to `FavoriteMailer` to notify the post creator that they've favorited their post and will receive updates when it's commented on.\n\n3. Create `new_post.html.erb` and `new_post.text.erb` views in `views/favorite_mailer` with appropriate messages for the post's creator.\n\n4. Update the after create callback in `Post` to send the `new_post` email to the post's creator.\n\n5. Using the Rails console, test that users are sent an email after creating a new post.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/dysp96e9pm?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Favoriting Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 44,
          "checkpoint_type": "normal",
          "position": 44,
          "points": 1,
          "ref": "b005b1f4-a606-452e-973d-c431fbeeab62|0"
        },
        {
          "id": 1659,
          "name": "Rails: Public Profiles",
          "summary": "Public Profiles: sharing user profiles and contributions",
          "body": "<!-- { ids:[1659], name:'Rails: Public Profiles', summary:'Public Profiles: sharing user profiles and contributions' } -->\n\n<center>\n  ![Yoda](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-public-profiles/banner.jpg)\n</center>\n\n> “Do... or do not. There is no try.”\n>\n> — Yoda\n\n## Public Profiles\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/482g56n25x\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nAs the Bloccit community grows , users will become proud of their posts and comments. Much like other community applications, we'll provide our users with a way to publicly share their profile and contributions, using a profile page. The profile page will display some basic information about the user, their avatar, and a list of their posts and comments.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Updating the User Controller\n\nWe have a `User` model that can manage user profile information, but we don't have the appropriate actions, routes, and views to display a profile page. We'll TDD these missing components, and we'll start with the controller:\n\n```ruby(spec/controllers/users_controller_spec.rb)\n...\n\n     it \"logs the user in after sign up\" do\n       post :create, user: new_user_attributes\n       expect(session[:user_id]).to eq assigns(:user).id\n     end\n   end\n+\n+  describe \"not signed in\" do\n # #1\n+    let(:factory_user) { create(:user) }\n+\n+    before do\n+      post :create, user: new_user_attributes\n+    end\n+\n # #2\n+    it \"returns http success\" do\n+      get :show, {id: factory_user.id}\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"renders the #show view\" do\n+      get :show, {id: factory_user.id}\n+      expect(response).to render_template :show\n+    end\n+\n+    it \"assigns factory_user to @user\" do\n+      get :show, {id: factory_user.id}\n+      expect(assigns(:user)).to eq(factory_user)\n+    end\n+  end\n end\n```\n\nAt __#1__, we build a variable named `factory_user` using `create(:user)`. A [factory](https://en.wikipedia.org/wiki/Factory_%28object-oriented_programming%29) in programming is an object that creates other types of objects on demand. Our factory create `User` objects. Because we use `create` and not `build`, our objects is persisted to the database.\n\nAt __#2__ we write our standard tests for testing the **show** action.\n\nRun the spec and note the three new failures:\n\n```bash(Terminal)\n$ rspec spec/controllers/users_controller_spec.rb\n```\n\nTypically, we would write the missing functionality in the `UsersController` as the next step, but because we wishfully coded `create(:user)` - that method does not yet exist - we'll need to create it before we implement new code in `UsersController`.\n\n## Using Factories\n\nThe tests we wrote use [`FactoryGirl`](https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md) to build `User` objects. FactoryGirl is a canonical Ruby gem which allows us to build objects we can use for testing. Factories allow us to modify the behavior of a given object type in a single place. Let's write the factory for building users. First, add the gem to your gemfile:\n\n```ruby(Gemfile)\n...\n group :development, :test do\n   gem 'rspec-rails', '~> 3.0'\n   gem 'shoulda'\n+  gem 'factory_girl_rails', '~> 4.0'\n end\n...\n```\n\nInstall `FactoryGirl`:\n\n```bash(Terminal)\n$ bundle install\n```\n\nWe need to configure `FactoryGirl`. Open `rails_helper.rb` and add the following:\n\n```ruby(spec/rails_helper.rb\n require 'spec_helper'\n require 'rspec/rails'\n # Add additional requires below this line. Rails is not loaded until this point!\n+require 'factory_girl_rails'\n\n # Requires supporting ruby files with custom matchers and macros, etc, in\n # spec/support/ and its subdirectories. Files matching `spec/**/*_spec.rb` are\n\n ActiveRecord::Migration.maintain_test_schema!\n\n RSpec.configure do |config|\n+  config.include FactoryGirl::Syntax::Methods\n+\n   # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures\n   config.fixture_path = \"#{::Rails.root}/spec/fixtures\"\n ...\n```\n\n> If you do not include `FactoryGirl::Syntax::Methods` in `rails_helper.rb`, then all FactoryGirl methods will need to be prefaced with `FactoryGirl::`.\n\nWith `FactoryGirl` installed and configured, we can create a user factory. Create a directory to store factories, and a file for the user factory:\n\n```bsah(Terminal)\n$ mkdir spec/factories\n$ touch spec/factories/users.rb\n```\n\nThe `FactoryGirl` documentation states that it's best to keep factories in `spec/factories`. Each factory should have a dedicated file named after the object type the factory will create. Let's build the user factory:\n\n```ruby(spec/factories/users.rb)\n+FactoryGirl.define do\n+  pw = RandomData.random_sentence\n # #3\n+  factory :user do\n+    name RandomData.random_name\n # #4\n+    sequence(:email){|n| \"user#{n}@factory.com\" }\n+    password pw\n+    password_confirmation pw\n+    role :member\n+  end\n+end\n```\n\nAt __#3__, we declare the name of the factory `:user`.\n\nAt __#4__, each `User` that the factory builds will have a unique email address using `sequence`. Sequences can generate [unique values in a specific format, for example, e-mail addresses](https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md).\n\nThough we've addressed the wishfully coded `create(:user)` method by creating a user factory, we still haven't addressed our new tests. We'll do that next in `UsersController`.\n\n## Updating the User Controller\n\nWe have our specs written for `UserController` and the factory we need to build user objects. Let's add the `show` action to `users_controller.rb` to get our tests to pass:\n\n```ruby(app/controllers/users_controller.rb)\n...\n\n # #5\n+  def show\n+    @user = User.find(params[:id])\n+  end\n end\n```\n\nAt __#5__, we retrieve a user instance and set it to an instance variable.\n\nAdd a route for the `show` action:\n\n```ruby(config/routes.rb)\n...\n\n-  resources :users, only: [:new, :create]\n+  resources :users, only: [:new, :create, :show]\n\n...\n```\n\nValidate that the new users show route was created:\n\n```bash(Terminal)\n$ rake routes | grep users\n```\n\nRun the spec again:\n\n```bash(Terminal)\n$ rspec spec/controllers/users_controller_spec.rb\n```\n\nWe still see the same three errors. This is because the **show** view doesn't exist. Because we added the controller action and route manually, we'll also need to create the view file to get the specs to pass:\n\n```bash(Terminal)\n$ touch app/views/users/show.html.erb\n```\n\nRun the spec again and see that they pass.\n\n## Implementing Gravatars\n\nA user profile should be personalized, and an avatar will certainly help in that capacity. We'll use the [Gravatar](https://gravatar.com/) (i.e. \"globally recognized avatar\") service to allow our users to post an avatar image. Gravatar is a free service - sign up and create an account before moving on so you can personalize you profile.\n\n> Many modern applications, especially developer-friendly applications, use Gravatar to power their avatars. Gravatar was created by [Tom Preston-Werner](https://en.wikipedia.org/wiki/Tom_Preston-Werner), who also founded GitHub.\n\nLet's add tests to `user_spec.rb` to define the behavior we'll need in the `User` class:\n\n```ruby(spec/models/user_spec.rb)\n...\n\n-  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"password\") }\n+  let(:user) { create(:user) }\n\n...\n\n  describe \"attributes\" do\n     it \"should have name and email attributes\" do\n-      expect(user).to have_attributes(name: \"Bloccit User\", email: \"user@bloccit.com\")\n+      expect(user).to have_attributes(name: user.name, email: user.email)\n     end\n\n...\n\n   describe \"#favorite_for(post)\" do\n     before do\n       topic = Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph)\n       @post = topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user)\n     end\n\n     it \"returns `nil` if the user has not favorited the post\" do\n      expect(user.favorite_for(@post)).to be_nil\n     end\n\n     it \"returns the appropriate favorite if it exists\" do\n      favorite = user.favorites.where(post: @post).create\n       expect(user.favorite_for(@post)).to eq(favorite)\n    end\n   end\n+\n+  describe \".avatar_url\" do\n # #6\n+    let(:known_user) { create(:user, email: \"blochead@bloc.io\") }\n+\n+    it \"returns the proper Gravatar url for a known email entity\" do\n # #7\n+      expected_gravatar = \"http://gravatar.com/avatar/bb6d1172212c180cfbdb7039129d7b03.png?s=48\"\n # #8\n+      expect(known_user.avatar_url(48)).to eq(expected_gravatar)\n+    end\n+  end\n end\n```\n\n> We use `.` in `describe \".avatar_url\"` because it is a class method and that is the [RSpec convention](http://betterspecs.org/). RSpec conventions like this make it much easier to troubleshoot tests.\n\nAt __#6__, we build a user with `FactoryGirl`. We pass `email: \"blochead@bloc.io\"` to `build`, which overrides the email address that would be generated in the factory with \"blochead@bloc.io\". We are overriding the default email address with a known one so that we can test against a specific string that we know Gravatar will return for the account \"blochead@bloc.io\".\n\nAt __#7__, we set the expected string that Gravatar should return for \"blochead@bloc.io\". The `s=48` query paramter specifies that we want the returned image to be 48x48 pixels.\n\nAt __#8__, we expect `known_user.avatar_url` to return `http://gravatar.com/avatar/bb6d1172212c180cfbdb7039129d7b03.png?s=48`.\n\nRun the spec and note the new failure:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n```\n\nLet's add `avatar_url` to `User` and pass the failing test:\n\n```ruby(app/models/user.rb)\n   def favorite_for(post)\n     favorites.where(post_id: post.id).first\n   end\n+\n+  def avatar_url(size)\n+    gravatar_id = Digest::MD5::hexdigest(self.email).downcase\n+    \"http://gravatar.com/avatar/#{gravatar_id}.png?s=#{size}\"\n+  end\n end\n```\n\nRun the spec again and verify that the new test passes:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n```\n\n## Displaying Users\n\nThe Gravatar should be prominent, so we'll add it to the navigation area next to the user's name. We can do this by updating `app/views/layouts/application.html.erb`:\n\n```erb(app/views/layouts/application.html.erb)\n ...\n       <div class=\"pull-right user-info\">\n         <% if current_user %>\n-          <%= current_user.name %> - <%= link_to \"Sign Out\", session_path(current_user), method: :delete %>\n // #9\n+          <%= image_tag current_user.avatar_url(48), class: \"gravatar\" %>\n+          <div class=\"pull-right\">\n // #10\n+            <%= link_to current_user.name, user_path(current_user) %> <br/> <%= link_to \"Sign Out\", session_path(current_user), method: :delete %>\n+          </div>\n         <% else %>\n...\n```\n\nAt __#9__, we use `image_tag` and populate it with the result of `avatar_url`. We set the `class` to \"gravatar\" which we will use to style the avatar.\n\nAt __#10__, we move our pre-existing code into a new `<div class=\"pull-right\">` so that it floats to the right of the avatar.\n\nLet's create the `.gravatar` CSS class to style the avatar in `app/assets/stylesheets/users.scss`:\n\n```css(app/assets/stylesheets/users.scss)\n // Place all the styles related to the Users controller here.\n // They will automatically be included in application.css.\n // You can use Sass (SCSS) here: http://sass-lang.com/\n // #11\n+.gravatar {\n+  margin-bottom: 5px;\n+  margin-right: 5px;\n+}\n```\n\nAt __#11__, we create the `.gravatar` CSS class with simple margin adjustments.\n\nOpen [localhost](http://localhost:3000/), sign up to Bloccit with the following credentials:\n\n1. Name: **Canyon**\n2. Email: **canyon.the.malamute@gmail.com**\n3. Password: **password**\n4. Password Confirmation: **password**\n\nView the navigation bar. You show now see an avatar (an Alaskan Malamute) next to the signed-in user's name.\n\n> We opted to use a dog avatar because dogs are objectively more awesome than cats. **Objectively**.\n\n<center>\n![Navigation](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-public-profiles/navigation.png)\n</center>\n\nLet's build the users **show** view that we created earlier:\n\n```erb(app/views/users/show.html.erb)\n+<div class=\"row\">\n+  <div class=\"col-md-8\">\n+    <div class=\"media\">\n+      <br />\n // #12\n+      <% avatar_url = @user.avatar_url(128) %>\n+      <% if avatar_url %>\n+        <div class=\"media-left\">\n // #13\n+          <%= image_tag avatar_url, class: 'media-object' %>\n+        </div>\n+      <% end %>\n+      <div class=\"media-body\">\n+        <h2 class=\"media-heading\"><%= @user.name %></h2>\n+        <small>\n+          <%= pluralize(@user.posts.count, 'post') %>,\n+          <%= pluralize(@user.comments.count, 'comment') %>\n+        </small>\n+      </div>\n+    </div>\n+  </div>\n+</div>\n+\n // #14\n+<h2>Posts</h2>\n+<%= render @user.posts %>\n+\n+<h2>Comments</h2>\n+<%= render @user.comments %>\n```\n\nAt __#12__, we call `avatar_url` to fetch the current user's avatar.\n\nAt __#13__, we use Rails' `image_tag` method to create an `<img>`.\n\nAt __#14__, we display all of the user's posts and comments using partials.\n\nOpen localhost and click on your username to see the __show__ view. In the code above we refer to a partial to display posts which doesn't exist. Let's create it:\n\n```bash(Terminal)\n$ touch app/views/posts/_post.html.erb\n```\n\n... and add the following code:\n\n```erb(app/views/posts/_post.html.erb)\n+<div class=\"media\">\n+  <%= render partial: 'votes/voter', locals: { post: post } %>\n+  <div class=\"media-body\">\n+    <h4 class=\"media-heading\">\n+      <%= link_to post.title, topic_post_path(post.topic, post) %>\n+      <%= render partial: \"labels/list\", locals: { labels: post.labels } %>\n+    </h4>\n+    <small>\n+      submitted <%= time_ago_in_words(post.created_at) %> ago by <%= post.user.name %> <br>\n+      <%= post.comments.count %> Comments\n+    </small>\n+  </div>\n+</div>\n```\n\nWe'll also need to modify the comment partial:\n\n```ruby(app/views/comments/_comment.html.erb)\n...\n     <small>\n       <%= comment.user.name %> commented <%= time_ago_in_words(comment.created_at) %> ago\n       <% if user_is_authorized_for_comment?(comment) %>\n-        | <%= link_to \"Delete\", [@post, comment], method: :delete %>\n+        | <%= link_to \"Delete\", [comment.post, comment], method: :delete %>\n       <% end %>\n...\n```\n\nGo back to [localhost](http://localhost:3000) and click on the hyperlinked \"Canyon\" in the top right. This should take you to the user profile page. We'll need to create posts and comments for Canyon if we wish them to appear in the **show** view which should look like the following:\n\n<center>\n![User Profile](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-public-profiles/user_profile.png)\n</center>\n\n## Scoping Posts\n\nOne important piece of functionality escaped our user flow and testing. Even if a user's profile is public, unauthenticated users should _not_ be able to see the posts of that user which are associated with private topics. To resolve this problem, we should change the nature of the `@posts` variable in users **show** based on whether the current user is authenticated. Let's create a `visible_to` scope on `Post` that returns all the posts whose topics are visible to the given user:\n\n```ruby(app/models/post.rb)\n   default_scope { order('rank DESC') }\n # #15\n+  scope :visible_to, -> (user) { user ? all : joins(:topic).where('topics.public' => true) }\n```\n\nAt __#15__, we use a lambda (`->`) to ensure that a user is present or signed in. If the user is present, we return `all` posts. If not, we use the `Active Record` [`joins`](http://guides.rubyonrails.org/active_record_querying.html#joining-tables) method to retrieve all posts which belong to a public topic.\n\n> This query uses a SQL 'inner join' to query a collection's relations in one query. Read through the [Rails Guide on Active Record](http://guides.rubyonrails.org/active_record_querying.html) to learn more useful querying methods.\n\nLet's add the new scope in the users **show** view:\n\n```ruby(app/controllers/users_controller.rb)\n   def show\n     @user = User.find(params[:id])\n+    @posts = @user.posts.visible_to(current_user)\n   end\n```\n\n## Refactoring Specs to Use Factories\n\nNow that we have implemented and configured `FactoryGirl`, we should use it in our other specs. Doing so will make our spec files cleaner, more readable, and more efficient.\n\nCreate a new factory named `topics.rb` in `spec/factories`:\n\n```bash(Terminal)\n$ touch spec/factories/topics.rb\n```\n\nOpen it, and add the following:\n\n```ruby(spec/factories/topics.rb)\n # #16\n+FactoryGirl.define do\n+  factory :topic do\n+    name RandomData.random_name\n+    description RandomData.random_sentence\n+  end\n+end\n```\n\nAt __#16__, we define a new factory for topics that generates a topic with a random name and description.\n\nLet's do the same for posts:\n\n```bash(Terminal)\n$ touch spec/factories/posts.rb\n```\n\nOpen it, and add the following:\n\n```ruby(spec/factories/posts.rb)\n # #17\n+FactoryGirl.define do\n+  factory :post do\n+    title RandomData.random_sentence\n+    body RandomData.random_paragraph\n+    topic\n+    user\n+    rank 0.0\n+  end\n+end\n```\n\nAt __#17__, we define a factory for posts.\n\nLet's change all of our model specs to use our new factories:\n\n```ruby(spec/models/comment_spec.rb)\n RSpec.describe Comment, type: :model do\n-  let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n+  let(:topic) { create(:topic) }\n+  let(:user) { create(:user) }\n+  let(:post) { create(:post) }\n   let(:comment) { Comment.create!(body: 'Comment Body', post: post, user: user) }\n\n...\n```\n\n> We haven't changed `Comment.create` to use a factory because that is part of the checkpoint assignment.\n\n```ruby(spec/models/favorite_spec.rb)\n RSpec.describe Favorite, type: :model do\n-  let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n+  let(:topic) { create(:topic) }\n+  let(:user) { create(:user) }\n+  let(:post) { create(:post) }\n   let(:favorite) { Vote.create!(post: post, user: user) }\n\n...\n```\n\n```ruby(spec/models/label_spec.rb)\n RSpec.describe Label, type: :model do\n-  let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n+  let(:topic) { create(:topic) }\n+  let(:user) { create(:user) }\n+  let(:post) { create(:post) }\n   let(:label) { Label.create!(name: 'Label') }\n\n...\n```\n\n```ruby(spec/models/post_spec.rb)\n RSpec.describe Post, type: :model do\n-  let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n+  let(:topic) { create(:topic) }\n+  let(:user) { create(:user) }\n+  let(:post) { create(:post) }\n\n   it { is_expected.to have_many(:labelings) }\n\n ...\n\n   describe \"attributes\" do\n     it \"has title and body attributes\" do\n-      expect(post).to have_attributes(title: title, body: body)\n+      expect(post).to have_attributes(title: post.title, body: post.body)\n     end\n ...\n```\n\n```ruby(spec/models/topic_spec.rb)\n RSpec.describe Topic, type: :model do\n-  let(:name) { RandomData.random_sentence }\n-  let(:description) { RandomData.random_paragraph }\n-  let(:topic) { Topic.create!(name: name, description: description) }\n+  let(:topic) { create(:topic) }\n\n ...\n\n  describe \"attributes\" do\n     it \"responds to name and description attributes\" do\n-      expect(topic).to have_attributes(name: name, description: description)\n+      expect(topic).to have_attributes(name: topic.name, description: topic.description)\n     end\n ...\n```\n\n```ruby(spec/models/user_spec.rb)\n...\n\n   describe \"invalid user\" do\n-    let(:user_with_invalid_name) { User.new(name: \"\", email: \"user@bloccit.com\") }\n-    let(:user_with_invalid_email) { User.new(name: \"Bloccit User\", email: \"\") }\n+    let(:user_with_invalid_name) { build(:user, name: \"\") }\n+    let(:user_with_invalid_email) { build(:user, email: \"\") }\n\n     it \"is an invalid user due to blank name\" do\n\n...\n```\n\n```ruby(spec/models/vote_spec.rb)\n RSpec.describe Vote, type: :model do\n-  let(:topic) { Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:post) { topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: user) }\n+  let(:topic) { create(:topic) }\n+  let(:user) { create(:user) }\n+  let(:post) { create(:post) }\n   let(:vote) { Vote.create!(value: 1, post: post, user: user) }\n...\n```\n\nRun the models specs and ensure that all tests pass:\n\n```bash(Terminal)\n$ rspec spec/models\n```\n\nLet's refactor our controller specs as well:\n\n```ruby(spec/controllers/comments_controller_spec.rb)\n include SessionsHelper\n\n RSpec.describe CommentsController, type: :controller do\n-  let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:other_user) { User.create!(name: RandomData.random_name, email: RandomData.random_email, password: \"helloworld\", role: :member) }\n-  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n+  let(:my_topic) { create(:topic) }\n+  let(:my_user) { create(:user) }\n+  let(:other_user) { create(:user) }\n+  let(:my_post) { create(:post, topic: my_topic, user: my_user) }\n   let(:my_comment) { Comment.create!(body: 'Comment Body', post: my_post, user: my_user) }\n\n...\n```\n\n```ruby(spec/controllers/favorites_controller_spec.rb)\n include SessionsHelper\n\n RSpec.describe FavoritesController, type: :controller do\n-  let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n+  let(:my_topic) { create(:topic) }\n+  let(:my_user) { create(:user) }\n+  let(:my_post) { create(:post, topic: my_topic, user: my_user) }\n\n...\n```\n\n```ruby(spec/controllers/posts_controller_spec.rb)\n include SessionsHelper\n\n RSpec.describe PostsController, type: :controller do\n-  let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:other_user) { User.create!(name: RandomData.random_name, email: RandomData.random_email, password: \"helloworld\", role: :member) }\n-  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n+  let(:my_topic) { create(:topic) }\n+  let(:my_user) { create(:user) }\n+  let(:other_user) { create(:user) }\n+  let(:my_post) { create(:post, topic: my_topic, user: my_user) }\n\n...\n```\n\n```ruby(spec/controllers/sessions_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe SessionsController, type: :controller do\n-  let(:my_user) { User.create!(name: \"Blochead\", email: \"blochead@bloc.io\", password: \"password\") }\n+  let(:my_user) { create(:user) }\n\n...\n```\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n include SessionsHelper\n\n RSpec.describe TopicsController, type: :controller do\n-  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description:   RandomData.random_paragraph) }\n+  let(:my_topic) { create(:topic) }\n...\n```\n\n```ruby(spec/controllers/votes_controller_spec.rb)\n include SessionsHelper\n\n  RSpec.describe VotesController, type: :controller do\n-  let(:my_user) { User.create!(name: \"Bloccit User\", email: \"user@bloccit.com\", password: \"helloworld\") }\n-  let(:other_user) { User.create!(name: RandomData.random_name, email: RandomData.random_email, password: \"helloworld\", role: :member) }\n-  let(:my_topic) { Topic.create!(name:  RandomData.random_sentence, description: RandomData.random_paragraph) }\n-  let(:my_post) { my_topic.posts.create!(title: RandomData.random_sentence, body: RandomData.random_paragraph, user: my_user) }\n+  let(:my_topic) { create(:topic) }\n+  let(:my_user) { create(:user) }\n+  let(:other_user) { create(:user) }\n+  let(:user_post) { create(:post, topic: my_topic, user: other_user) }\n\n...\n```\n\nRun the controller specs and ensure that all tests pass:\n\n```bash(Terminal)\n$ rspec spec/controllers\n```\n\nFinally, for good measure, run your entire spec suite:\n\n```bash(Terminal)\n$ rspec spec\n```\n\nYou should see nothing but beautiful, green, passing tests.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Deploy to Heroku and migrate your production database:\n\n```bash(Terminal)\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n## Recap\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Factory Pattern](https://en.wikipedia.org/wiki/Factory_%28object-oriented_programming%29) | Factories are classes that produce objects to help test our application. We used `FactoryGirl` in this checkpoint, but we could've very well have created our own factories from scratch. |\n| [Active Record Scopes](http://guides.rubyonrails.org/active_record_querying.html#scopes) | Active Record scopes allow commonly-used queries to be referenced as method calls. `scope` methods return `ActiveRecord::Relationship` objects. |\n| [Active Record `joins`](http://guides.rubyonrails.org/active_record_querying.html#joining-tables) | The Active Record `joins` method specifies `JOIN` clauses in the resulting SQL. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Create three new factories for comments, labels, and votes. Refactor your model and controller specs to use the new factories.\n\n2. Create a method that returns whether there are posts or comments for a given user. Use the method to display a message instead of the `<h2>` if no posts or comments exist. Something simple like `\"{user.name} has not submitted any posts yet.\"`\n\n3. On the users __show__ view, add a list of posts that the current user has favorited. Next to each favorited post, display the author's Gravatar, the number of votes, and the number of comments. Implement this feature using TDD.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.",
          "roadmap_section_id": 120,
          "active_index": 45,
          "checkpoint_type": "normal",
          "position": 45,
          "points": 1,
          "ref": "8eb211e0-8254-436e-b2c1-a87b4a310499|0"
        },
        {
          "id": 1657,
          "name": "Rails: Private Topics",
          "summary": "Private Topics: restricting private topics to signed-in users",
          "body": "<!-- { ids:[1657], name:'Rails: Private Topics', summary:'Private Topics: restricting private topics to signed-in users' } -->\n<center>\n  ![private-label](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-private-topics/private-label.jpg)\n</center>\n\n> “All human beings have three lives: public, private, and secret.”\n>\n> — Gabriel Garcí­a Márquez\n\n## Private Topics\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/ojpexthwwj\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nWhen we created the `Topic` model, we included a boolean attribute named `public`. We will use `public` to control topic visibility:\n\n* If a user does not sign in, they _should not_ be able to see private topics or navigate to a private topic's URL;\n* If a user signs in, they _should_ be able to see private topics and navigate to a private topic's URL.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Scoping Topics\n\nWe'll need an easy way to retrieve a collection of public topics. The inefficient way to do this would be to fetch all the topics, then to use Array logic to filter:\n\n```ruby\ntopics = Topic.all\npublic_topics = topics.select { |topic| topic.public }\n\n# Which can be refactored to:\npublic_topics = Topic.all.select(&:public)\n```\n\nDatabase queries are faster and can take care of filtering data, reducing memory footprint. It would be much more efficient to use:\n\n```ruby\npublic_topics = Topic.where(public: true)\n```\n\nLet's use a [scope](http://guides.rubyonrails.org/active_record_querying.html#scopes) to fetch only those public topics from the database. We define scopes in models - we've already defined a `default_scope` in `Post`.\n\n> Scopes are useful because they can be chained. They are called on `relations` (Active Record collections), and return `relations`, so they make it easy to select highly-specific records with chained calls. Think of each scope in the chain as being a filter, with each one returning a narrower set of results. Active Record combines the conditions specified by the scope or scopes into one optimized SQL query. Writing a query like this manually would be a time-intensive, error-prone task.\n\nWe'll define a simple `visible_to` scope in `Topic`. It should either fetch all topics or only the public ones, depending on whether it is passed a user as an argument. Let's demonstrate that by writing some tests for the scope:\n\n```ruby(spec/models/topic_spec.rb)\n ...\n+\n+  describe \"scopes\" do\n+    before do\n # #1\n+      @public_topic = Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph)\n+      @private_topic = Topic.create!(name: RandomData.random_sentence, description: RandomData.random_paragraph, public: false)\n+    end\n+\n+    describe \"visible_to(user)\" do\n+      it \"returns all topics if the user is present\" do\n+        user = User.new\n # #2\n+        expect(Topic.visible_to(user)).to eq(Topic.all)\n+      end\n+\n+      it \"returns only public topics if user is nil\" do\n # #3\n+        expect(Topic.visible_to(nil)).to eq([@public_topic])\n+      end\n+    end\n+  end\n end\n```\n\nAt __#1__, we create public and private topics to use for testing scopes.\n\nAt __#2__, we expect the `visible_to` scope to return all topics if a user is present.\n\nAt __#3__, we expect the `visible_to` scope to return public topics if a user isn't present.\n\nRun `topic_spec.rb` and note that both tests are failing:\n\n```bash(Terminal)\n$ rspec spec/models/topic_spec.rb\n```\n\nLet's implement the `visible_to` scope and pass the tests:\n\n```ruby(app/models/topic.rb)\n class Topic < ActiveRecord::Base\n   has_many :posts, dependent: :destroy\n   has_many :labelings, as: :labelable\n   has_many :labels, through: :labelings\n\n+  scope :visible_to, -> { where(public: true) }\n end\n```\n\n`scope` is a method which generates methods. Its first argument is the name of the class method to generate, while its second argument provides the logic to run. We use the lambda syntax (the arrow `->` with a block `{ … }`) to implement the method's logic. For a lambda is an \"anonymous method\" and is not run as soon as it is defined, it is the proper way to pass code into a scope definition. The `visible_to` scope will run the code inside the lambda on the relation or class on which it's called. In other words, `Topic.visible_to` is merely an alias to `Topic.where(public: true)`.\n\nThis partially works, but it doesn't solve the problem of determining whether the topic is visible to a _particular user_. To do that using our scope as currently written, we would require an `if` statement in `TopicsController` to determine if a user is signed in. Instead, let's update our new scope so that the lambda takes an argument:\n\n```ruby(app/models/topic.rb)\n class Topic < ActiveRecord::Base\n   has_many :posts, dependent: :destroy\n\n-  scope :visible_to, -> { where(public: true) }\n+  scope :visible_to, -> (user) { user ? all : where(public: true) }\n end\n```\n\n> The [ternary operator](http://stackoverflow.com/questions/4252936/how-do-i-use-the-conditional-operator-in-ruby#answer-4252945) keeps the lambda on one line. This is essentially a one-line if / else condition. It's useful, but often involves sacrificing clarity for brevity. In this case, it's worth using to keep the definition concise.\n\nCalling the updated scope invokes the result of its lambda on the collection or class on which it was originally called. It now returns the equivalent of `Topic.all` or `Topic.where(public: true)`, depending on the value of `user`.\n\nThe `user` argument is passed into the scope like a regular argument. Our end goal is to call `visible_to(current_user)` from a controller's action. Let's simulate two use-cases in our specs: when no one is signed in (`current_user` evaluates to `nil`) and when someone is signed in (`current_user` evaluates to a `User` instance):\n\n```ruby(Console)\n# Let's make the first topic a private one.\n>> Topic.first.update_attribute(:public, false)\n>> Topic.visible_to(nil).count\n>> Topic.visible_to(User.first).count\n```\n\nThe first call of `visible_to` should return `1` less than the second call.\n\nRun `user_spec.rb` again to confirm that both new tests pass:\n\n```bash(Terminal)\n$ rspec spec/models/topic_spec.rb\n```\n\n## Scoping the Topics Controller\n\nFor our scope to modify the list of topics a user can see, we'll need to modify the `index` method in `TopicsController` to return a scoped collection of topics, rather than a comprehensive collection. Let's start by updating `topics_controller_spec.rb` to reflect this new assumption about the `index` action:\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n RSpec.describe TopicsController, type: :controller do\n   let(:my_topic) { create(:topic) }\n+  let(:my_private_topic) { create(:topic, public: false) }\n ...\n   context \"guest\" do\n     describe \"GET index\" do\n ...\n # #4\n+      it \"does not include private topics in @topics\" do\n+        get :index\n+        expect(assigns(:topics)).not_to include(my_private_topic)\n+      end\n     end\n\n   context \"member user\" do\n ...\n     describe \"GET index\" do\n       it \"returns http success\" do\n         get :index\n         expect(response).to have_http_status(:success)\n       end\n\n       it \"assigns Topic.all to topic\" do\n         get :index\n-        expect(assigns(:topics)).to eq([my_topic])\n # #5\n+        expect(assigns(:topics)).to eq([my_topic, my_private_topic])\n       end\n     end\n ...\n    context \"admin user\" do\n ...\n      describe \"GET index\" do\n       it \"returns http success\" do\n         get :index\n         expect(response).to have_http_status(:success)\n       end\n\n       it \"assigns Topic.all to topic\" do\n         get :index\n-       expect(assigns(:topics)).to eq([my_topic])\n # #6\n+       expect(assigns(:topics)).to eq([my_topic, my_private_topic])\n       end\n     end\n ...\n```\n\nAt __#4__, we test that private topics are not retrieved for guest users.\n\nAt __#5__ and __#6__, we expect to retrieve private topics for signed in users.\n\nRun the spec and see that we have failing tests:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb\n```\n\nSome of the tests fail because we haven't using the `visible_to` scope in `TopicsController`. Let's do that now:\n\n```ruby(app/controllers/topics_controller.rb)\n   def index\n-    @topics = Topic.all\n+    @topics = Topic.visible_to(current_user)\n   end\n```\n\nRun your the spec again:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb\n```\n\nAll tests in the spec should pass. Open your browser and sign in as an admin user. Create a private topic and confirm that it appears at the bottom of the topics __index__ view:\n\n<center>\n  ![topics-index-as-signed in-user](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-private-topics/topics-index-as-signed-in-user.png)\n</center>\n\nSign out and confirm that it does not appear at the bottom of the topics __index__ view for guest users:\n\n<center>\n  ![topics-index-as-guest-user](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-private-topics/topics-index-as-guest-user.png)\n</center>\n\n## Authorizing Topics\n\nLeft as is, a user who is not signed in could still enter the specific URL of a private topic and view it. For example, in the Rails console, find the `id` of the non-public topic we created:\n\n```ruby(Console)\n>> Topic.where(public: false).first.id\n=> 1\n```\n\nWhile logged out, enter the specific URL to view that topic by entering: `localhost/topics/1`.\n\nWe need to prevent this behavior, so let's add the requisite authorizations. First we'll need to add a new test for guest users:\n\n```ruby(spec/controllers/topics_controller_spec.rb)\n ...\n   context \"guest\" do\n ...\n     describe \"GET show\" do\n+      it \"redirects from private topics\" do\n+        get :show, {id: my_private_topic.id}\n+        expect(response).to redirect_to(new_session_path)\n+      end\n ...\n```\n\nRun the spec and note the new failure:\n\n```bash(Terminal)\n$ rspec spec/controllers/topics_controller_spec.rb\n```\n\nWe'll update the `show` action in `TopicsController` and pass the test:\n\n```ruby(app/controllers/topics_controller.rb)\n ...\n   def show\n     @topic = Topic.find(params[:id])\n+\n+    unless @topic.public || current_user\n+      flash[:alert] = \"You must be signed in to view private topics.\"\n+      redirect_to new_session_path\n+    end\n   end\n ...\n```\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Deploy to Heroku and migrate your production database:\n\n```bash(Terminal)\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Active Record Scopes](http://guides.rubyonrails.org/active_record_querying.html#scopes) | Active Record scopes allow commonly-used queries to be referenced as method calls. `scope` methods return an `ActiveRecord::Relationship` object. |\n| Ternary Operator | The ternary operator is a one-line if / else conditional expression. It's logically equivalent to a multi-line if / else, but sometimes sacrifices clarity for brevity. |\n| `lambda` | A `lambda` is an anonymous function (a function without a name). `lambda`s are [special instances](http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block/) of the [`Proc` class](http://ruby-doc.org//core-2.2.0/Proc.html). |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Using TDD, define a `publicly_viewable` scope on `Topic` that returns a collection of public topics.\n\n2. Using TDD, define a `privately_viewable` scope on `Topic` that returns a collection of private topics.\n\n3. Use the `publicly_viewable` scope inside of the `visible_to` scope to make your code more DRY. Confirm that the `publicly_viewable` tests pass.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<center>\n  <a href=\"//fast.wistia.net/embed/iframe/tip71ojb2l?popover=true\" class=\"wistia-popover[height=506,playerColor=7b796a,width=900]\">Private Topics Solution</a>\n  <script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/popover-v1.js\"></script>\n</center>",
          "roadmap_section_id": 120,
          "active_index": 46,
          "checkpoint_type": "normal",
          "position": 46,
          "points": 1,
          "ref": "f19ab76f-197f-4f4a-8f52-c6a733f0553a|0"
        },
        {
          "id": 1658,
          "name": "Rails: Ajax",
          "summary": "Ajax: deleting and creating comments without reloading the page",
          "body": "<!-- { ids:[1658], name:'Rails: Ajax', summary:'Ajax: deleting and creating comments without reloading the page' } -->\n<center>\n  ![achilles-ajax-dice](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-ajax/achilles-ajax-dice.jpg)\n</center>\n\n> “It is a painful thing <br/>\n> To look at your own trouble and know <br/>\n> That you yourself and no one else has made it.”\n>\n> — Sophocles, Ajax\n\n## The Magic of Ajax\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/lp4n0wbpw6\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nAjax became popular in the Web 2.0 era. Ajax is a technique, which uses several technologies, to create web applications that _feel_ like desktop applications. The [TLDR](https://en.wikipedia.org/wiki/Wikipedia:Too_long;_didn%27t_read) for Ajax is basically \"no need to reload the page\". Using HTML, CSS, and JavaScript, data can be communicated between the client and the server, and the DOM can be dynamically updated, without reloading the page. This behavior is known as asynchronous communication. With Ajax, web applications can send data to, and retrieve data from, a server asynchronously without interfering with the display and behavior of the existing page - it basically makes buttons and links much faster.\n\nYou probably use \"Ajaxified\" websites every day. For example, Ajax enables the popular \"infinite scroll\" feature that you use on Twitter or Facebook.\n\nWe'll use Ajax to delete and create comments, without reloading the page.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Using Ajax in Rails\n\njQuery has an [Ajax function](http://api.jquery.com/jQuery.ajax/) which you can use to execute requests, but Rails actually makes implementing basic Ajax features easier because it is a standard feature of its API. In Rails-speak, conventional Ajax usage is known as Unobtrusive JavaScript (UJS).\n\n## Unobtrusive Destruction\n\nRails controllers can respond to requests from both HTML (what we've used so far) and JavaScript (what we are about to use). Let's update our specs to reflect the expectation that the `CommentsController` `delete` action should respond to JavaScript requests:\n\n```ruby(spec/controllers/comments_controller_spec.rb)\n ...\n   context \"guest\" do\n     describe \"POST create\" do\n       it \"redirects the user to the sign in view\" do\n         post :create, post_id: my_post.id, comment: {body: RandomData.random_paragraph}\n         expect(response).to redirect_to(new_session_path)\n       end\n     end\n\n     describe \"DELETE destroy\" do\n       it \"redirects the user to the sign in view\" do\n-        delete :destroy, post_id: my_post.id, id: my_comment.id\n # #1\n+        delete :destroy, format: :js, post_id: my_post.id, id: my_comment.id\n         expect(response).to redirect_to(new_session_path)\n       end\n     end\n   end\n\n\n   context \"member user doing CRUD on a comment they don't own\" do\n ...\n\n    describe \"DELETE destroy\" do\n      it \"redirects the user to the posts show view\" do\n-       delete :destroy, post_id: my_post.id, id: my_comment.id\n+       delete :destroy, format: :js, post_id: my_post.id, id: my_comment.id\n        expect(response).to redirect_to([my_topic, my_post])\n      end\n    end\n  end\n\n   context \"member user doing CRUD on a comment they own\" do\n ...\n     describe \"DELETE destroy\" do\n       it \"deletes the comment\" do\n-        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        delete :destroy, format: :js, post_id: my_post.id, id: my_comment.id\n         count = Comment.where({id: my_comment.id}).count\n         expect(count).to eq 0\n       end\n\n-      it \"redirects to the post show view\" do\n-        delete :destroy, post_id: my_post.id, id: my_comment.id\n-        expect(response).to redirect_to [my_topic, my_post]\n # #2\n+      it \"returns http success\" do\n+        delete :destroy, format: :js, post_id: my_post.id, id: my_comment.id\n+        expect(response).to have_http_status(:success)\n       end\n     end\n   end\n\n   context \"admin user doing CRUD on a comment they don't own\" do\n ...\n     describe \"DELETE destroy\" do\n       it \"deletes the comment\" do\n-        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        delete :destroy, format: :js, post_id: my_post.id, id: my_comment.id\n         count = Comment.where({id: my_comment.id}).count\n         expect(count).to eq 0\n       end\n\n-      it \"redirects to the post show view\" do\n-        delete :destroy, post_id: my_post.id, id: my_comment.id\n-        expect(response).to redirect_to [my_topic, my_post]\n+      it \"returns http success\" do\n+        delete :destroy, format: :js, post_id: my_post.id, id: my_comment.id\n+        expect(response).to have_http_status(:success)\n       end\n     end\n   end\n end\n```\n\nAt __#1__, we pass `format: :js` to the `delete` method. This simulates a JavaScript request to the controller.\n\nAt __#2__, we no longer expect that the `destroy` action will redirect to the post __show__ view. Instead we expect to receive an HTTP success message.\n\nRun the spec and note the failures:\n\n```bash(Terminal)\n$ rspec spec/controllers/comments_controller_spec.rb\n```\n\nUpdate the `destroy` action in the comments controller to pass the tests:\n\n```ruby(app/controllers/comments_controller.rb)\n   def destroy\n     @post = Post.find(params[:post_id])\n-    comment = @post.comments.find(params[:id])\n # #3\n+    @comment = @post.comments.find(params[:id])\n\n-    if comment.destroy\n+    if @comment.destroy\n       flash[:notice] = \"Comment was deleted successfully.\"\n-      redirect_to [@post.topic, @post]\n     else\n       flash[:alert] = \"Comment couldn't be deleted. Try again.\"\n-      redirect_to [@post.topic, @post]\n     end\n # #4\n+    respond_to do |format|\n+      format.html\n+      format.js\n+    end\n   end\n```\n\nAt __#3__, we replace `comment` with `@comment` because we'll need to have access to the variable in our `.js.erb` view.\n\nAt __#4__ the `respond_to` block gives our controller action the ability to return different response types, depending on what was asked for in the request. The controller's response is unchanged if the client requests HTML, but if the client requests JavaScript, the controller will render `.js.erb` instead.\n\nNow that we've instructed the controller to respond via Ajax, we need to provide a view for the Ajax response. Rails has a special convention for views such as these; they should be  _Javascript Embedded Ruby_ files, or `.js.erb`. These views allow us to mix JavaScript and Ruby code in one file, which is very convenient for responding to Ajax requests. The Rails convention is to name the `.js.erb` view corresponding to the controller action, so in this case we'd name it  `app/views/comments/destroy.js.erb`. This file will have access to the instance variables (like `@comment`) just like a regular view would. Create the file and add the following code:\n\n```bash(Terminal)\n$ touch app/views/comments/destroy.js.erb\n```\n\n```javascript(app/views/comments/destroy.js.erb)\n// #5\n+$('#comment-<%= @comment.id %>').hide();\n```\n\nAt __#5__, we use the same anchor `id` technique that we used in our emails. This is a useful way to select a specific comment, because it dynamically generates the selector `id` using Ruby code.\n\nThis mix of JavaScript and Ruby code resolves to pure JavaScript when it arrives to the browser. Here's how that JavaScript would look like for a `Comment` with id `42`:\n\n```javascript\n$('#comment-' + 42).hide();\n```\n\nThis JavaScript will be run in the browser to hide the html element with `id=\"comment-42\"`.\n\nRun the spec and confirm that the `destroy` action tests are passing:\n\n```bash(Terminal)\n$ rspec spec/controllers/comments_controller_spec.rb\n```\n\nWe also need to enable the delete link in the view to use Ajax. Rails makes this simple enough, we'll pass a `remote: true` option to the `link_to` method. Open the __comment__ partial, and modify the `link_to` invocation:\n\n```erb(app/views/comments/_comment.html.erb)\n-        | <%= link_to \"Delete\", [@post, comment], method: :delete %>\n+        | <%= link_to \"Delete\", [comment.post, comment], method: :delete, remote: true %>\n```\n\n`remote: :true` adds a jQuery listener to the form, which allows the form to be submitted without the page refreshing.\n\nView the posts __show__ view as an admin user and delete a comment. Notice how much faster the app feels.\n\n## Refactoring for Better Error Messages\n\nIf the destroy action on a comment fails, we should display an error message. Open `destroy.js.erb` and add the following to handle a failed request:\n\n```javascript(app/views/comments/destroy.js.erb)\n-$('#comment-<%= @comment.id %>').hide();\n+<% if @comment.destroyed? %>\n+  $('#comment-<%= @comment.id %>').hide();\n+<% else %>\n // #6\n+  $('.flash').prepend(\"<div class='alert alert-danger'><button type='button' class='close' data-dismiss='alert'>&times;</button><%= flash.now[:alert] %></div>\");\n+<% end %>\n```\n\nAt __#6__, we add a new flash notice notifying the user that an error has occured.\n\nIn order to prepend to the alert, we need to add a new div to `application.html.erb`. [DOM manipulation](https://api.jquery.com/category/manipulation/) often involves updating the DOM with classes and identifies that JavaScript can then manipulate.\n\n```erb(app/views/layouts/application.html.erb)\n ...\n\n+    <div class=\"flash\">\n       <% if flash[:notice] %>\n         <div class=\"alert alert-success\">\n           <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n           <%= flash[:notice] %>\n         </div>\n       <% elsif flash.now[:alert] %>\n         <div class=\"alert alert-danger\">\n           <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n           <%= flash.now[:alert] %>\n         </div>\n       <% elsif flash[:alert] %>\n         <div class=\"alert alert-warning\">\n           <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n           <%= flash[:alert] %>\n         </div>\n       <% end %>\n+    </div>\n\n     <%= yield %>\n   </div>\n\n </body>\n </html>\n\n```\n\n> If your Ajax ever fails \"silently\", i.e. not doing what it should without reporting an error — take a look at the JavaScript, and make sure that all parentheses and brackets are \"matched\", that is each opening parentheses or bracket is matched with a closing parentheses or bracket. You can do this by looking in the __console__ tab of Web Inspector to see if any errors have been raised. This would be an ideal time to read our [Web Inspector](https://www.bloc.io/resources/web-inspector) resource, and start using it as a matter of course. It'll be indispensable to you as a developer.\n\nTo make the deletion \"fail\", and test the flash message, reverse the logic in the `if` statement in the `comments_controller`. Just make sure to change it back after you're done!\n\nThere's still one DOM element that isn't updated via Ajax; the comment count on the users __show__ page. Add a class on the proper header element so that we can find and update it with Ajax. Let's add a div with the `js-comments-count` class to the users __show__ view:\n\n```erb(app/views/users/show.html.erb)\n         <small>\n           <%= pluralize(@user.posts.count, 'post') %>,\n-          <%= pluralize(@user.comments.count, 'comment') %>\n+          <div class='js-comments-count'><%= pluralize(@user.comments.count, 'comment') %></div>\n         </small>\n```\n\nNow we can update the `destroy.js.erb` again:\n\n```javascript(app/views/comments/destroy.js.erb)\n <% if @comment.destroyed? %>\n   $('#comment-<%= @comment.id %>').hide();\n+  $('.js-comments-count').html(\"<%= pluralize(@comment.user.comments.count, 'comment') %>\");\n <% else %>\n   $('.flash').prepend(\"<div class='alert alert-danger'><button type='button' class='close' data-dismiss='alert'>&times;</button><%= flash.now[:alert] %></div>\");\n <% end %>\n```\n\nRefresh the users __show__ page, and watch the comment count header update with each Ajax request.\n\n## Unobtrusive Creation\n\nUsers can destroy comments unobtrusively, so it's reasonable to assume that they'll expect to be able to create them unobtrusively. We'll TDD this feature:\n\n```ruby(spec/controllers/comments_controller_spec.rb)\n ...\n   context \"guest\" do\n     describe \"POST create\" do\n       it \"redirects the user to the sign in view\" do\n-        post :create, post_id: my_post.id, comment: {body: RandomData.random_paragraph}\n+        post :create, format: :js, post_id: my_post.id, comment: {body: RandomData.random_paragraph}\n         expect(response).to redirect_to(new_session_path)\n       end\n     end\n\n     describe \"DELETE destroy\" do\n       it \"redirects the user to the sign in view\" do\n-        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        delete :destroy, format: :js, post_id: my_post.id, id: my_comment.id\n         expect(response).to redirect_to(new_session_path)\n       end\n     end\n   end\n\n   context \"member user doing CRUD on a comment they don't own\" do\n     before do\n       create_session(other_user)\n     end\n\n     describe \"POST create\" do\n       it \"increases the number of comments by 1\" do\n-        expect{ post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence} }.to change(Comment,:count).by(1)\n+        expect{ post :create, format: :js, post_id: my_post.id, comment: {body: RandomData.random_sentence} }.to change(Comment,:count).by(1)\n       end\n\n-      it \"redirects to the post show view\" do\n-        post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence}\n-        expect(response).to redirect_to [my_topic, my_post]\n+      it \"returns http success\" do\n+        post :create, format: :js, post_id: my_post.id, comment: {body: RandomData.random_paragraph}\n+        expect(response).to have_http_status(:success)\n       end\n     end\n\n     describe \"DELETE destroy\" do\n       it \"redirects the user to the posts show view\" do\n-        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        delete :destroy, format: :js, post_id: my_post.id, id: my_comment.id\n         expect(response).to redirect_to([my_topic, my_post])\n       end\n     end\n   end\n\n   context \"member user doing CRUD on a comment they own\" do\n     before do\n       create_session(my_user)\n     end\n\n     describe \"POST create\" do\n       it \"increases the number of comments by 1\" do\n-        expect{ post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence} }.to change(Comment,:count).by(1)\n+        expect{ post :create, format: :js, post_id: my_post.id, comment: {body: RandomData.random_sentence} }.to change(Comment,:count).by(1)\n       end\n\n-      it \"redirects to the post show view\" do\n-        post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence}\n-        expect(response).to redirect_to [my_topic, my_post]\n+      it \"returns http success\" do\n+        post :create, format: :js, post_id: my_post.id, comment: {body: RandomData.random_paragraph}\n+        expect(response).to have_http_status(:success)\n       end\n     end\n\n     describe \"DELETE destroy\" do\n       it \"deletes the comment\" do\n-        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        delete :destroy, format: :js, post_id: my_post.id, id: my_comment.id\n         count = Comment.where({id: my_comment.id}).count\n         expect(count).to eq 0\n       end\n\n-      it \"redirects to the post show view\" do\n-        delete :destroy, post_id: my_post.id, id: my_comment.id\n-        expect(response).to redirect_to [my_topic, my_post]\n+      it \"returns http success\" do\n+        delete :destroy, format: :js, post_id: my_post.id, id: my_comment.id\n+        expect(response).to have_http_status(:success)\n       end\n     end\n   end\n\n   context \"admin user doing CRUD on a comment they don't own\" do\n     before do\n       other_user.admin!\n       create_session(other_user)\n     end\n\n     describe \"POST create\" do\n       it \"increases the number of comments by 1\" do\n-        expect{ post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence} }.to change(Comment,:count).by(1)\n+        expect{ post :create, format: :js, post_id: my_post.id, comment: {body: RandomData.random_sentence} }.to change(Comment,:count).by(1)\n       end\n\n-      it \"redirects to the post show view\" do\n-        post :create, post_id: my_post.id, comment: {body: RandomData.random_sentence}\n-        expect(response).to redirect_to [my_topic, my_post]\n+      it \"returns http success\" do\n+        post :create, format: :js, post_id: my_post.id, comment: {body: RandomData.random_sentence}\n+        expect(response).to have_http_status(:success)\n       end\n     end\n\n     describe \"DELETE destroy\" do\n       it \"deletes the comment\" do\n-        delete :destroy, post_id: my_post.id, id: my_comment.id\n+        delete :destroy, format: :js, post_id: my_post.id, id: my_comment.id\n         count = Comment.where({id: my_comment.id}).count\n         expect(count).to eq 0\n       end\n\n-      it \"redirects to the post show view\" do\n-        delete :destroy, post_id: my_post.id, id: my_comment.id\n-        expect(response).to redirect_to [my_topic, my_post]\n+      it \"returns http success\" do\n+        delete :destroy, format: :js, post_id: my_post.id, id: my_comment.id\n+        expect(response).to have_http_status(:success)\n       end\n     end\n   end\n ...\n```\n\nRun the spec and note the failures:\n\n```bash(Terminal)\n$ rspec spec/controllers/comments_controller_spec.rb\n```\n\nLet's update the `CommentsController` and pass the tests:\n\n```ruby(app/controllers/comments_controller.rb)\n ...\n   def create\n     @post = Post.find(params[:post_id])\n-    comment = @post.comments.new(comment_params)\n-    comment.user = current_user\n+    @comment = @post.comments.new(comment_params)\n+    @comment.user = current_user\n\n-    if comment.save\n+    if @comment.save\n       flash[:notice] = \"Comment saved successfully.\"\n-      redirect_to [@post.topic, @post]\n     else\n       flash[:alert] = \"Comment failed to save.\"\n-      redirect_to [@post.topic, @post]\n     end\n\n+    respond_to do |format|\n+      format.html\n+      format.js\n+    end\n   end\n...\n```\n\nRun the spec and note that our new tests still fail because we haven't created a JavaScript file for creating comments.\n\n```bash(Terminal)\n$ rspec spec/controllers/comments_controller_spec.rb\n```\n\nCreate `app/views/comments/create.js.erb` and run the specs again to see that they now pass:\n\n```bash(Terminal)\n$ touch app/views/comments/create.js.erb\n```\n\n```bash(Terminal)\n$ rspec spec/controllers/comments_controller_spec.rb\n```\n\nConsider the following pseudo code:\n\n```text\nif the comment is valid\n  add the comment to the list of comments\nelse\n  render an error on the form\nend\n```\n\nTo add a comment to the top of a list, we'll use the jQuery `prepend` method. To call `prepend`, we'll need something to prepend the `comment` _to_. Open the posts __show__ view and add a `div` around the renders for the comments collection and the comments form:\n\n```erb(app/views/posts/show.html.erb)\n     <div>\n       <h3>Comments</h3>\n-      <%= render @post.comments %>\n+      <div class='js-comments'>\n+        <%= render @post.comments %>\n+      </div>\n     </div>\n     <% if current_user %>\n-      <%= render 'comments/form', comment: Comment.new, post: @post %>\n+      <div class='new-comment'>\n+        <%= render 'comments/form', comment: Comment.new, post: @post %>\n+      </div>\n    <% end %>\n```\n\nShowing a new comment will require a call to `render` and an updated `comments` collection, or the comment form. This can be done from within our `js.erb` file using `escape_javascript`, which will ensure the HTML generated by the `render` is displayed by the Ajax response.\n\n> Refer to the [Rails docs](http://api.rubyonrails.org/classes/ActionView/Helpers/JavaScriptHelper.html#method-i-escape_javascript) for more details on `escape_javascript`.\n\nUsing our pseudo-code as a guide, use the `valid?` method, along with `escape_javascript` to create a new `comment` unobtrusively:\n\n```javascript(app/views/comments/create.js.erb)\n+<% if @comment.valid? %>\n+  $('.js-comments').prepend(\"<%= escape_javascript(render(@comment)) %>\");\n+  $('.new-comment').html(\"<%= escape_javascript(render partial: 'comments/form', locals: { post: @post, comment: @comment }) %>\");\n+<% else %>\n+  $('.flash').prepend(\"<div class='alert alert-danger'><button type='button' class='close' data-dismiss='alert'>&times;</button><%= flash.now[:alert] %></div>\");\n+  $('.new-comment').html(\"<%= escape_javascript(render partial: 'comments/form', locals: { post: @post, comment: @comment }) %>\");\n+<% end %>\n```\n\nBecause we are prepending comments to the top of the list, we should ensure that comments are ordered consistently. For example, if we refresh the page after the Ajax response, we want the order to stay consistent. We can accomplish this by using a `default_scope`. In `Comment`:\n\n```ruby(app/models/comment.rb)\n  class Comment < ActiveRecord::Base\n    belongs_to :post\n    belongs_to :user\n\n    validates :body, length: { minimum: 5 }, presence: true\n    validates :user, presence: true\n+\n+   default_scope { order('updated_at DESC') }\n  end\n```\n\n## Ajaxifying the Form\n\nOpen the comment __form__ partial and add `remote: true` to enable Ajax on the form:\n\n```erb(app/views/comments/_form.html.erb)\n <h4>Add a comment</h4>\n-<%= form_for [post, comment] do |f| %>\n+<%= form_for [post, comment], remote: true do |f| %>\n ...\n```\n\nCreate a new comment in the browser. The unobtrusive `create` action works, but there is a problem — the __form__ wasn't cleared after the `create`.\n\nTo clear the form, we can render a new __form__ partial, with a new instance of a `comment`. We'll do this by adding a new instance variable to `CommentsController`:\n\n```ruby(app/controllers/comments_controller.rb)\n...\n   def create\n     @post = Post.find(params[:post_id])\n     @comment = @post.comments.new(comment_params)\n     @comment.user = current_user\n+    @new_comment = Comment.new\n ...\n```\n\nWe'll use the `@new_comment` variable in `create.js.erb`:\n\n```erb(app/views/comments/create.js.erb)\n <% if @comment.valid? %>\n   $('.js-comments').prepend(\"<%= escape_javascript(render(@comment)) %>\");\n-  $('.new-comment').html(\"<%= escape_javascript(render partial: 'comments/form', locals: { post: @post, comment: @comment }) %>\");\n+  $('.new-comment').html(\"<%= escape_javascript(render partial: 'comments/form', locals: { post: @post, comment: @new_comment }) %>\");\n <% else %>\n   $('.new-comment').html(\"<%= escape_javascript(render partial: 'comments/form', locals: { post: @post, comment: @comment }) %>\");\n <% end %>\n```\n\nIn the browser submit another comment. We now have a fully Ajaxified resource for creating new comments.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Deploy to Heroku and migrate your production database:\n\n```bash(Terminal)\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [Ajax](http://en.wikipedia.org/wiki/Ajax_%28programming%29) | Ajax is a technique comprised of web development technologies, used in the client to create features which don't require page reloads. |\n| [Unobtrusive JavaScript](http://guides.rubyonrails.org/working_with_javascript_in_rails.html#unobtrusive-javascript) | Unobtrusive JavaScript separates the functionality from a web page's structure, content, and presentation. |\n| [`respond_to`](http://apidock.com/rails/ActionController/MimeResponds/ClassMethods/respond_to) | The `respond_to` method defines the [mime types](http://en.wikipedia.org/wiki/Internet_media_type) that are rendered by the controller. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\n1. Rather than attach new comments to the top of the list, attach them to the bottom. This will make Bloccit adhere to the conventions followed by most commenting systems.\n\n2. To attach new comments to the bottom of the list, use the jQuery [`append()`](http://api.jquery.com/append/) method\n\n3. Since we are now appending comments to the bottom of the list, modify the `default_scope` in `Comment` so that comments are returned in ascending order by their updated date.\n\n4. Update the vote tests, views, and controller to support Ajax up and down voting.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.",
          "roadmap_section_id": 120,
          "active_index": 47,
          "checkpoint_type": "normal",
          "position": 47,
          "points": 1,
          "ref": "1c42ddee-f62e-4375-8638-0a60f0dd4e3b|0"
        },
        {
          "id": 1660,
          "name": "Rails: Building an API - Retrieving Data",
          "summary": "APIs: retrieving data from the RESTful Bloccit API",
          "body": "<!-- { ids:[1660], name:'Rails: Building an API - Retrieving Data', summary:'APIs: retrieving data from the RESTful Bloccit API' } -->\n<center>\n![APIs](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-apis-retrieving-data/api.jpg)\n</center>\n\n> “The rise of Google, the rise of Facebook, the rise of Apple, I think are proof that there is a place for computer science as something that solves problems that people face every day.”\n>\n> — Eric Schmidt\n\n## APIs\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/dymc05kcvz\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nAPI stands for [Application Programming Interface](https://en.wikipedia.org/wiki/Application_programming_interface). APIs are similar to databases. We query an API with a specific command and the API returns data relevant to our query.\n\nWhen we query the API, we query specific **endpoints**. These endpoints are specific URLs which return data. APIs can return data in various formats, but most modern APIs return data in [JSON format](https://en.wikipedia.org/wiki/JSON). JSON, which stands for JavaScript Object Notation, represents data in a simple, human readable format.\n\nDevelopers build APIs to make their system's data available for other developers to use. One may wonder what the motivation would be to expose data in this way. To illustrate the motivation, imagine Apple's App Store if developers didn't have the ability to build their own apps; the App Store would be comprised only of apps that Apple created. By allowing other developers to create apps using their APIs, Apple created billions of dollars worth of business for itself and for thousands of other people and companies. Companies like Twitter and Facebook build and maintain APIs to allow developers to integrate features like tweets and posts into their own applications. People can even build new products and companies using APIs. For example, [ZenHub](https://www.zenhub.io/), a product we use at Bloc, sells an agile project management extension for GitHub, using the GitHub API. APIs allow products to become **platforms**.\n\nWe will build a RESTful API for Bloccit. [RESTful APIs](http://www.restapitutorial.com/) adhere to various standards such as HTTP, URI, and JSON. In this checkpoint, we will create the **read-only** RESTful API operations for Bloccit; GET requests.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Implementing API Authentication\n\nWe want to restrict access to our API in certain ways, so we'll need to build an authentication mechanism. We'll require our users to have a token which will allow them to send requests to the API. Tokens are unique strings that will be associated with a user. Our API will have the following access rules:\n\n1. Anyone can GET Topics and Posts;\n2. Only admins can GET users;\n3. Only admins can create, update, and destroy Topics.\n\nWe'll continue to use TDD to build our API. Let's add a simple test that ensures a user has a token:\n\n```ruby(spec/models/user_spec.rb)\n ...\n       expect(User.avatar_url(known_user, 48)).to eq(expected_gravatar)\n     end\n   end\n+\n # #1\n+  describe \"#generate_auth_token\" do\n+    it \"creates a token\" do\n+      expect(user.auth_token).to_not be_nil\n+    end\n+  end\n end\n```\n\nAt __#1__, we define a test for a method that does not exist yet, `generate_auth_token`. This method will create a token for the user. The test `expects` the token to not be `nil`.\n\nRun the test and note the failure:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n```\n\nLet's create auth_token attribute in the users table:\n\n```bash(Terminal)\n$ rails generate migration AddAuthenticationTokenToUsers auth_token:string\n```\n\n> You may need to reset the database to complete the migration.\n\nRun the migration:\n\n```bash(Terminal)\n$ rake db:migrate\n```\n\nLet's create `generate_auth_token` to pass the failing test:\n\n```ruby(app/models/user.rb)\nclass User < ActiveRecord::Base\n\n   before_save { self.email = email.downcase }\n   before_save { self.role ||= :member }\n # #2\n+  before_create :generate_auth_token\n\n   def self.avatar_url(user, size)\n     gravatar_id = Digest::MD5::hexdigest(user.email).downcase\n     \"http://gravatar.com/avatar/#{gravatar_id}.png?s=#{size}\"\n   end\n+\n # #3\n+  def generate_auth_token\n+    loop do\n+      self.auth_token = SecureRandom.base64(64)\n+      break unless User.find_by(auth_token: auth_token)\n+    end\n+  end\n end\n```\n\nAt __#2__, we use the `before_create` hook to ensure that a token is generated for a user before it is created and saved to the database.\n\nAt __#3__, we define `generate_auth_token` which uses [`SecureRandom.base64(n)`](http://docs.ruby-lang.org/en/2.2.0/SecureRandom.html) to generate a [Base64](https://en.wikipedia.org/wiki/Base64) string. The argument _n_ specifies the length, in bytes, of the random number to be generated. The length of the result string is about 4/3 of _n_. This string is the user's token. We use a Base64 string because the characters that make up the set of the Base64 characters are also common to the ASCII encoding, thus none of the characters in the token will need to be escaped. The token will consist of the following characters: `A-Z, a-z, 0-9, “+”, “/” and “=”`.\n\nRun the spec and ensure that the test passes:\n\n```bash(Terminal)\n$ rspec spec/models/user_spec.rb\n```\n\n## Implementing `Api::V1::BaseController`\n\nControllers will provide most of the functionality for our API. The API controllers we'll create will be very similar to the controllers we've already created for Bloccit. They will allow a user with an API token to fetch and create data. The difference between the API controllers and the controllers we created for Bloccit thus far is that the API controllers will return JSON, rather than render HTML. It is up to the consumer of the API (someone with a token who is making the request) to decide what to do with the data that they fetch.\n\nOur controllers will have some common functionality, such as authentication and authorization. Following our DRY principle, let's define this functionality in a common controller named `Api::V1::BaseController`.\n\nCreate the following directory path in your project:\n\n```bash(Terminal)\n$ mkdir -p spec/api/v1/controllers\n```\n\n> We created three new directories above. The `-p` option tells `mkdir` to create any leading directories that do not already exist. In our case the leading directories were `api` and `v1`.\n\nLet's create `base_controller_spec.rb` to test our common API functionality:\n\n```bash(Terminal)\n$ touch spec/api/v1/controllers/base_controller_spec.rb\n```\n\nOpen it, and implement the following tests:\n\n```ruby(spec/api/v1/controllers/base_controller_spec.rb)\n+require 'rails_helper'\n+\n+RSpec.describe Api::V1::BaseController, type: :controller do\n+  let(:my_user) { create(:user) }\n+\n+  context \"authorized user\" do\n # #4\n+    before do\n+      controller.request.env['HTTP_AUTHORIZATION'] = ActionController::HttpAuthentication::Token.encode_credentials(my_user.auth_token)\n+      controller.authenticate_user\n+    end\n+\n+    describe \"#authenticate_user\" do\n+      it \"finds a user by their authentication token\" do\n # #5\n+        expect(assigns(:current_user)).to eq(my_user)\n+      end\n+    end\n+  end\n+end\n```\n\nAt __#4__, we set an HTTP header named `HTTP_AUTHORIZATION` in our request to the user's `auth_token` in order for our requests to work properly with the API. Once the header is set, we call `controller.authenticate_user` which searches for a user in the database using the token that is passed in via the request header.\n\nAt __#5__, we expect that `authenticate_user` finds the user by the specified token and sets `current_user` which then authenticates the user with the API.\n\nRun the spec:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/base_controller_spec.rb\n```\n\n... and we see an `uninitialized constant Api (NameError)`. We must create the Api namespace and the `BaseController` class for the spec to run without error. Let's create the directories and files for those:\n\n```bash(Terminal)\n$ mkdir -p app/controllers/api/v1\n$ touch app/controllers/api/v1/base_controller.rb\n```\n\nOpen `BaseController` and add the following methods for our common API functionality:\n\n```ruby(app/controllers/api/v1/base_controller.rb)\n+class Api::V1::BaseController < ApplicationController\n # #6\n+  skip_before_action :verify_authenticity_token\n+\n # #7\n+  rescue_from ActiveRecord::RecordNotFound, with: :not_found\n+  rescue_from ActionController::ParameterMissing, with: :malformed_request\n+\n # #8\n+  def authenticate_user\n+    authenticate_or_request_with_http_token do |token, options|\n+      @current_user = User.find_by(auth_token: token)\n+    end\n+  end\n+\n # #9\n+  def authorize_user\n+    unless @current_user && @current_user.admin?\n+      render json: { error: \"Not Authorized\", status: 403 }, status: 403\n+    end\n+  end\n+\n # #10\n+  def malformed_request\n+    render json: { error: \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.\", status: 400 }, status: 400\n+  end\n+\n # #11\n+  def not_found\n+    render json: { error: \"Record not found\", status: 404 }, status: 404\n+  end\n+end\n```\n\nAt __#6__, we use `skip_before_action :verify_authenticity_token` to skip the Rails `verify_authenticity_token` method which provides [RequestForgeryProtection](http://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html). If we don't skip it, we won't be able to make API calls from other domains.\n\nAt __#7__, we use `rescue_from` to catch any `ActiveRecord::RecordNotFound` exception that occurs and execute the `not_found` method in `Api::V1::BaseController` if the exception does occur. Similarly, we catch `ActionController::ParameterMissing` exceptions and execute `malformed_request`.\n\nAt __#8__, we define `authenticate_user` which uses Ruby's `authenticate_or_request_with_http_token` method. This method checks the request for authorization headers and passes them to the proceeding block. We then use the token to find the user and set `@current_user`, thereby authenticating them.\n\nAt __#9__, we ensure a user is authorized by checking that `@current_user` is set and that the current user is an admin. This means that if a user is not an admin they will not be able to access the API. If the user is not authorized, we render JSON with the message \"Not Authorized\" and return an [HTTP response code of 403, \"Forbidden\"](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).\n\nAt __#10__, we define `malformed_request` that is executed if a `ParameterMissing` exception is thrown by any actions in the API controllers.\n\nAt __#11__, we define `not_found` that is executed if a `RecordNotFound` exception is thrown by any action in the API controllers.\n\nRun the spec and ensure that the test passes:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/base_controller_spec.rb\n```\n\n## Implementing `Api::V1::UsersController`\n\nLet's give our API consumers the ability to fetch information about users by building another controller. We'll name the controller `Api::V1::UsersController` but it will have a different file path than our existing `UsersController` and it will return JSON rather than render HTML. Let's write our spec for our new controller first:\n\n```bash(Terminal)\n$ touch spec/api/v1/controllers/users_controller_spec.rb\n```\n\nOpen the spec, and add the following tests:\n\n```ruby(spec/api/v1/controllers/users_controller_spec.rb)\n+require 'rails_helper'\n+\n+RSpec.describe Api::V1::UsersController, type: :controller do\n+  let(:my_user) { create(:user) }\n+\n # #12\n+  context \"unauthenticated users\" do\n+    it \"GET index returns http unauthenticated\" do\n+      get :index\n+      expect(response).to have_http_status(401)\n+    end\n+\n+    it \"GET show returns http unauthenticated\" do\n+      get :show, id: my_user.id\n+      expect(response).to have_http_status(401)\n+    end\n+  end\n+\n # #13\n+  context \"authenticated and unauthorized users\" do\n+    before do\n+      controller.request.env['HTTP_AUTHORIZATION'] = ActionController::HttpAuthentication::Token.encode_credentials(my_user.auth_token)\n+    end\n+\n+    it \"GET index returns http forbidden\" do\n+      get :index\n+      expect(response).to have_http_status(403)\n+    end\n+\n+    it \"GET show returns http forbidden\" do\n+      get :show, id: my_user.id\n+      expect(response).to have_http_status(403)\n+    end\n+  end\n+\n # #14\n+  context \"authenticated and authorized users\" do\n+    before do\n+      my_user.admin!\n+      controller.request.env['HTTP_AUTHORIZATION'] = ActionController::HttpAuthentication::Token.encode_credentials(my_user.auth_token)\n+    end\n+\n+    describe \"GET index\" do\n+      before { get :index }\n+\n+      it \"returns http success\" do\n+        expect(response).to have_http_status(:success)\n+      end\n+\n # #15\n+      it \"returns json content type\" do\n+        expect(response.content_type).to eq(\"application/json\")\n+      end\n+\n+      it \"returns my_user serialized\" do\n+        expect(response.body).to eq([my_user].to_json)\n+      end\n+    end\n+\n # #16\n+    describe \"GET show\" do\n+      before { get :show, id: my_user.id }\n+\n+      it \"returns http success\" do\n+        expect(response).to have_http_status(:success)\n+      end\n+\n+      it \"returns json content type\" do\n+        expect(response.content_type).to eq 'application/json'\n+      end\n+\n+      it \"returns my_user serialized\" do\n+        expect(response.body).to eq(my_user.to_json)\n+      end\n+    end\n+  end\n+end\n```\n\nAt __#12__, we verify that the **index** and **show** views return a 401 if the request is unauthenticated.\n\nAt __#13__, we test that an HTTP response code 403 is returned for unauthenticated and unauthorized users.\n\nAt __#14__, we test the behavior for an authenticated and authorized user.\n\nAt __#15__, we test that the `response.content_type` is `application/json`. Content type in the response is a **header** and is added by the Bloccit API.\n\nAt __#16__, we test the **show** view for an authenticated and authorized user.\n\nAt __#15__ and __#16__ we call `to_json` in our expect statements since our controller actions will use the `render` method with `:json` as a parameter. `redner :json` takes a hash and transforms the hash into a string. Our `to_json` also takes a hash and transforms the hash into a string. Both `render :json` and `to_json` escape quotation marks used in the hash keys.\n\nRun the spec and note the nine failures:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/users_controller_spec.rb\n```\n\nUsing the spec failures as our guide, we'll need to create the new controller, implement the methods, and add the proper routes:\n\n```bash(Terminal)\n$ touch app/controllers/api/v1/users_controller.rb\n```\n\nOpen `UsersController` and add the following methods:\n\n```ruby(app/controllers/api/v1/users_controller.rb)\n+class Api::V1::UsersController < Api::V1::BaseController\n+  before_action :authenticate_user\n+  before_action :authorize_user\n+\n+  def show\n+    user = User.find(params[:id])\n # #17\n+    render json: user, status: 200\n+  end\n+\n+  def index\n+    users = User.all\n # #18\n+    render json: users, status: 200\n+  end\n+end\n```\n\nAt __#17__, we define the **show** action for our API's `UsersController`. The **show** action in this controller is similar to our non-API `UsersController` in that it finds a user based on the id. Unlike our non-API `UsersController`, this **show** action renders the user object it finds as JSON and returns an HTTP status code of 200 (success).\n\nAt __#18__, we see the **index** action which renders all users as JSON.\n\nLet's add the necessary routes:\n\n```ruby(config/routes.rb)\n ...\n   get 'about' => 'welcome#about'\n\n   root 'welcome#index'\n+\n # #19\n+  namespace :api do\n+    namespace :v1 do\n+      resources :users, only: [:index, :show]\n+    end\n+  end\n end\n```\n\nAt __#19__, we added two new namespaces: **api** and **v1**. v1 is nested under api to create a URI of **/api/v1/**. Under our nested namespace we see resourceful routing for users, with only an **index** and **show** route. Let's review the routes we just created:\n\n```bash(Terminal)\n $ rake routes | grep api\n   api_v1_users GET    /api/v1/users(.:format)                       api/v1/users#\n   api_v1_user GET    /api/v1/users/:id(.:format)                    api/v1/users#show\n```\n\nWe now have two new URIs: **/api/v1/users** and **/api/v1/users/id**, which correspond to the **index** and **show** actions respectively. Run the spec again and ensure that all of the tests pass:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/users_controller_spec.rb\n```\n\n## Implementing `Api::V1::TopicsController`\n\nLet's add a read-only API endpoint for topics. Create a spec file:\n\n```bash(Terminal)\n$ touch spec/api/v1/controllers/topics_controller_spec.rb\n```\n\nOpen it, and add the following tests:\n\n```ruby(spec/api/v1/controllers/topics_controller_spec.rb)\n+require 'rails_helper'\n+\n+RSpec.describe Api::V1::TopicsController, type: :controller do\n+  let(:my_user) { create(:user) }\n+  let(:my_topic) { create(:topic) }\n+\n # #20\n+  context \"unauthenticated user\" do\n+    it \"GET index returns http success\" do\n+      get :index\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"GET show returns http success\" do\n+      get :show, id: my_topic.id\n+      expect(response).to have_http_status(:success)\n+    end\n+  end\n+\n+  context \"unauthorized user\" do\n+    before do\n+      controller.request.env['HTTP_AUTHORIZATION'] = ActionController::HttpAuthentication::Token.encode_credentials(my_user.auth_token)\n+    end\n+\n # #21\n+    it \"GET index returns http success\" do\n+      get :index\n+      expect(response).to have_http_status(:success)\n+    end\n+\n+    it \"GET show returns http success\" do\n+      get :show, id: my_topic.id\n+      expect(response).to have_http_status(:success)\n+    end\n+  end\n+end\n```\n\nAt __#20__, we want unauthenticated users to be able to fetch a topic or all topics, per our access rules.\n\nAt __#21__, we want unauthorized users to be able to fetch a topic or all topics, per our access rules.\n\nOur topics API controller will need an `index` and `show` action. Create the file for the controller:\n\n```bash(Terminal)\n$ touch app/controllers/api/v1/topics_controller.rb\n```\n\nOpen it, and add the following:\n\n```ruby(app/controllers/api/v1/topics_controller.rb)\n+class Api::V1::TopicsController < Api::V1::BaseController\n # #22\n+  before_action :authenticate_user, except: [:index, :show]\n+  before_action :authorize_user, except: [:index, :show]\n+\n+  def index\n+  end\n+\n+  def show\n+  end\n+end\n```\n\nAt __#22__, we use `before_action` to ensure that a user is authenticated and authorized to use the actions in `Api::V1:TopicsController`, except for `index` and `show`.\n\nRun the spec and note the four failures:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/topics_controller_spec.rb\n```\n\nWe need to write the implemntation for `index` and `show`:\n\n```ruby(app/controllers/api/v1/topics_controller.rb)\n class Api::V1::TopicsController < Api::V1::BaseController\n\n   before_action :authenticate_user, except: [:index, :show]\n   before_action :authorize_user, except: [:index, :show]\n\n # #23\n   def index\n+    topics = Topic.all\n+    render json: topics, status: 200\n   end\n\n # #24\n   def show\n+    topic = Topic.find(params[:id])\n+    render json: topic, status: 200\n   end\n end\n```\n\nAt __#23__, we write the `index` action for topics, which is similar to our **index** action for users.\n\nAt __#24__, we write the `show` action for topics.\n\nRun the spec and note the four failures:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/topics_controller_spec.rb\n```\n\nAs our failures show, we need to implement the proper routes:\n\n```ruby(config/routes.rb)\n ...\n   get 'about' => 'welcome#about'\n\n   root 'welcome#index'\n\n   namespace :api do\n     namespace :v1 do\n       resources :users, only: [:index, :show]\n+      resources :topics, only: [:index, :show]\n     end\n   end\n end\n```\n\nRake the routes to review the new route, and run the spec to ensure that all four tests pass:\n\n```bash(Terminal)\n$ rake routes | grep api\n$ rspec spec/api/v1/controllers/topics_controller_spec.rb\n```\n\n## Fetching API Data\n\n[Curl](http://linux.die.net/man/1/curl) is a tool to transfer data from or to a server. Let's use curl to request data from Bloccit's API, from the command line. First, let's explore fetching a user:\n\n> Make sure your localhost is up and running with `rails s`\n\n```bash(Terminal)\n$ curl -X GET 'http://localhost:3000/api/v1/users'\nHTTP Token: Access denied.\n```\n\n> The `-X GET` in the curl command is unnecessary as curl defaults to GET requests, but we added it to be explicit.\n\nWe tried to fetch the index of users, but we didn't specify an access token. Let's try again with an access token.\n\nCreate a new Bloccit user by either re-signing up or using the Rails console.\n\nWe'll need to get our access token from the database for out new user. Open the Rails console and fetch it:\n\n> We're assuming our user's name is \"Canyon\" in the following example.\n\n```bash(terminal)\n$ rails c\nLoading development environment (Rails 4.2.5)\n2.2.1 :001 > User.where(name: \"Canyon\").first.auth_token\n  User Load (0.2ms)  SELECT  \"users\".* FROM \"users\" WHERE \"users\".\"name\" = ?  ORDER BY \"users\".\"id\" ASC LIMIT 1  [[\"name\", \"Canyon\"]]\n => \"SkHcRHe8filXMX9os3twmYV2LRYADzlOoX99wHIFimgFLBwEe/kuzM4Y7Ia96tRudoMv/dLEKz5TrJkalpdriw==\"\n```\n\n> Our authentication token is `SkHcRHe8filXMX9os3twmYV2LRYADzlOoX99wHIFimgFLBwEe/kuzM4Y7Ia96tRudoMv/dLEKz5TrJkalpdriw==`. Yours will look similar but will be slightly different.\n\nWhile we're in the console, let's make Canyon an admin if he's not already:\n\n```bash(terminal)\n2.2.1 :004 > u = User.where(name: \"Canyon\")\n  User Load (0.2ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"name\" = ?  [[\"name\", \"Canyon\"]]\n => #<ActiveRecord::Relation [#<User id: 8, name: \"Canyon\", email: \"canyon.the.malamute@gmail.com\", password_digest: \"$2a$10$eHOPOaouXajNJli72/.tAeGXkoAmUfqVht2cSDRMikN...\", created_at: \"2015-09-10 21:48:45\", updated_at: \"2015-09-10 22:02:06\", role: 1, auth_token: \"SkHcRHe8filXMX9os3twmYV2LRYADzlOoX99wHIFimgFLBwEe/...\">]>\n\n2.2.1 :005 > u0 = u[0]\n => #<User id: 8, name: \"Canyon\", email: \"canyon.the.malamute@gmail.com\", password_digest: \"$2a$10$eHOPOaouXajNJli72/.tAeGXkoAmUfqVht2cSDRMikN...\", created_at: \"2015-09-10 21:48:45\", updated_at: \"2015-09-10 22:02:06\", role: 1, auth_token: \"SkHcRHe8filXMX9os3twmYV2LRYADzlOoX99wHIFimgFLBwEe/...\">\n\n2.2.1 :006 > u0.password = \"password\"\n => \"password\"\n\n2.2.1 :007 > u0.admin!\n   (0.1ms)  begin transaction\n  User Exists (0.3ms)  SELECT  1 AS one FROM \"users\" WHERE (LOWER(\"users\".\"email\") = LOWER('canyon.the.malamute@gmail.com') AND \"users\".\"id\" != 8) LIMIT 1\n  SQL (0.4ms)  UPDATE \"users\" SET \"role\" = ?, \"password_digest\" = ?, \"updated_at\" = ? WHERE \"users\".\"id\" = ?  [[\"role\", 1], [\"password_digest\", \"$2a$10$eHOPOaouXajNJli72/.tAeGXkoAmUfqVht2cSDRMikN...\"], [\"updated_at\", \"2015-09-10 22:02:32.297489\"], [\"id\", 8]]\n   (4.6ms)  commit transaction\n => true\n\n2.2.1 :008 > u0.save\n   (0.1ms)  begin transaction\n  User Exists (0.2ms)  SELECT  1 AS one FROM \"users\" WHERE (LOWER(\"users\".\"email\") = LOWER('canyon.the.malamute@gmail.com') AND \"users\".\"id\" != 8) LIMIT 1\n  SQL (0.4ms)  UPDATE \"users\" SET \"password_digest\" = ?, \"updated_at\" = ? WHERE \"users\".\"id\" = ?  [[\"password_digest\", \"$2a$10$WzIsupUDCkH6AajmaWFTSOCd//1S53e2ZUB4aAF/Ao7Elji.D5tN2\"], [\"updated_at\", \"2015-09-10 22:03:32.297489\"], [\"id\", 8]]\n   (1.1ms)  commit transaction\n => true\n```\n\nLet's use the token in the prior curl request.\n\n> Your token will be different from ours, so you'll need to copy it directly from your Rails console, and not from the checkpoint. Also, make sure you run the curl command from your Terminal, and not the Rails console.\n\n```bash(Terminal)\n$ curl -H \"Authorization: Token SkHcRHe8filXMX9os3twmYV2LRYADzlOoX99wHIFimgFLBwEe/kuzM4Y7Ia96tRudoMv/dLEKz5TrJkalpdriw==\" http://localhost:3000/api/v1/users/\n\n[{\"id\":1,\"name\":\"Fqxvgum Ecbaxt\",\"email\":\"jwiv@ogxrkce.clh\",\"password_digest\":\"$2a$10$6V3Ro4F4sIVBORkTkN5nv.ml4Rnc7CpdgNP3eBLiRArOVCZaLthsi\",\"created_at\":\"2015-09-10T21:36:58.737Z\",\"updated_at\":\"2015-09-10T21:36:58.737Z\",\"role\":\"member\",\"auth_token\":\"QRioc3TRu1BOZmbJeLUbDdoKharu1qvXoZvXSeUvubGeu75hDC5LwhZ36EZtbxXYaUAUXA46E6Ca58w+pE35gA==\"},\n...\n```\n\nThe output we see is an array of user objects in JSON format. Let's use a JSON formatter on the web to view the JSON in a readable way. Open your browser and navigate to http://jsonviewer.stack.hu/. Copy the JSON output from the terminal and paste it in the JSON viewer:\n\n<center>\n![JSON](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-apis-retrieving-data/json.png)\n</center>\n\nClick on the **Viewer** tab in the top left corner and we see that each item in the list is a Bloccit user with an id, name, email, etc. This is a great way to check JSON results, so you may want to bookmark the site for future use.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Deploy to Heroku and migrate your production database:\n\n```bash(Terminal)\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [RESTful API](http://www.quora.com/What-is-an-API) | APIs expose an application's data and functionality to the outside world. APIs provide an interface for programmers to interact with an application and are often RESTful and return JSON. |\n| [JSON](http://stackoverflow.com/questions/383692/what-is-json-and-why-would-i-use-it) | JSON stands for JavaScript Object Notation. JSON is a lightweight format that is used for data interchanging. JSON is used ubiquitously across the web as the data format returned by many APIs. |\n| [Curl](https://en.wikipedia.org/wiki/CURL) | Curl is a command-line tool which allows a user to interact with an API. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nImplement the read-only portion for Posts and Comments using TDD. The new endpoints should be RESTful and should return JSON. You'll need endpoints for:\n\n1. GET `api/v1/posts/:id`\n2. GET `api/v1/posts/`\n3. GET `api/v1/comments/:id`\n4. GET `api/v1/comments`\n5. `api/v1/topics/:id` should include an array of child posts.\n6. `api/v1/posts/:id` should include an array of child comments.\n\nAll endpoints should return JSON and `index` routes should return arrays of objects in JSON.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.\n\n---\n\n### Solution\n\n__Do not watch this video until after you've attempted to complete the assignment.__ If you struggle to complete the assignment, submit your best effort to your mentor _before watching a solution video_.\n\n<script charset=\"ISO-8859-1\" src=\"//fast.wistia.com/assets/external/E-v1.js\" async></script><span class=\"wistia_embed wistia_async_4hs0ts8e11 popover=true popoverAnimateThumbnail=true popoverContent=link\" style=\"display:inline\"><a href=\"#\">APIs Retrieving Data Assignment Solution</a></span>",
          "roadmap_section_id": 120,
          "active_index": 48,
          "checkpoint_type": "normal",
          "position": 48,
          "points": 1,
          "ref": "6e510980-7422-45dc-ba25-04dd78248540|0"
        },
        {
          "id": 1661,
          "name": "Rails: Building an API - Sending Data",
          "summary": "APIs: sending data to the RESTful Bloccit API",
          "body": "<!-- { ids:[1661], name:'Rails: Building an API - Sending Data', summary:'APIs: sending data to the RESTful Bloccit API' } -->\n<center>\n  ![achilles-ajax-dice](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-apis-sending-data/xkcd-api.png)\n</center>\n\n> “Any fool can write code that a computer can understand. Good programmers write code that humans can understand.”\n>\n> — Martin Fowler\n\n\n## Posting Data to APIs\n\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/t7tie9pqbw\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n\nIn addition to retrieving data, we can use APIs for creating and updating data. Now that our Bloccit API can retrieve users and topics, let's provide endpoints to create, update, and delete these resources as well.\n\n## Git\n\nCreate a new Git feature branch for this checkpoint. See [Git Checkpoint Workflow: Before Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-checkpoint) for details.\n\n## Updating and Creating Users\n\nLet's provide API endpoints to update and create existing users. Update `routes.rb` to add the new users routes:\n\n```ruby(config/routes.rb)\n ...\n   namespace :api do\n     namespace :v1 do\n-      resources :users, only: [:index, :show]\n+      resources :users, only: [:index, :show, :create, :update]\n       resources :topics, only: [:index, :show]\n ...\n```\n\nAs with the user `show` and `index` endpoints, we will only allow authenticated admins to update or create users via the API. Update `users_controller_spec.rb` to reflect this expectation:\n\n```ruby(spec/api/v1/controllers/users_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Api::V1::UsersController, type: :controller do\n   let(:my_user) { create(:user) }\n\n   context \"unauthenticated users\" do\n ...\n+\n # #1\n+    it \"PUT update returns http unauthenticated\" do\n+      new_user = build(:user)\n+      put :update, id: my_user.id, user: { name: new_user.name, email: new_user.email, password: new_user.password }\n+      expect(response).to have_http_status(401)\n+    end\n+\n+    it \"POST create returns http unauthenticated\" do\n+      new_user = build(:user)\n+      post :create, user: { name: new_user.name, email: new_user.email, password: new_user.password }\n+      expect(response).to have_http_status(401)\n+    end\n   end\n\n   context \"authenticated and unauthorized users\" do\n ...\n+\n # #2\n+    it \"PUT update returns http forbidden\" do\n+      new_user = build(:user)\n+      put :update, id: my_user.id, user: { name: new_user.name, email: new_user.email, password: new_user.password }\n+      expect(response).to have_http_status(403)\n+    end\n+\n+    it \"POST create returns http forbidden\" do\n+      new_user = build(:user)\n+      post :create, user: { name: new_user.name, email: new_user.email, password: new_user.password }\n+      expect(response).to have_http_status(403)\n+    end\n   end\n```\n\nAt __#1__, we expect unauthenticated requests to the user `update` and `create` actions will return [401 Unauthorized](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error).\n\nAt __#2__, we expect that non-admin requests to the user `update` and `create` actions will return [403 Forbidden](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error).\n\nRun the spec and note that these four new tests fail because we haven't defined the `update` and `create` actions:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/users_controller_spec.rb\n```\n\nStub the actions in `Api::V1::UsersController`:\n\n```ruby(app/controllers/api/v1/users_controller.rb)\n ...\n+  def update\n+  end\n+\n+  def create\n+  end\n end\n```\n\nRun the spec again and the new authentication and authorization tests will pass:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/users_controller_spec.rb\n```\n\nThe tests pass because the before_actions `:authenticate_user` and `:authorize_use` apply to all actions in controller.\n\nLet's add a new `describe` section at the bottom of the spec for updating a user, and test the behavior for `update`:\n\n```ruby(spec/api/v1/controllers/users_controller_spec.rb)\n+\n+    describe \"PUT update\" do\n+      context \"with valid attributes\" do\n+        before do\n # #3\n+          @new_user = build(:user)\n # #4\n+          put :update, id: my_user.id, user: { name: @new_user.name, email: @new_user.email, password: @new_user.password, role: \"admin\" }\n+        end\n+\n # #5\n+        it \"returns http success\" do\n+          expect(response).to have_http_status(:success)\n+        end\n+\n # #6\n+        it \"returns json content type\" do\n+          expect(response.content_type).to eq 'application/json'\n+        end\n+\n # #7\n+        it \"updates a user with the correct attributes\" do\n+          hashed_json = JSON.parse(response.body)\n+          expect(hashed_json[\"name\"]).to eq(@new_user.name)\n+          expect(hashed_json[\"email\"]).to eq(@new_user.email)\n+          expect(hashed_json[\"role\"]).to eq(\"admin\")\n+        end\n+      end\n+\n # #8\n+      context \"with invalid attributes\" do\n+        before do\n+          put :update, id: my_user.id, user: { name: \"\", email: \"bademail@\", password: \"short\" }\n+        end\n+\n+        it \"returns http error\" do\n+          expect(response).to have_http_status(400)\n+        end\n+\n+        it \"returns the correct json error message\" do\n+          expect(response.body).to eq({ error: \"User update failed\", status: 400 }.to_json)\n+        end\n+      end\n+    end\n   end\n end\n```\n\nAt __#3__, we build `@new_user` using FactoryGirl.\n\nAt __#4__, before each spec, we send a request to update `my_user` using the attributes of `@new_user`.\n\nAt __#5__ and __#6__, we expect that a successful request will return an HTTP success code and a JSON response.\n\nAt __#7__, we test that we updated the user by comparing our expected attributes with the attributes returned in the JSON message by `update`.\n\nAt __#8__, we expect that an update with invalid user attributes will return a 400 Bad Request status code with a JSON error message.\n\nRun the spec and review the five failures:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/users_controller_spec.rb\n```\n\nLet's pass the tests by implementing `update`:\n\n```ruby(app/controllers/api/v1/users_controller.rb)\n ...\n\n   def update\n+    user = User.find(params[:id])\n+\n # #9\n+    if user.update_attributes(user_params)\n+      render json: user, status: 200\n+    else\n+      render json: { error: \"User update failed\", status: 400 }, status: 400\n+    end\n   end\n\n  def create\n  end\n\n+\n+  private\n # #10\n+  def user_params\n+    params.require(:user).permit(:name, :email, :password, :role)\n+  end\n end\n```\n\nAt __#9__, we attempt to `update_attributes` on the given user. If we succeed, we'll render `user` as JSON with a 200 OK status. Otherwise, we'll render a JSON error with the appropriate status.\n\nAt __#10__, we define `user_params` to whitelist user parameters.\n\nRun the spec and ensure that all tests pass:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/users_controller_spec.rb\n```\n\nStart your Rails server and test the new endpoint from the command line using curl.\n\n> Replace our token with your own admin user token.\n\n```bash(Terminal)\n$ curl -H \"Content-type: application/json\" -H \"Authorization: Token srXsZkfOgaNu5LNxCC3HKPYMVVIBV/CutKhl9aLJIn8PjEwgVZKRew3UhONRAcF+yb9uTtXaGmSaIor17CiMyg==\" -X PUT -d '{\"user\": {\"name\":\"Billy Bob\", \"password\":\"helloworld\"}}' http://localhost:3000/api/v1/users/1/\n```\n\nLet's review what each option is doing:\n\n| **Option** | **Description** |\n| :-- | :-- |\n| `-H \"Content-type: application/json\"` | Includes a header that tells the Rails server that the data passed with the request will be JSON. |\n| `-H \"Authorization: Token srX...g==\"` | Includes a header with the user token for authentication and authorization. |\n| `-X PUT` | Specifies a PUT request method. |\n| `-d '{\"user\": {\"name\":\"Billy Bob\", \"password\":\"helloworld\"}}'` | Sends the specified JSON user data. |\n\nIf the request is successful, the Bloccit API will send a response that looks like this:\n\n```bash(Terminal)\n{\"id\":1,\"name\":\"Billy Bob\",\"password_digest\":\"$2a$10$IAtLtl2tORR/kOh.y4vlguqBfyQhhGQPtaUQ6DPPnjAEam7rTbHxC\",\"created_at\":\"2015-09-08T20:40:15.224Z\",\"updated_at\":\"2015-09-10T18:45:57.297Z\",\"role\":\"member\",\"auth_token\":\"iOmBncJPkUu2EzScvb3N0SsZ80aDgMY6NiWcebK/vkK2JCSPYEEALYo6eciI7lbAwBE3E4MLLv4Ew4b30El6JQ==\"}%\n```\n\nLet's implement the API endpoint for creating users by adding tests to the bottom of the spec:\n\n```ruby(spec/api/v1/controllers/users_controller_spec.rb)\n...\n\n+\n+    describe \"POST create\" do\n+      context \"with valid attributes\" do\n+        before do\n # #11\n+          @new_user = build(:user)\n+          post :create, user: { name: @new_user.name, email: @new_user.email, password: @new_user.password, role: \"admin\" }\n+        end\n+\n # #12\n+        it \"returns http success\" do\n+          expect(response).to have_http_status(:success)\n+        end\n+\n+        it \"returns json content type\" do\n+          expect(response.content_type).to eq 'application/json'\n+        end\n+\n+        it \"creates a user with the correct attributes\" do\n+          hashed_json = JSON.parse(response.body)\n+          expect(hashed_json[\"name\"]).to eq(@new_user.name)\n+          expect(hashed_json[\"email\"]).to eq(@new_user.email)\n+          expect(hashed_json[\"role\"]).to eq(\"admin\")\n+        end\n+      end\n+\n # #13\n+      context \"with invalid attributes\" do\n+        before do\n+          post :create, user: { name: \"\", email: \"bademail@\", password: \"short\" }\n+        end\n+\n+        it \"returns http error\" do\n+          expect(response).to have_http_status(400)\n+        end\n+\n+        it \"returns the correct json error message\" do\n+          expect(response.body).to eq({ \"error\": \"User is invalid\", \"status\": 400 }.to_json)\n+        end\n+      end\n+    end\n   end\n end\n```\n\nAt __#11__, we build `@new_user` using FactoryGirl and then send a request to create a new user using the attributes of `@new_user`.\n\nAt __#12__, we expect that a successful request will return an HTTP success code and a JSON response with the correct user attributes.\n\nAt __13__, we expect that an update with invalid user attributes will return a 400 Bad Request status code with a JSON error message.\n\nRun the spec and note that the five new tests fail:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/users_controller_spec.rb\n```\n\nImplement `create` to pass the tests:\n\n```ruby(app/controllers/api/v1/users_controller.rb)\n ...\n   def create\n+    user = User.new(user_params)\n+\n # #14\n+    if user.valid?\n+      user.save!\n+      render json: user, status: 201\n+    else\n+      render json: { error: \"User is invalid\", status: 400 }, status: 400\n+    end\n   end\n ...\n```\n\nAt __#14__, we check whether `user` is valid before saving it and returning a success message.\n\nRun the spec and ensure that all tests pass:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/users_controller_spec.rb\n```\n\nLet's send another curl request from the command line to create a new admin user:\n\n```bash(Terminal)\n$ curl -H \"Content-type: application/json\" -H \"Authorization: Token srXsZkfOgaNu5LNxCC3HKPYMVVIBV/CutKhl9aLJIn8PjEwgVZKRew3UhONRAcF+yb9uTtXaGmSaIor17CiMyg==\" -X POST -d '{\"user\": {\"name\":\"Pam Poovey\",  \"email\":\"pam@archer.com\", \"password\":\"helloworld\", \"role\":\"admin\"}}' http://localhost:3000/api/v1/users/\n```\n\nIf the request is successful, the Bloccit API will send a response that looks like this:\n\n```bash(Terminal)\n{\"id\":1,\"name\":\"Pam Poovey\",\"email\":\"pam@archer.com\",\"password_digest\":\"$2a$10$IAtLtl2tORR/kOh.y4vlguqBfyQhhGQPtaUQ6DPPnjAEam7rTbHxC\",\"created_at\":\"2015-09-08T20:40:15.224Z\",\"updated_at\":\"2015-09-10T18:45:57.297Z\",\"role\":\"admin\",\"auth_token\":\"iOmBncJPkUu2EzScvb3N0SsZ80aDgMY6NiWcebK/vkK2JCSPYEEALYo6eciI7lbAwBE3E4MLLv4Ew4b30El6JQ==\"}%\n```\n\nTest that the API created the new user by signing in as them on localhost.\n\n## Updating, Creating, and Destroying Topics\n\nWe want to allow admin users to `update`, `create`, and `destory` topics. Let's add the tests to ensure that we only allow authenticated admin users to modify topics.\n\n```ruby(spec/api/v1/controllers/topics_controller_spec.rb)\n require 'rails_helper'\n\n RSpec.describe Api::V1::TopicsController, type: :controller do\n   let(:my_user) { create(:user) }\n   let(:my_topic) { create(:topic) }\n\n   context \"unauthenticated user\" do\n ...\n+\n+    it \"PUT update returns http unauthenticated\" do\n+      put :update, id: my_topic.id, topic: {name: \"Topic Name\", description: \"Topic Description\"}\n+      expect(response).to have_http_status(401)\n+    end\n+\n+    it \"POST create returns http unauthenticated\" do\n+      post :create, topic: {name: \"Topic Name\", description: \"Topic Description\"}\n+      expect(response).to have_http_status(401)\n+    end\n+\n+    it \"DELETE destroy returns http unauthenticated\" do\n+      delete :destroy, id: my_topic.id\n+      expect(response).to have_http_status(401)\n+    end\n   end\n\n   context \"unauthorized user\" do\n ...\n+    it \"PUT update returns http forbidden\" do\n+      put :update, id: my_topic.id, topic: {name: \"Topic Name\", description: \"Topic Description\"}\n+      expect(response).to have_http_status(403)\n+    end\n+\n+    it \"POST create returns http forbidden\" do\n+      post :create, topic: {name: \"Topic Name\", description: \"Topic Description\"}\n+      expect(response).to have_http_status(403)\n+    end\n+\n+    it \"DELETE destroy returns http forbidden\" do\n+      delete :destroy, id: my_topic.id\n+      expect(response).to have_http_status(403)\n+    end\n   end\n```\n\nRun the spec and note the six failures because there are no matching routes for the topic actions we're testing:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/topics_controller_spec.rb\n```\n\nAdd the necessary routes to pass the tests:\n\n```ruby(config/routes.rb)\n   namespace :api do\n     namespace :v1 do\n       resources :users, only: [:index, :show, :create, :update]\n-      resources :topics, only: [:index, :show]\n+      resources :topics, except: [:edit, :new]\n     end\n   end\n end\n```\n\nStub the actions in `Api::V1::TopicsController`:\n\n```ruby(app/controllers/api/v1/topics_controller.rb)\n ...\n+  def update\n+  end\n+\n+  def create\n+  end\n+\n+  def destroy\n+  end\n end\n```\n\nWith the routes created and the actions stubbed, our tests will pass:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/topics_controller_spec.rb\n```\n\nLet's define the expectations for `update` by adding tests for them:\n\n```ruby(spec/api/v1/controllers/topics_controller_spec.rb)\n ...\n # #15\n+  context \"authenticated and authorized users\" do\n # #16\n+    before do\n+      my_user.admin!\n+      controller.request.env['HTTP_AUTHORIZATION'] = ActionController::HttpAuthentication::Token.encode_credentials(my_user.auth_token)\n+      @new_topic = build(:topic)\n+    end\n+\n+    describe \"PUT update\" do\n+      before { put :update, id: my_topic.id, topic: {name: @new_topic.name, description: @new_topic.description} }\n+\n+      it \"returns http success\" do\n+        expect(response).to have_http_status(:success)\n+      end\n+\n+      it \"returns json content type\" do\n+        expect(response.content_type).to eq 'application/json'\n+      end\n+\n # #17\n+      it \"updates a topic with the correct attributes\" do\n+        updated_topic = Topic.find(my_topic.id)\n+        expect(response.body).to eq(updated_topic.to_json)\n+      end\n+    end\n+  end\n end\n```\n\nAt __#15__, we create a new context for authenticated and authorized users. We'll only allow properly authenticated admin users to update topics.\n\nAt __#16__, we make `my_user` an admin and set the header to authenticate them. We then use FactoryGirl to build `@new_topic`.\n\nAt __#17__, we test that `my_topic` was properly updated.\n\nRun the spec and note the three failures:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/topics_controller_spec.rb\n```\n\nImplement the `update` method to pass the tests:\n\n```ruby(app/controllers/api/v1/topics_controller.rb)\n ...\n   def update\n+    topic = Topic.find(params[:id])\n+\n+    if topic.update_attributes(topic_params)\n+      render json: topic, status: 200\n+    else\n+      render json: {error: \"Topic update failed\", status: 400}, status: 400\n+    end\n   end\n\n   def create\n   end\n\n   def destroy\n   end\n+\n+  private\n+  def topic_params\n+    params.require(:topic).permit(:name, :description, :public)\n+  end\n end\n```\n\nRun the spec again and the tests should pass:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/topics_controller_spec.rb\n```\n\nWith the tests passing, use curl to update an existing topic:\n\n> Replace our token with your own admin user token.\n\n```bash(Terminal)\n$ curl -H \"Content-type: application/json\" -H \"Authorization: Token srXsZkfOgaNu5LNxCC3HKPYMVVIBV/CutKhl9aLJIn8PjEwgVZKRew3UhONRAcF+yb9uTtXaGmSaIor17CiMyg==\" -X PUT -d '{\"topic\": {\"name\":\"Drastic Voyage: Part I\", \"description\":\"To save the life of a preeminent scientist who has discovered miniaturization, the team must enter his body and destroy a blood clot.\"}}' http://localhost:3000/api/v1/topics/1/\n```\n\nLet's implement `create`, starting with the tests:\n\n```ruby(spec/api/v1/controllers/topics_controller_spec.rb)\n   context \"authenticated and authorized users\" do\n ...\n+    describe \"POST create\" do\n+      before { post :create, topic: {name: @new_topic.name, description: @new_topic.description} }\n+\n+      it \"returns http success\" do\n+        expect(response).to have_http_status(:success)\n+      end\n+\n+      it \"returns json content type\" do\n+        expect(response.content_type).to eq 'application/json'\n+      end\n+\n+      it \"creates a topic with the correct attributes\" do\n+        hashed_json = JSON.parse(response.body)\n+        expect(hashed_json[\"name\"]).to eq(@new_topic.name)\n+        expect(hashed_json[\"description\"]).to eq(@new_topic.description)\n+      end\n+    end\n   end\n end\n```\n\nRun the spec and note the three new failures:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/topics_controller_spec.rb\n```\n\nImplement `create` to get our tests passing:\n\n```ruby(app/controllers/api/v1/topics_controller.rb)\n   def create\n+    topic = Topic.new(topic_params)\n+\n+    if topic.valid?\n+      topic.save!\n+      render json: topic, status: 201\n+    else\n+      render json: {error: \"Topic is invalid\", status: 400}, status: 400\n+    end\n   end\n```\n\nRun the spec again to confirm that the tests pass:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/topics_controller_spec.rb\n```\n\nUse curl to create a new topic. Once the request is successful, view the newly created topic in localhost.\n\n\n```bash(Terminal)\n$ curl -H \"Content-type: application/json\" -H \"Authorization: Token srXsZkfOgaNu5LNxCC3HKPYMVVIBV/CutKhl9aLJIn8PjEwgVZKRew3UhONRAcF+yb9uTtXaGmSaIor17CiMyg==\" -X POST -d '{\"topic\": {\"name\":\"Drastic Voyage: Part II\", \"description\":\"The team mission inside Dr. Kovacs goes awry, and they are blacklisted by the CIA.\"}}' http://localhost:3000/api/v1/topics/\n```\n\nThe final topic action we want to support is deleting a topic:\n\n```ruby(spec/api/v1/controllers/topics_controller_spec.rb)\ncontext \"authenticated and authorized users\" do\n ...\n+    describe \"DELETE destroy\" do\n+      before { delete :destroy, id: my_topic.id }\n+\n # #18\n+      it \"returns http success\" do\n+        expect(response).to have_http_status(:success)\n+      end\n+\n+      it \"returns json content type\" do\n+        expect(response.content_type).to eq 'application/json'\n+      end\n+\n+      it \"returns the correct json success message\" do\n+        expect(response.body).to eq({ message: \"Topic destroyed\", status: 200 }.to_json)\n+      end\n+\n+      it \"deletes my_topic\" do\n # #19\n+        expect{ Topic.find(my_topic.id) }.to raise_exception(ActiveRecord::RecordNotFound)\n+      end\n+    end\n   end\n end\n```\n\nAt __#18__, we expect that deleting a topic will return a message and status code indicating its success.\n\nAt __#19__, we expect that searching for the deleted topic will raise an `ActiveRecord::RecordNotFound` exception.\n\nRun the spec and note the four new failures:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/topics_controller_spec.rb\n```\n\nImplement the `destroy` action to pass the tests:\n\n```ruby(app/controllers/api/v1/topics_controller.rb)\n   def destroy\n+    topic = Topic.find(params[:id])\n+\n+    if topic.destroy\n+      render json: {message: \"Topic destroyed\", status: 200}, status: 200\n+    else\n+      render json: {error: \"Topic destroy failed\", status: 400}, status: 400\n+    end\n   end\n```\n\nRun the spec again to confirm that the tests pass:\n\n```bash(Terminal)\n$ rspec spec/api/v1/controllers/topics_controller_spec.rb\n```\n\nWith the specs passing, use curl to delete an existing topic:\n\n```bash(Terminal)\n$ curl -H \"Authorization: Token srXsZkfOgaNu5LNxCC3HKPYMVVIBV/CutKhl9aLJIn8PjEwgVZKRew3UhONRAcF+yb9uTtXaGmSaIor17CiMyg==\" -X DELETE http://localhost:3000/api/v1/topics/1/\n```\n\nIf successful, the following message will be returned:\n\n```bash(Terminal)\n{\"message\":\"Topic destroyed\",\"status\":200}\n```\n\nWe now have a RESTful API to support CRUD actions. With this, we've made it possible for developers to build applications that interface with Bloccit. This makes it possible for Bloccit to turn into a true platform.\n\n## Git\n\nCommit your checkpoint work in Git. See [Git Checkpoint Workflow: After Each Checkpoint](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-checkpoint) for details. Deploy to Heroku:\n\n```bash(Terminal)\n$ git push heroku master\n```\n\n## Congratulations!\n\nAfter completing the assignment below, you will have completed the Foundation Phase for Rails Web Development. Take a moment and reflect on how far you've come. You've learned how to program in Ruby, built a Ruby command line application, and built a robust web application with a comprehensive test suite. Along the way, you've learned about clients, servers, MVC architecture, RESTful API design, refactoring, and so much more. You are now well positioned to proceed to the Project Phase of the program, and build some amazing things. You should be proud of how much you've learned, and also embrace the challenge ahead. Maintain the good habits you've developed through the Foundation Phase, and you __will__ succeed in the Project Phase.\n\nAnd again, we offer you a sincere congratulations:\n\n<center>\n  ![congrats](https://bloc-global-assets.s3.amazonaws.com/images-rails/bloccit-apis-sending-data/leo_congrats.gif)\n</center>\n\n## Recap\n\n| **Concept** | **Description** |\n| :-- | :-- |\n| [POST](https://en.wikipedia.org/wiki/POST_%28HTTP%29) | POST requests request that a server accept the data enclosed in the request message's body to create a new resource. |\n| PUT | PUT requests request that a server accept the data enclosed in the request message's body to update an existing resource. |",
          "assignment": "Create a new Git feature branch for this assignment. See [Git Checkpoint Workflow: Before Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#before-each-assignment) for details.\n\nImplement endpoints for creating, updating, and deleting Posts, using TDD. The new endpoints should be RESTful and should return JSON.\n\n1. Create an endpoint for PUT `api/v1/topics/:topic_id/posts/:id/`\n2. Create an endpoint for DELETE `api/v1/topics/:topic_id/posts/:id/`\n3. Create an endpoint for POST `api/v1/topics/:topic_id/posts/create`. Because a post must be associated with a topic, nest this endpoint under topics in routes and add the action to `Api::V1::PostsController`.\n\nCommit your assignment in Git. See [Git Checkpoint Workflow: After Each Assignment](https://www.bloc.io/resources/git-checkpoint-workflow#after-each-assignment) for details. Submit your commit to your mentor.",
          "roadmap_section_id": 120,
          "active_index": 49,
          "checkpoint_type": "normal",
          "position": 49,
          "points": 1,
          "ref": "31e687cf-4cde-4ab4-b793-7b37195fdcb6|0"
        },
        {
          "id": 1664,
          "name": "Introduction to Projects",
          "summary": "Bloc Projects: what to expect and tips for completing them successfully",
          "body": "<!-- { ids:[1664], name:'Introduction to Projects', summary:'Bloc Projects: what to expect and tips for completing them successfully' } -->\n<center>\n  <iframe src=\"//fast.wistia.net/embed/iframe/l2zmisqknu\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script>\n</center>\n<br />\n\nWelcome to the projects phase of the Roadmap. Projects are meant to be defined, yet open-ended assignments. You will also have the opportunity to create a portfolio site to showcase your projects and discuss your journey into web development.\n\n>We **require** you to complete the Portfolio project if you intend to work through the job preparation checkpoints.\n\nEach project shows a time estimate. Complete **at least two** of them in order to graduate.\n\nProjects are broken into the following components:\n\n* **Use Case:** explains the problem the project aims to solve.\n* **User Stories:** provides the primary constraints that should be followed for a successful implementation.\n* **Resources:** outlines some tools that will help you implement a solution for the project. Resources are recommendations, and can be replaced or customized as you and your mentor see fit.\n* **Wireframe examples:** provide additional context for an implemented solution. Wireframes are also recommendations and can be customized as desired.\n\n## Pair programming\nPair programming should be leveraged while building projects. During the project phase of the Roadmap, appointments should be used exclusively for pairing. There is no greater tool in a remote program than pair programming. Bloc defines pair programming as a student and their mentor working collaboratively on a project, using video, voice and screen sharing software. Every pair programming appointment should have an agenda, so that screen time can be maximized. Agendas can be set using simple messages.\n\nBloc believes in three types of pairing patterns. Different patterns may be appropriate for different topics, so the pairing style is left for the mentor to decide when preparing for a pairing appointment. There are three types of patterns we use, as defined by Joe Kutner in _[Remote Pairing](http://pragprog.com/book/jkrp/remote-pairing)_:\n\n> - **Tag Team:** In this pattern, programmers take turns as the driver, who is in control of the keyboard, and the navigator, who contributes to the task verbally. The pair can alternate between these roles at preset time intervals or in an ad hoc fashion. In both cases, the driver writes code while the navigator acts as a reviewer and/or foreman. As reviewer, the navigator is responsible for identifying any mistakes the driver makes at the code level. As foreman, the navigator is responsible for thinking strategically about the overall structure of the code base and whether the code is solving the business problem at hand.\n\n> - **Ping-Pong:** This pattern is an extension of both the tag-team pattern and test- driven development. The process begins with a programmer writing a test to define some new behavior or replicate a bug. The test will fail because it’s new, at which point the first programmer passes control to the second programmer, whose job is to make the test pass. Throughout the process, both programmers communicate and discuss the problem, but control of the mouse and keyboard is strictly divided between the two phases.\n\n> - **Let the Junior Drive:** This pattern assumes one programmer is a novice and the other programmer is significantly more experienced. For the entire session, the more experienced programmer acts as the navigator while the less experienced programmer acts as the driver. Some experts consider this an anti-pattern: it can slow down the session by restricting fluid interaction between programmers. That might explain why studies conducted on real pairing sessions at large-scale companies find the boundaries between these roles collapse in practice — resulting to an approach more similar to tag team than anything else.\n\n## Getting help outside of appointments\nOutside of pairing appointments, you'll certainly have questions about your projects. Code reviews and messages should be used for questions that can be asked asynchronously. In other words, reserve appointments exclusively for pairing, and save specific questions for other mediums.",
          "assignment": "Code reviews via pull requests should be used extensively throughout the project phase. The first part of your assignment is to read the GitHub Guide on [Understanding the GitHub Flow](https://guides.github.com/introduction/flow/).\n\n> If you want more in-depth resources on the PR process, then read [Rob Moore's blog post on pull requests](http://robdmoore.id.au/blog/2013/12/01/using-pull-requests-for-commercialprivateproprietary-development/) and our [resource on more advanced Git topics](https://www.bloc.io/resources/git-continued).\n\nReview the GitHub Flow Guide with your mentor and practice the pull request process. Create a new repository and add your mentor as a collaborator. Create a new app and commit something in a new branch. Push the branch to the repository you just created using `git push origin branch-name` and then create a pull request using GitHub's interface.\n\nSetting up a good pull request and collaboration flow is a great topic to pair on, so if this is a new concept to you, make sure you complete this assignment while pairing in your next appointment. Remember to keep you pull requests specific and your commits clean.",
          "roadmap_section_id": 120,
          "active_index": 50,
          "checkpoint_type": "normal",
          "position": 50,
          "points": 1,
          "ref": "0b9494da-b940-4516-a5cd-e6d92a3c656a|0"
        }
      ]
    },
    {
      "id": 122,
      "roadmap_id": 31,
      "name": "Blocipedia: SaaS Wiki Collaboration Tool",
      "time_estimate": "40-160 Hours",
      "point_ratio": 0.6666666666666666,
      "description": "Build a production quality SaaS app that allows users to create their own wikis.",
      "icon": "Blocipedia",
      "visible_to_students": true,
      "checkpoints": [
        {
          "id": 1675,
          "name": "Intro",
          "summary": "Intro",
          "body": "Build an application that allows users to create public and private Markdown-based wikis.\n\n## Use Case\n\n[Wikis](http://en.wikipedia.org/wiki/Wiki) are a great way to collaborate on community-sourced content. Whether the wiki is for a hobby or work-related project, you will build an app that lets users create their own wikis and share them publicly or privately with other collaborators.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a user, I want to **sign up** for a free account by providing a user name, password and email | 2 |\n| As a user, I want to **sign in and out** of Blocipedia | 2 |\n| As a user with a standard account, I want to **create, read, update, and delete** public wikis | 3 |\n| As a developer, I want to offer three user roles: admin, standard, or premium | 4 |\n| As a developer, I want to **seed** the development database automatically with users and wikis | 1 |\n| As a user, I want to **upgrade** my account from a free to a paid plan | 4 |\n| As a premium user, I want to **create** private wikis | 3 |\n| As a user, I want to **edit** wikis using Markdown syntax | 2 |\n| As a premium user, I want to **add** and **remove** collaborators for my private wikis | 3 |\n\nBefore you begin working on user stories, complete this project's [Getting Started guide](https://www.bloc.io/resources/getting-started-with-rails-web-development-projects). Later user stories often rely on the completion of the former, therefore, work on them in the order prescribed.\n\n## Wireframe Examples\n\nThese wireframes are meant to suggest a design, not dictate one.\n\n| **Wireframe** | **Description** |\n| :-- | :-- |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_signup_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_signup.png) | A sign up page. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_index_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_index.png) | An index. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_edit_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_edit.png) | Edit the Wiki page. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_show_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_show.png) | Show the Wiki. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_collaborators_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocipedia/blocipedia_collaborators.png) | Add collaborators. |",
          "assignment": "Acquaint yourself with the user stories for this project.\n\nOptional: Sketch your own wireframes.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.",
          "roadmap_section_id": 122,
          "active_index": 1,
          "checkpoint_type": "normal",
          "position": 1,
          "points": 1,
          "ref": "c8388b08-ad50-45f3-abf4-8619cf22eca7|0"
        },
        {
          "id": 1676,
          "name": "User Sign Up",
          "summary": "User Sign Up",
          "body": ">As a user, I want to **sign up** for a free account by providing a user name, password and email<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Incorporate Devise\n\nUse the [Devise](https://github.com/plataformatec/devise) gem for authentication. Blocipedia's authentication system should allow users to sign up and send emails for account confirmation. Refer to the [Devise Resource](https://www.bloc.io/resources/devise) and the [Devise Getting Started Guide](https://github.com/plataformatec/devise#getting-started) for examples on implementing user sign up.\n\n### Test Your Code\n\n- Sign a new user up. Do you receive a confirmation email?\n- What happens if you attempt to sign up with an invalid email?\n- What happens if you attempt to sign up with a duplicate email?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 122,
          "active_index": 2,
          "checkpoint_type": "normal",
          "position": 2,
          "points": 1,
          "ref": "90b6fbe8-d209-4fe0-8d46-3234cd54ee5d|0"
        },
        {
          "id": 1677,
          "name": "User Sign in and Out",
          "summary": "User Sign in and Out",
          "body": "<!-- { ids:[1677], name:\"User Sign in and Out\", summary:\"User Sign in and Out\" } -->\n>As a user, I want to **sign in and out** of Blocipedia<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\nNow that users can sign up for Blocipedia, you want to give them a way to sign in and out of the app. Refer to our [Devise Resource](https://www.bloc.io/resources/devise) and the [ Devise Getting Started Guide](https://github.com/plataformatec/devise#getting-started) for examples on implementing user sign in/out with Devise.\n\n### Test Your Code\n\n- Sign into Blocipedia, does the top navigation change to indicate you are signed in?\n- Sign out of Blocipedia, does the top navigation change to indicate you are signed out?\n- What happens if you attempt to reset your password?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 122,
          "active_index": 3,
          "checkpoint_type": "normal",
          "position": 3,
          "points": 1,
          "ref": "2a57c808-fece-4d9a-b251-ab2e8de37b9d|0"
        },
        {
          "id": 1678,
          "name": "Wiki CRUD",
          "summary": "Wiki CRUD",
          "body": ">As a user with a standard account, I want to **create, read, update, and delete** public wikis<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Create the Model\n\nCreate the wiki model. For guidance, you can refer to the [Models Checkpoint](https://bloc.io/checkpoints/1635). Start by generating the Wiki model:\n\n```bash(Terminal)\n$ rails g model Wiki title:string body:text private:boolean user:references:index\n```\n\nRefer to the [CRUD](https://bloc.io/checkpoints/1639) and [More Crud](https://bloc.io/checkpoints/1640) Checkpoints for an example that implements CRUD. The `wikis_controller` will replace the `posts_controller` in Blocipedia.\n\n### Test Your Code\n\n- Are you able to create new public wikis?\n- Are you able to update public wikis?\n- Are you able to delete public wikis?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 122,
          "active_index": 4,
          "checkpoint_type": "normal",
          "position": 4,
          "points": 1,
          "ref": "f6e9db38-a7f4-4bb4-96e1-0b64bb0a4a80|0"
        },
        {
          "id": 1679,
          "name": "User Roles",
          "summary": "User Roles",
          "body": ">As a developer, I want to offer three user roles: admin, standard, or premium<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 4\n\n### Incorporate Pundit\n\nUse the [Pundit](https://github.com/elabs/pundit) gem for authorization. Users should have one of three roles: standard (free), premium, or admin. Refer to the [Pundit Readme](https://github.com/elabs/pundit/blob/master/README.md#policies) checkpoint for examples of using Pundit policies.\n\n### Default to Standard\n\nUsers should default to the standard role when they are first created. There are [several ways](http://stackoverflow.com/questions/328525/how-can-i-set-default-values-in-activerecord) to implement default values. Use the `after_initialize` callback approach to implement default values for roles.\n\nIn Bloccit, a user either needed to be an admin, or the post creator to edit a post. In Blocipedia, users should be able to edit any public wiki. To allow this behavior, change the `update?` method in `application_policy.rb`:\n\n```ruby(app/policies/application_policy)\n  def update?\n    user.present?\n  end\n```\n\nFor an extra challenge, implement user authorization from scratch. This [blog post](http://janeeats.github.io/blog/2013/03/23/authorization-basics-in-rails/) provides a great starting point.\n\n### Test Your Code\n\n- Use the Rails console to create a new user. Are they given the default role?\n- Are you able to edit wikis created by another user?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 122,
          "active_index": 5,
          "checkpoint_type": "normal",
          "position": 5,
          "points": 1,
          "ref": "3019f8ac-bebc-470a-85c5-06ca49122c77|0"
        },
        {
          "id": 1680,
          "name": "Seeding Data",
          "summary": "Seeding Data",
          "body": ">As a developer, I want to **seed** the development database automatically with users and wikis<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\n### Seed With Faker\n\nNow that user and wiki models are established, you can seed data into the development database. Use the [Faker](https://github.com/stympy/faker) gem to generate fake data for __users and wikis__. Refer to the <C>1637|Seeding Data</C> checkpoint for examples on setting up the `seeds.rb` file.\n\nReturn to this user story as you continue to build Blocipedia, updating `seeds.rb` to reflect the changes you make in the app.\n\n### Test Your Code\n\n- Rebuild your database, is it seeded with the data you specified?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 122,
          "active_index": 6,
          "checkpoint_type": "normal",
          "position": 6,
          "points": 1,
          "ref": "9e569d5d-b2e4-447c-b7de-a231312207b8|0"
        },
        {
          "id": 1681,
          "name": "Upgrading an Account",
          "summary": "Upgrading an Account",
          "body": ">As a user, I want to **upgrade** my account from a free to a paid plan<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 4\n\n### Determine a User Flow\n\n>A _user flow_ is the path a user follows to complete a task in the app.\n\nHere is a hypothetical user flow for Blocipedia:\n\n1. The user signs up for a free plan.\n2. The user upgrades their free plan and is prompted to pay with Stripe.\n3. The user's role is changed from standard to premium.\n4. The user is able to create private wikis.\n\nCan you think of alternative flows that result in the user's role changing from standard to premium?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup>\n\n### Incorporate Stripe\n\nUse [Stripe](https://stripe.com/) to charge users before switching their account role from standard to premium. Make the price of the premium user upgrade 15 dollars. Implement Stripe using the [Stripe Integration Resource](https://www.bloc.io/resources/stripe-integration).\n\nYou could also upgrade a user before you charge them via Stripe. Why would you want to charge users before you upgrade them?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup> Review the [Happy Path](http://en.wikipedia.org/wiki/Happy_path) article on Wikipedia.\n\n### Downgrade Back to Standard\n\nYou should also allow a user to downgrade their premium account to a standard account. What complications does this add to your application?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup> Design and implement a user flow for this scenario.\n\n### Test Your Code\n\n- Upgrade an existing user account. Was your Stripe account charged? Was the user role changed?\n- Downgrade a premium user. Was your Stripe account charged? Was their role changed?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 122,
          "active_index": 7,
          "checkpoint_type": "normal",
          "position": 7,
          "points": 1,
          "ref": "aedc90aa-1055-467f-9c81-e78fabb49a69|0"
        },
        {
          "id": 1682,
          "name": "Private Wikis",
          "summary": "Private Wikis",
          "body": ">As a premium user, I want to **create** private wikis<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Implement Privacy Controls\n\nRefer to the <C>1657|Private Topics</C> checkpoint when implementing private wikis. Premium and admin users should be able to create new private wikis and make public wikis private. Check the user's role before allowing them to edit a wiki's private attribute:\n\n```ruby(app/views/wikis/_form.html.erb)\n<% if current_user.admin? || current_user.premium? %>\n  <div class=\"form-group\">\n    <%= f.label :private, class: 'checkbox' do %>\n      <%= f.check_box :private %> Private wiki\n    <% end %>\n  </div>\n<% end %>\n```\n\n### Downgrade Private Wikis\n\nSince Blocipedia allows premium users to downgrade their accounts, what should happen to their private wikis?<sup>[*](https://www.bloc.io/resources/learning-by-writing)</sup> Build a user flow for this scenario which prompts the user with a reminder that their private wikis will become public if they downgrade their account.\n\n### Test Your Code\n\n- As a premium user, create a private wiki. Sign in with a standard user. Do you see the private wiki in the wikis index?\n- As a premium user, create a private wiki. Downgrade your account to standard. Verify that their private wikis are made public.",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 122,
          "active_index": 8,
          "checkpoint_type": "normal",
          "position": 8,
          "points": 1,
          "ref": "0497081e-500c-4927-bd9d-531fe5d6ed31|0"
        },
        {
          "id": 1683,
          "name": "Markdown",
          "summary": "Markdown",
          "body": ">As a user, I want to **edit** wikis using Markdown syntax<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Incorporate Redcarpet\n\nUse the [Redcarpet](https://github.com/vmg/redcarpet) gem to parse Markdown syntax.\n\n### Test Your Code\n\n- View a wiki page built with Markdown, does it render the Markdown properly?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 122,
          "active_index": 9,
          "checkpoint_type": "normal",
          "position": 9,
          "points": 1,
          "ref": "b8b38c7a-8a81-41fa-8105-1504b4f76f19|0"
        },
        {
          "id": 1684,
          "name": "Wiki Collaborators",
          "summary": "Wiki Collaborators",
          "body": ">As a premium user, I want to **add** and **remove** collaborators for my private wikis<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Modify the Edit Page\n\nUsers will add and remove collaborators from a private wiki via its edit page.\n\n### Create a Collaborator Model\n\nModel this new relationship between wikis and users by creating a collaborator model. Read through our resource on [Has Many Through](https://www.bloc.io/resources/has-many-through) relationships to get a sense for how you might want to relate private wikis with users through collaborators.\n\nPrivate wikis should only be visible to admins, the wiki creator, or wiki collaborators. Use Pundit's `scope` to restrict which wikis appear on the index page. To do so, add an inner `Scope` class to `wiki_policy.rb`:\n\n```ruby(app/policies/wiki_policy.rb)\n class WikiPolicy < ApplicationPolicy\n\n ...\n\n+  class Scope\n+    attr_reader :user, :scope\n+\n+    def initialize(user, scope)\n+      @user = user\n+      @scope = scope\n+    end\n+\n+    def resolve\n+      wikis = []\n+      if user.role == 'admin'\n+        wikis = scope.all # if the user is an admin, show them all the wikis\n+      elsif user.role == 'premium'\n+        all_wikis = scope.all\n+        all_wikis.each do |wiki|\n+          if wiki.public? || wiki.owner == user || wiki.collaborators.include?(user)\n+            wikis << wiki # if the user is premium, only show them public wikis, or that private wikis they created, or private wikis they are a collaborator on\n+          end\n+        end\n+      else # this is the lowly standard user\n+        all_wikis = scope.all\n+        wikis = []\n+        all_wikis.each do |wiki|\n+          if wiki.public? || wiki.collaborators.include?(user)\n+            wikis << wiki # only show standard users public wikis and private wikis they are a collaborator on\n+          end\n+        end\n+      end\n+      wikis # return the wikis array we've built up\n+    end\n+  end\n end\n```\n\nUse the scope in the `wikis_controller.rb` to display only the appropriate wikis:\n\n```ruby(app/controllers/wikis_controller)\n-  def index\n-    @wikis = Wiki.all\n-  end\n\n+  def index\n+    @wikis = policy_scope(Wiki)\n+  end\n```\n\n### Test Your Code\n\n- As a premium user, add a standard user as the collaborator to a private wiki. Can you add the user multiple times? Sign in as the standard user. Do you see the private wiki in the wikis index? Can you edit the private wiki?\n- As a premium user, remove a collaborator from a private wiki. Sign in as the ex-collaborator. Do you see the private wiki in the wikis index? Can you edit the private wiki?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 122,
          "active_index": 10,
          "checkpoint_type": "normal",
          "position": 10,
          "points": 1,
          "ref": "d008482f-c5a7-41b1-b80d-e1b759bdbffe|0"
        },
        {
          "id": 1685,
          "name": "Extra Credit",
          "summary": "If you finish early, attempt these extra credit user stories",
          "body": "The goal of extra credit is to push you towards self-reliance, so outside of a brief description, we don't provide additional resources. If you finish your project early, challenge yourself to complete these additional user stories:\n\n| **User Story** | **Difficulty Rating** |\n| :-- | :-- |\n| As a developer, I want to generate Blocipedia's views using [HAML](https://www.bloc.io/resources/using-haml) instead of ERB | 3 |\n| As a user, I want my wiki to have [readable URLs](https://github.com/norman/friendly_id) | 3 |\n| As a user, I want to see a [preview](https://github.com/OscarGodson/EpicEditor) of my Markdown as I edit it | 4 |",
          "assignment": "Optional: Complete one or more of the extra credit user stories.",
          "roadmap_section_id": 122,
          "active_index": null,
          "checkpoint_type": "extra_credit",
          "position": null,
          "points": 0,
          "ref": "0f2fe025-b658-4c27-91e9-f6309e74bba1|0"
        }
      ]
    },
    {
      "id": 121,
      "roadmap_id": 31,
      "name": "Blocitoff: Utility Application With Rake Automation",
      "time_estimate": "40-160 Hours",
      "point_ratio": 0.6666666666666666,
      "description": "Build a self-destructing to-do list application.",
      "icon": "Blocitoff",
      "visible_to_students": true,
      "checkpoints": [
        {
          "id": 1665,
          "name": "Intro",
          "summary": "Intro",
          "body": "Build an application that allows users to create self-destructing to-do lists.\n\n## Use Case\n\nTo-do lists are notorious for collecting junk: to-do items that you want to remember, but are not very important and thus get consistently put off. To address the problem of to-do list clutter, you will create Blocitoff.\n\nBlocitoff will aim to keep to-do lists manageable by automatically deleting to-do items that have not been completed after seven days. The hypothesis is that if the to-do item is not important enough to be completed in seven days, it doesn't belong on your to-do list.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a user, I want to **sign up** for a free account by providing a user name, password and email | 2 |\n| As a user, I want to **sign in and out** of Blocitoff | 2 |\n| As a user, I want to **see** my profile page | 2 |\n| As a user, I want to **create** multiple to-do items | 3 |\n| As a developer, I want to **seed** the development database automatically with users and to-do items | 1 |\n| As a user, I want to **mark** to-do items as complete and have them deleted | 3 |\n| As a user, I want to **see** how old a to-do item is | 1 |\n| As a user, my to-dos should be **automatically deleted** seven days after their creation date | 2 |\n\n## Wireframe Examples\n\nThese wireframes are meant to suggest a design, not dictate one.\n\n| **Wireframe** | **Description** |\n| :-- | :-- |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocitoff/blocitoff_home_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocitoff/blocitoff_home.png) | Home Page. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocitoff/blocitoff_index_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocitoff/blocitoff_index.png) | Index of Tasks. |",
          "assignment": "Acquaint yourself with the user stories for this project.\n\nOptional: Sketch your own wireframes.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.",
          "roadmap_section_id": 121,
          "active_index": 1,
          "checkpoint_type": "normal",
          "position": 1,
          "points": 1,
          "ref": "708e0ceb-8579-4bf4-8465-952fc6319370|0"
        },
        {
          "id": 1666,
          "name": "User Sign Up",
          "summary": "User Sign Up",
          "body": "> As a user, I want to **sign up** for a free account by providing a user name, password and email<br>\n> [Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Incorporate Devise\n\nUse the [Devise](https://github.com/plataformatec/devise) gem for authentication. Blocitoff's authentication system should allow users to sign up and send emails for account confirmation. Refer to the [Devise Resource](https://www.bloc.io/resources/devise) and the [Devise Getting Started Guide](https://github.com/plataformatec/devise#getting-started) for examples on implementing user sign up.\n\n> We recommend using Bootstrap to make styling your application easier.\n\n### Test Your Code\n\n- Sign a new user up. Do you receive a confirmation email?\n- What happens if you attempt to sign up with an invalid email?\n- What happens if you attempt to sign up with a duplicate email?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 121,
          "active_index": 2,
          "checkpoint_type": "normal",
          "position": 2,
          "points": 1,
          "ref": "26067946-deb3-4e59-977c-c39ef033681c|0"
        },
        {
          "id": 1667,
          "name": "User Sign in and Out",
          "summary": "User Sign in and Out",
          "body": ">As a user, I want to **sign in and out** of Blocitoff<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\nNow that users can sign up for Blocitoff, you want to give them a way to sign in and out of the app. Refer to our [Devise Resource](https://www.bloc.io/resources/devise) and the [ Devise Getting Started Guide](https://github.com/plataformatec/devise#getting-started) for examples on implementing user sign in/out with Devise.\n\n### Test Your Code\n\n- Sign into Blocitoff, does the top navigation change to indicate you are signed in?\n- Sign out of Blocitoff, does the top navigation change to indicate you are signed out?\n- What happens if you attempt to reset your password?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 121,
          "active_index": 3,
          "checkpoint_type": "normal",
          "position": 3,
          "points": 1,
          "ref": "4c3e61ff-11ba-412c-9b52-f76cc6fc29d7|0"
        },
        {
          "id": 1668,
          "name": "User Profile",
          "summary": "User Profile",
          "body": ">As a user, I want to **see** my profile page<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Generate a Controller\n\nGenerate a `UsersController` with the `show` action. Write the required code in the `show` action to populate users __show__ view. Write the necessary code in users __show__ view to display the information of the signed-in user. After a user signs in, they should be redirected to their users __show__ view. Update the `root` path in `routes.rb` so that it maps to the users __show__ view.\n\n### Test Your Code\n\n- Sign into Blocitoff, are you redirect to your user show page?\n- Does your user show page have the appropriate user details?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 121,
          "active_index": 4,
          "checkpoint_type": "normal",
          "position": 4,
          "points": 1,
          "ref": "aa969e62-6e46-401f-ac3d-1599f040690b|0"
        },
        {
          "id": 1669,
          "name": "Create To-Do Items",
          "summary": "Create To-Do Items",
          "body": ">As a user, I want to **create** multiple to-do items<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Create a Model\n\nCreate an `Item` model. For guidance, you can refer to the <C>1635|Models</C> checkpoint:\n\n```bash(Terminal)\n$ rails g model Item name:string user:references\n```\n\nA user `has_many :items` and an item `belongs_to :user`. Update `user.rb` and `item.rb` to reflect this association. Nest the items resource under resources `:users` in `routes.rb`. You only have one **item** action for now (`:create`), setup only the routes that you need.\n\n>Hint: Use `only:` instead of `except:`\n\n### Create a Controller\n\nUsers may only create items for now, so generate `items_controller.rb` with the appropriate action then complete it. The action should create a new item associated with a user. Modify `UsersController` to provide the requisite instance variable to `users#show`.\n\n### Build Partials\n\nCreate an `items/_form.html.erb` partial in a new `items` view directory so users can submit new items. Create a partial named `_item.html.erb` in the `items` directory. Use it in the users __show__ view to show the body of each item already associated with the user. This will be public to other users, with the hopes that peer pressure will help motivate users to complete their tasks.\n\nThe form partial above should render the form for submitting a new item, but this item partial should render the relevant information for an item associated with `@user`. This partial renders a single item, therefore you need to call it multiple times, rendering a partial for each item in `@items`. This is a good candidate for an `each` loop.\n\n### Test Your Code\n\n- Are you able to create multiple to-do items?\n- Are to-do items displayed after creation?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 121,
          "active_index": 5,
          "checkpoint_type": "normal",
          "position": 5,
          "points": 1,
          "ref": "becc57cb-6010-4041-973b-cc8ec932b481|0"
        },
        {
          "id": 1670,
          "name": "Seeding Data",
          "summary": "Seeding Data",
          "body": ">As a developer, I want to **seed** the development database automatically with users and to-do items<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\n### Seed With Faker\n\nNow that user and wiki models are established, you can seed data into the development database. Use the [Faker](https://github.com/stympy/faker) gem to generate fake data for __users and items__. Refer to the <C>1637|Seeding Data</C> checkpoint for examples on setting up the `seeds.rb` file.\n\nReturn to this user story as you continue to build Blocitoff, updating `seeds.rb` to reflect the changes you make in the app.\n\n### Test Your Code\n\n- Rebuild your database, is it seeded with the data you specified?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 121,
          "active_index": 6,
          "checkpoint_type": "normal",
          "position": 6,
          "points": 1,
          "ref": "53682eb1-ab6e-43ba-8744-18f01efef1d5|0"
        },
        {
          "id": 1671,
          "name": "Mark To-Do Items as Complete",
          "summary": "Mark To-Do Items as Complete",
          "body": ">As a user, I want to **mark** to-do items as complete and have them deleted<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Use a Delete Link\n\nWhen a user marks a to-do item as complete, you want it deleted immediately, so use a `:delete` link to \"complete\" a to-do item. Add the following to `items/_item`:\n\n```ruby(app/views/items/_item.html.erb)\n<%= link_to \"\", item, method: :delete, class: 'glyphicon glyphicon-ok' %>\n```\n\n> The use of the `glyphicon` class assumes your application uses Bootstrap.\n\nThe **glyphicon glyphicon-ok** classes create a check mark which links to the delete action.\n\nTest to make sure you can mark a to-do item as complete and delete it. Use Ajax to delete to-do items without reloading the page. Refer to the <C>1658|Ajax</C> checkpoint for a refresher on how to implement Ajax within Rails.\n\n### Test Your Code\n\n- Are you able to delete multiple to-do items?\n- Can to-do items be deleted using Ajax?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 121,
          "active_index": 7,
          "checkpoint_type": "normal",
          "position": 7,
          "points": 1,
          "ref": "08efbe3d-f2be-4c1e-877b-746d8af30f19|0"
        },
        {
          "id": 1672,
          "name": "Displaying Time Remaining",
          "summary": "Displaying Time Remaining",
          "body": ">As a user, I want to **see** how old a to-do item is<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\n### Modify Item\n\nUsers have seven days to complete a to-do item before it is automatically deleted. Use the [distance_of_time_in_words](http://apidock.com/rails/ActionView/Helpers/DateHelper/distance_of_time_in_words) helper method to display the number of days since a to-do item was created.\n\n### Test Your Code\n\n- Use the Rails console and the `update_attribute` method to update the `created_at` attribute on several to-do items. Do your views correctly display the number of days left to complete these to-do items?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 121,
          "active_index": 8,
          "checkpoint_type": "normal",
          "position": 8,
          "points": 1,
          "ref": "1a6b82b3-5789-4126-b837-25b36e4a38a3|0"
        },
        {
          "id": 1673,
          "name": "Delete Expired To-Do Items",
          "summary": "Delete Expired To-Do Items",
          "body": ">As a user, my to-dos should be **automatically deleted** seven days after their creation date<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Incorporate Rake\n\n[Rake](http://guides.rubyonrails.org/command_line.html#rake) is a utility that can be used to automate administrative tasks in a Rails application. You should be familiar with rake tasks like `rake db:migrate`. Now you must [create custom rake tasks](http://railscasts.com/episodes/66-custom-rake-tasks) to delete expired to-do items. Generate a new task by using the rails task generator:\n\n```bash(Terminal)\nrails g task todo delete_items\n```\n\nThis generates a new file, `lib/tasks/todo.rake` with the following contents:\n\n```ruby(lib/tasks/todo.rake)\nnamespace :todo do\n  desc \"TODO\"\n  task delete_items: :environment do\n  end\n\nend\n```\n\n- `namespace :todo` organizes your new task under the **todo** namespace.\n- `task delete_items:` defines your new task, the **delete_items** task.\n- `desc \"TODO\"` provides documentation for your task. You should change it to something more informative.\n\nModify the created task so that it deletes items older than seven days.\n\n```ruby(lib/tasks/todo.rake)\n namespace :todo do\n-  desc \"TODO\"\n+  desc \"Delete items older than seven days\"\n   task delete_items: :environment do\n+    Item.where(\"created_at <= ?\", Time.now - 7.days).destroy_all\n   end\n\n end\n```\n\nType: `rake todo:delete_items` in the terminal to run the Rake task. To see a list of all rake tasks (both those provided by Rails and the one you just created), type `bundle exec rake -T` in the terminal. The last entry is your newly created task:\n\n```bash(Terminal)\nrake todo:delete_items                  # Delete items older than seven days\n```\n\n### Test Your Code\n\n- Generate todos and set their creation dates to a time in the past, then execute your Rake task. Verify that todos older than seven days are deleted, all others should remain.",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 121,
          "active_index": 9,
          "checkpoint_type": "normal",
          "position": 9,
          "points": 1,
          "ref": "f9dccc9c-cbae-4b1e-8cda-d262e1075811|0"
        },
        {
          "id": 1674,
          "name": "Extra Credit",
          "summary": "If you finish early, attempt these extra credit user stories",
          "body": "The goal of extra credit is to push you towards self-reliance, so outside of a brief description, we don't provide additional resources. If you finish your project early, challenge yourself to complete these additional user stories:\n\n| **User Story** | **Difficulty Rating** |\n| :-- | :-- |\n| As a user, I want my users __show__ page to be private. | 3 |\n| As a developer, I want to rebuild Blocitoff using [test-driven development](https://www.bloc.io/resources/tdd-introduction) | 3 |\n| As a developer, I want to implement user [authentication from scratch](http://railscasts.com/episodes/250-authentication-from-scratch) | 3 |\n| As a developer, I want to [automate](https://github.com/javan/whenever) my delete Rake task to run each day | 2 |",
          "assignment": "Optional: Complete one or more of the extra credit user stories.",
          "roadmap_section_id": 121,
          "active_index": null,
          "checkpoint_type": "extra_credit",
          "position": null,
          "points": 0,
          "ref": "87f504b0-8cf5-4f57-b8e6-85c70c02c1d1|0"
        }
      ]
    },
    {
      "id": 123,
      "roadmap_id": 31,
      "name": "Blocmarks: Social Bookmarking With Email Integration",
      "time_estimate": "40-160 Hours",
      "point_ratio": 0.6666666666666666,
      "description": "Build a production quality social bookmarking app that allows users to email, manage and share bookmarked URLs.",
      "icon": "Blocmarks",
      "visible_to_students": true,
      "checkpoints": [
        {
          "id": 1686,
          "name": "Intro",
          "summary": "Intro",
          "body": "Build an application that allows a user to bookmark URLs via email, peruse other user's bookmarks and maintain a personal index of categorized bookmarks.\n\n## Use Case\n\nIt's easy enough to bookmark a URL in your browser, but eventually your bookmark library may get cluttered and it may require effort to manage bookmarks. Wouldn't you also like the ability to share bookmarks with friends? That is not something you can do easily from your native browser.\n\nBlocmarks will solve these problems by organizing bookmarks by topic and making them public so that other users can find them and add bookmarks to their own Blocmarks profile.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a user, I want to **sign up** for a free account by providing a user name, password and email | 2 |\n| As a user, I want to **sign in and out** of Blocmarks | 2 |\n| As a user, I want to **email** a URL to Blocmarks and have it saved in the Blocmarks database | 3 |\n| As a user, I want to **see** an index of all topics and their bookmarks | 3 |\n| As a user, I want to **create, read, update, and delete** bookmarks | 2 |\n| As a user, I want to be the **only one allowed** to delete and update my bookmarks | 3 |\n| As a user, I want to **\"like and unlike\"** bookmarks created by other users | 2 |\n| As a user, I want to **see** a list of bookmarks on my personal profile that I've added or liked | 3 |\n\nBefore you begin working on user stories, complete this project's [Getting Started guide](https://www.bloc.io/resources/getting-started-with-rails-web-development-projects). Later user stories often rely on the completion of the former, therefore, work on them in the order prescribed.\n\n## Wireframes\n\nThese wireframes are meant to suggest a design, not dictate one.\n\n| **Wireframe** | **Description** |\n| :-- | :-- |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocmarks/blocmarks_index_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocmarks/blocmarks_index.png) | Index page. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocmarks/blocmarks_show_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocmarks/blocmarks_show.png) | Topic show page. |\n| [![](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocmarks/blocmarks_my_tn.png)](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocmarks/blocmarks_my.png) | User's profile page. |",
          "assignment": "Acquaint yourself with the user stories for this project.\n\nOptional: Sketch your own wireframes.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.",
          "roadmap_section_id": 123,
          "active_index": 1,
          "checkpoint_type": "normal",
          "position": 1,
          "points": 1,
          "ref": "8b889284-dc64-4483-9fb8-dbca7dcdafd5|0"
        },
        {
          "id": 1687,
          "name": "User Sign Up",
          "summary": "User Sign Up",
          "body": ">As a user, I want to **sign up** for a free account by providing a user name, password and email<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Incorporate Devise\n\nUse the [Devise](https://github.com/plataformatec/devise) gem for authentication. Blocmark's authentication system should allow users to sign up and send emails for account confirmation. Refer to the [Devise Resource](https://www.bloc.io/resources/devise) and the [Devise Getting Started Guide](https://github.com/plataformatec/devise#getting-started) for examples on implementing user sign up.\n\n### Test Your Code\n\n- Sign a new user up. Do you receive a confirmation email?\n- What happens if you attempt to sign up with an invalid email?\n- What happens if you attempt to sign up with a duplicate email?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 123,
          "active_index": 2,
          "checkpoint_type": "normal",
          "position": 2,
          "points": 1,
          "ref": "6509ae5d-5980-4919-8a93-f5c6ccf8745e|0"
        },
        {
          "id": 1688,
          "name": "User Sign in and Out",
          "summary": "User Sign in and Out",
          "body": ">As a user, I want to **sign in and out** of Blocmarks<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\nNow that users can sign up for Blocmarks, you want to give them a way to sign in and out of the app. Refer to our [Devise Resource](https://www.bloc.io/resources/devise) and the [ Devise Getting Started Guide](https://github.com/plataformatec/devise#getting-started) for examples on implementing user sign in/out with Devise.\n\n### Test Your Code\n\n- Sign into Blocmarks, does the top navigation change to indicate you are signed in?\n- Sign out of Blocmarks, does the top navigation change to indicate you are signed out?\n- What happens if you attempt to reset your password?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 123,
          "active_index": 3,
          "checkpoint_type": "normal",
          "position": 3,
          "points": 1,
          "ref": "62e8ddf0-4a47-4ac7-9a61-134c41c17779|0"
        },
        {
          "id": 1689,
          "name": "Topics CRUD",
          "summary": "Topics CRUD",
          "body": ">As a user, I want to **see** an index of all topics and their bookmarks<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Generate Models\n\nGenerate a topic model. Topics should be associated with users:\n\n```bash(Terminal)\n$ rails g model Topic title:string user:references:index\n```\n\nAssociate topics with users:\n\n```ruby(app/models/user.rb)\nclass User < ActiveRecord::Base\n...\n\n+  has_many :topics\nend\n```\nGenerate a bookmark model and bookmarks:\n\n```bash(Terminal)\n$ rails g model Bookmark url:string topic:references:index\n```\n\nAssociate bookmarks with topics:\n\n```ruby(app/models/topic.rb)\nclass Topic < ActiveRecord::Base\n  belongs_to :user\n+  has_many :bookmarks\nend\n```\n### Generate a Topics Controller\n\nGenerate `topics_controller.rb`:\n\n```bash(Terminal)\n$ rails g controller Topics index show new edit\n```\n\n### Implement CRUD For Topics\n\nDisplay each topic and the bookmarks that belong to it. Use this wireframe as a guideline:\n\n![img](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocmarks/blocmarks_index.png)\n\nAllow users to create and destroy topics from the topics __index__ view. Refer to the <C>1639>|CRUD</C> and <C>1640|More CRUD</C> for an example of implementing CRUD. Clicking on a topic should take the user to that topic's __show__ view and display only those bookmarks which belong to it:\n\n![img](https://bloc-global-assets.s3.amazonaws.com/images-full-stack/projects/blocmarks/blocmarks_show.png)\n\nImplement the show action in `topics_controller.rb` and display the bookmarks in `app/views/topics/show.html.erb`.\n\n### Test Your Code\n\n- Are you able to create a topic?\n- Are you able to delete a topic?\n- Are associated bookmarks displayed for each topic?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 123,
          "active_index": 4,
          "checkpoint_type": "normal",
          "position": 4,
          "points": 1,
          "ref": "e7530d0b-a4d8-4a4b-94d0-77938684e14b|0"
        },
        {
          "id": 1690,
          "name": "Bookmarks CRUD",
          "summary": "Bookmarks CRUD",
          "body": ">As a user, I want to **create, read, update, and delete** bookmarks<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Generate a Bookmarks Controller\n\nGenerate `BookmarksController`:\n\n```bash(Terminal)\n$ rails g controller Bookmarks show new edit\n```\n\nYou don't generate an index action for `BookmarksController` because the topics __show__  view fulfills this need. Nest the bookmarks resource under the topics resources in `routes.rb`. Only create the routes that your application needs.\n\n### Implement CRUD For Bookmarks\n\nAllow users to create, destroy and update bookmarks. Refer to the <C>1639>|CRUD</C> and <C>1640|More CRUD</C> checkpoints for an example of implementing CRUD.\n\n### Test your code\n\n- Are you able to create new bookmarks?\n- Are you able to update bookmarks?\n- Are you able to delete bookmarks?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 123,
          "active_index": 5,
          "checkpoint_type": "normal",
          "position": 5,
          "points": 1,
          "ref": "669e4e70-6103-4036-911b-4f6fae0654df|0"
        },
        {
          "id": 1691,
          "name": "Receive Incoming Emails",
          "summary": "Receive Incoming Emails",
          "body": ">As a user, I want to **email** a URL to Blocmarks and have it saved in the Blocmarks database<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Incorporate Mailgun\n\nUse [Mailgun](http://www.mailgun.com/) to configure Blocmarks to receive an email containing a bookmark URL. For help configuring it, refer to the [Mailgun Integration](https://www.bloc.io/resources/mailgun-integration) tutorial. You'll need to parse and convert incoming emails into bookmark objects that belong to a topic.\n\nWith Mailgun configured and your models created, add code to the create action in `IncomingController` to process incoming emails and turn them into bookmarks:\n\n```ruby(app/controllers/incoming_controller.rb)\nclass IncomingController < ApplicationController\n\n  # http://stackoverflow.com/questions/1177863/how-do-i-ignore-the-authenticity-token-for-specific-actions-in-rails\n  skip_before_action :verify_authenticity_token, only: [:create]\n\n  def create\n-    # Take a look at these in your server logs\n-    # to get a sense of what you're dealing with.\n-    puts \"INCOMING PARAMS HERE: #{params}\"\n\n    # You put the message-splitting and business\n    # magic here.\n+    # Find the user by using params[:sender]\n+    # Find the topic by using params[:subject]\n+    # Assign the url to a variable after retreiving it from params[\"body-plain\"]\n\n+    # Check if user is nil, if so, create and save a new user\n\n+    # Check if the topic is nil, if so, create and save a new topic\n\n+    # Now that you're sure you have a valid user and topic, build and save a new bookmark\n\n    # Assuming all went well.\n    head 200\n  end\nend\n```\n\n### Test Your Code\n\n- Send an email to your app. Is a new bookmark created?\n- Send an email to your app using an email that does not belong to an existing user. Is a new user and new bookmark created?\n- Send an email to your app using a topic that does not already exist. Is a new topic and new bookmark created?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 123,
          "active_index": 6,
          "checkpoint_type": "normal",
          "position": 6,
          "points": 1,
          "ref": "5bc45a97-a1dd-4da0-b7c9-f8febf19d459|0"
        },
        {
          "id": 1692,
          "name": "User Authorization",
          "summary": "User Authorization",
          "body": ">As a user, I want to be the **only one allowed** to delete and update my bookmarks<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Incorporate Pundit\n\nUse the [Pundit](https://github.com/elabs/pundit) gem for authorization. Refer to the [Pundit Readme](https://github.com/elabs/pundit/blob/master/README.md#policies) checkpoint for examples of using Pundit policies.\n\nAdd Pundit to your `Gemfile`:\n\n```ruby(Gemfile)\n+gem 'pundit'\n```\n\nInstall Pundit with the `bundle` shortcut:\n\n```bash(Terminal)\n$ bundle\n```\n\nOpen `ApplicationController` and `include Pundit`:\n\n```ruby(app/controllers/application_controller.rb)\nclass ApplicationController < ActionController::Base\n+  include Pundit\n  protect_from_forgery with: :exception\n  before_action :configure_permitted_parameters, if: :devise_controller?\n\n  protected\n\n  def configure_permitted_parameters\n    devise_parameter_sanitizer.for(:sign_up) << :name\n  end\nend\n```\n\nGenerate a default policy file for your application with the `pundit:install` generator:\n\n```bash(Terminal)\n$ rails g pundit:install\n      create  app/policies/application_policy.rb\n```\n\nDefine rules for the `create`, `update`, and `destroy` resource actions:\n\n```ruby(app/policies/application_policy.rb)\n   def create?\n-    false\n+    user.present?\n   end\n\n   def update?\n-    false\n+    user.present? && (record.user == user)\n   end\n\n   def destroy?\n-    false\n+    user.present? && (record.user == user)\n   end\n```\n\nCreate a policy file for bookmarks. The `ApplicationPolicy` defaults will work for bookmarks, so the file can be empty apart from the class definition and inheritance declaration. Add authorization to `BookmarksController` and the bookmark and topic views.\n\n### Test Your Code\n\n- Are you able to update and or delete bookmarks created by another user?\n- Are you able to update and or delete bookmarks that you created?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 123,
          "active_index": 7,
          "checkpoint_type": "normal",
          "position": 7,
          "points": 1,
          "ref": "e32d95af-c653-4585-82dc-232eec7027e2|0"
        },
        {
          "id": 1693,
          "name": "Like and Unlike Bookmarks",
          "summary": "Like and Unlike Bookmarks",
          "body": ">As a user, I want to **\"like and unlike\"** bookmarks created by other users<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Create a Like Model\n\n\"Liked\" flags need to be associated with the user who flagged the bookmark as \"liked\", and the bookmark that was flagged as a \"like\". This functionality merits a separate model. Create a `Like` model with `bookmark` and `user` references - no other attributes are necessary - and migrate the changes.\n\nThe `likes` table does not have any special data of its own (just its associations), so it can be considered a simple **join table**. A join table represents a relationship between two objects - in this case, a user and a bookmark.\n\n### Associate Likes with Users and Bookmarks\n\nAssociate likes by adding `has_many` to `user.rb` and `bookmark.rb`. Remember that an instance of the `Like` model cannot exist without an associated user or bookmark, so add the `dependent: :destroy` option for both models.\n\n### Check “Like” Status\n\nThe UI implementation for likes should be simple. You want to display a link next to each bookmark so that the user can \"like\" that bookmark. You will also display a link for users to \"unlike\" a bookmark. To toggle between liked and un-liked states, create a `liked` method which will let you know if a given user has liked a bookmark. Create the method in `User`:\n\n```ruby(app/models/user.rb)\n+  def liked(bookmark)\n+    likes.where(bookmark_id: bookmark.id).first\n+  end\n```\n\nThe `liked` method takes a `bookmark` object and returns a `like` object if one exists - if there is an entry in the likes table with the appropriate `user_id` and `bookmark_id`. If there is no `like` for the given `bookmark` and `user`, the method will return `nil`. This method will allow you to toggle like/unlike links in the views.\n\n### Create a Controller\n\nBefore you add the link to the view, create a controller for likes:\n\n```bash(Terminal)\n$ rails g controller Likes index\n```\n\nAdd the required routes to `routes.rb`:\n\n```ruby(config/routes.rb)\n   resources :bookmarks, except: [:index] do\n+    resources :likes, only: [:index, :create, :destroy]\n```\n\nCreate a likes `index` to display list of all liked bookmarks with an associated controller action to populate the view.\n\nNow that you have a method for detecting whether a user has liked a post, a `LikesController`, and the required routes, build a link for liking a bookmark. Create a **_like.html.erb** partial in the `app/views/likes/` directory and add the following code:\n\n```erb(app/views/likes/_like.html.erb)\n<div>\n  <% if like = current_user.liked(bookmark) %>\n    <%= link_to [bookmark, like], class: 'btn btn-danger', method: :delete do %>\n      <i class=\"glyphicon glyphicon-star-empty\"> </i>&nbsp; Unlike\n    <% end %>\n  <% else %>\n    <%= link_to [bookmark, Like.new], class: 'btn btn-primary', method: :post do %>\n      <i class=\"glyphicon glyphicon-star\"> </i>&nbsp; Like\n    <% end %>\n  <% end %>\n</div>\n```\n\nTo render this partial in a view, add the following to your views:\n\n```erb(erb)\n+    <%= render partial: 'likes/like', locals: { bookmark: @bookmark } %>\n```\n\nAdd create and destroy methods to `LikesController`:\n\n```ruby(app/controllers/likes_controller.rb)\n+  def create\n+    @bookmark = Bookmark.find(params[:bookmark_id])\n+    like = current_user.likes.build(bookmark: @bookmark)\n+\n+    if like.save\n+      # Add code to generate a success flash and redirect to @bookmark\n+    else\n+      # Add code to generate a failure flash and redirect to @bookmark\n+    end\n+  end\n\n+  def destroy\n+    # Get the bookmark from the params\n+    # Find the current user's like with the ID in the params\n+\n+    if like.destroy\n+      # Flash success and redirect to @bookmark\n+    else\n+      # Flash error and redirect to @bookmark\n+    end\n+  end\n```\n\nCreate a policy file for likes. The `ApplicationPolicy` defaults will work for likes, so `BookmarksPolicy` can be empty apart from the class definition and inheritance declaration. Add authorization to `LikesController` then add `authorize like` before the `if` statements in the `create` and `destroy` methods.\n\nAdd the proper authorization to the partial:\n\n```erb(app/views/likes/_like.html.erb)\n+<% if policy(Like.new).create? %>\n   <div>\n     <% if like = current_user.liked(bookmark) %>\n       <%= link_to [bookmark, like], class: 'btn btn-danger', method: :delete do %>\n         <i class=\"glyphicon glyphicon-star-empty\"> </i>&nbsp; Unlike\n       <% end %>\n     <% else %>\n       <%= link_to [bookmark, Like.new], class: 'btn btn-primary', method: :post do %>\n         <i class=\"glyphicon glyphicon-star\"> </i>&nbsp; like\n       <% end %>\n     <% end %>\n   </div>\n+<% end %>\n```\n\n### Test Your Code\n\n- Are you able to like bookmarks created by other users?\n- Are you able to like bookmarks created by you?\n- Are you able to unlike a previously liked bookmarks?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 123,
          "active_index": 8,
          "checkpoint_type": "normal",
          "position": 8,
          "points": 1,
          "ref": "e1c82045-2e9b-48bd-ad32-7b397132fe4c|0"
        },
        {
          "id": 1694,
          "name": "User Profiles",
          "summary": "User Profiles",
          "body": ">As a user, I want to **see** a list of bookmarks on my personal profile that I've added or liked<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Generate a Users Controller\n\nGenerate `UsersController` with the show action:\n\n```bash(Terminal)\n$ rails g controller Users show\n```\n\nAdd the necessary routes to `config/routes.rb`:\n\n```ruby(config/routes.rb)\n devise_for :users\n+resources :users, only: [:show]\n```\n\nAdd a `show` action to `UsersController` and populate instance variables with the bookmarks the user has created and liked:\n\n```ruby(app/controllers/users_controller.rb)\n+def show\n+  # populate @user_bookmarks with the user's bookmarks\n+  # populate @liked_bookmarks with liked bookmarks\n+end\n```\n\nModify the users __show__ to display the bookmarks the user has added and liked:\n\n![img](https://bloc-global-assets.s3.amazonaws.com/screencaps/blocmarks_my.png)\n\nIn the **_like** partial give users the ability to unlike bookmarks on their profile page.\n\n### Test your code\n\n- Does the user profile display all bookmarks a user has created or liked?\n- Is a user able to unlike a liked bookmark from their profile page?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 123,
          "active_index": 9,
          "checkpoint_type": "normal",
          "position": 9,
          "points": 1,
          "ref": "f7a04854-7549-4389-9e09-99f20454ae99|0"
        },
        {
          "id": 1695,
          "name": "Extra Credit",
          "summary": "If you finish early, attempt these extra credit user stories",
          "body": "The goal of extra credit is to push you towards self-reliance, so outside of a brief description, we don't provide additional resources. If you finish your project early, challenge yourself to complete these additional user stories:\n\n| **User Story** | **Difficulty Rating** |\n| :-- | :-- |\n| As a user, I want to see [URL previews](https://github.com/embedly/embedly-ruby) for each bookmark | 3 |\n| As a developer, I want to write views using [HAML](https://www.bloc.io/resources/using-haml) instead of ERB | 3 |\n| As a developer, I want Blocmarks to have [readable URLs](http://railscasts.com/episodes/314-pretty-urls-with-friendlyid) | 3 |",
          "assignment": "Optional: Complete one or more of the extra credit user stories.",
          "roadmap_section_id": 123,
          "active_index": null,
          "checkpoint_type": "extra_credit",
          "position": null,
          "points": 0,
          "ref": "d4c1e71e-b8f8-4c21-8b8c-9cba6b967470|0"
        }
      ]
    },
    {
      "id": 124,
      "roadmap_id": 31,
      "name": "Blocmetrics: API Tracking Service and Reporting Tool",
      "time_estimate": "40-160 Hours",
      "point_ratio": 0.6666666666666666,
      "description": "Build an analytics service and reporting tool that you can use with web apps to track user activity and report results.",
      "icon": "Blocmetrics",
      "visible_to_students": true,
      "checkpoints": [
        {
          "id": 1696,
          "name": "Intro",
          "summary": "Intro",
          "body": "Build an analytics service to track events on websites.\n\n## Use Case\n\nThere are plenty of good analytic services, but that doesn't mean you can't build a better one. Your analytics service will offer a few key features:\n\n* A client-side JavaScript snippet that allows a user to track events on their website.\n* A server-side API that captures and saves those events to a database.\n* A Rails application that displays the captured event data for a user.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a user, I want to **sign up** for a free account by providing a name, password, and email | 2 |\n| As a user, I want to **sign in and out** of Blocmetrics | 2 |\n| As a user, I want to **register** an application with Blocmetrics for tracking | 3 |\n| As a user, I want events **associated** with registered applications | 3 |\n| As a developer, I want to receive incoming events in an API controller | 2 |\n| As a user, I want to **use** JavaScript to capture client-side events in my application | 2 |\n| As a user, I want to **see** a graph of events for each registered application | 3 |\n\nBefore you begin working on user stories, complete this project's [Getting Started guide](https://www.bloc.io/resources/getting-started-with-rails-web-development-projects). Later user stories often rely on the completion of the former, therefore, work on them in the order prescribed.",
          "assignment": "Acquaint yourself with the user stories for this project.\n\nOptional: Sketch your own wireframes.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.",
          "roadmap_section_id": 124,
          "active_index": 1,
          "checkpoint_type": "normal",
          "position": 1,
          "points": 1,
          "ref": "15550ef3-6bee-4fd9-bdec-db039a563035|0"
        },
        {
          "id": 1697,
          "name": "User Sign Up",
          "summary": "User Sign Up",
          "body": ">As a user, I want to **sign up** for a free account by providing a user name, password and email<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Incorporate Devise\n\nUse the [Devise](https://github.com/plataformatec/devise) gem for authentication. Blocmetric's authentication system should allow users to sign up and send emails for account confirmation. Refer to the [Devise Resource](https://www.bloc.io/resources/devise) and the [Devise Getting Started Guide](https://github.com/plataformatec/devise#getting-started) for examples on implementing user sign up.\n\n### Test Your Code\n\n- Sign a new user up. Do you receive a confirmation email?\n- What happens if you attempt to sign up with an invalid email?\n- What happens if you attempt to sign up with a duplicate email?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 124,
          "active_index": 2,
          "checkpoint_type": "normal",
          "position": 2,
          "points": 1,
          "ref": "56e20e02-918c-4af0-9d19-49303e1fc78e|0"
        },
        {
          "id": 1698,
          "name": "User Sign in and Out",
          "summary": "User Sign in and Out",
          "body": ">As a user, I want to **sign in and out** of Blocmetrics<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\nNow that users can sign up for Blocmetrics, you want to give them a way to sign in and out of the app. Refer to our [Devise Resource](https://www.bloc.io/resources/devise) and the [ Devise Getting Started Guide](https://github.com/plataformatec/devise#getting-started) for examples on implementing user sign in/out with Devise.\n\n### Test Your Code\n\n- Sign into Blocmetrics, does the top navigation change to indicate you are signed in?\n- Sign out of Blocmetrics, does the top navigation change to indicate you are signed out?\n- What happens if you attempt to reset your password?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 124,
          "active_index": 3,
          "checkpoint_type": "normal",
          "position": 3,
          "points": 1,
          "ref": "7945e04a-c468-4bdd-b126-ee1993a76bd4|0"
        },
        {
          "id": 1699,
          "name": "Register an Application",
          "summary": "Register an Application",
          "body": ">As a user, I want to **register** an application with Blocmetrics for tracking<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\nBlocmetrics must track events from multiple applications. As such, you will need to register applications with a unique attribute so that when Blocmetrics receives an event, it knows which application to associate the event. Thankfully, each application already has a unique attribute: its URL.\n\n### Generate an Application Model\n\nWhen a user registers a new application, you will need to save that registration and associate it with the user. Generate a registered application model that is associated with the user. The model should have a name and URL attribute.\n\n### Generate an Applications Controller\n\nWith the registration model created, generate `RegisteredApplicationsController` with the appropriate CRUD actions.\n\n### Build the Views\n\nA user should see an index of all their registered applications. Complete the index action and views. Fill out the create action and views. The create action and views should create a new registration associated with a user.\n\nBuild out the read action and views as well. The read view should display the registered application's name and URL. Lastly, construct the delete action to de-register and destroy an existing application registration.\n\n### Test your code\n\n- Are you able to register multiple applications?\n- Are the registered applications displayed after creation?\n- Are you able to de-register and then re-register an application by the same name?\n- Are you able to view an index of registered applications?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 124,
          "active_index": 4,
          "checkpoint_type": "normal",
          "position": 4,
          "points": 1,
          "ref": "fa04cad1-0b76-484b-8d50-543f02770c7b|0"
        },
        {
          "id": 1700,
          "name": "Associate Events",
          "summary": "Associate Events",
          "body": ">As a user, I want events **associated** with registered applications<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\nNow that Blocmetrics can register applications to track, it needs to be able to store events that it will receive from those applications.\n\n### Generate an Event Model\n\nWhen Blocmetrics receives an event, it should store the name of the event. Generate an event model that is associated with a registered application with an event name attribute.\n\n### Seed the Database\n\nUse `seeds.rb` to populate Blocmetrics with some registered applications and associated events. Vary the name of events using [Faker](https://github.com/stympy/faker) to simulate a variety of tracked events.\n\n### Modify the Application Show Page\n\nOn the registered application show page, Blocmetrics will eventually display graphs of the different events. For now, show the name and count of each type of event associated with the application. Use Ruby's [`group_by` method](http://ruby-doc.org/core-2.2.1/Enumerable.html#method-i-group_by) method to sort events by name:\n\n```ruby(app/controllers/registered_applications_controller.rb)\n   def show\n   ...\n+    @events = @registered_application.events.group_by(&:name)\n   end\n```\n\n### Test your code\n\n- Are applications and events seeded into the development database?\n- Does the registered application show page display the count of associated events?",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 124,
          "active_index": 5,
          "checkpoint_type": "normal",
          "position": 5,
          "points": 1,
          "ref": "a3fb3032-916f-47bd-b4a5-0b8989e63f80|0"
        },
        {
          "id": 1701,
          "name": "API Controller",
          "summary": "API Controller",
          "body": ">As a developer, I want to receive incoming events in an API controller<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\nTo give Blocmetrics the ability to receive incoming events from registered applications, it will need an API controller and routes.\n\n### Edit Routes\n\nEdit `routes.rb` to provide the requisite API routes:\n\n```ruby(app/config/routes.rb)\n# #1\n+  namespace :api, defaults: { format: :json } do\n# #2\n+    resources :events, only: [:create]\n+  end\n```\n\n**#1**: `namespace` keeps the API routes separated from the rest of the app routes. `defaults: { format: :json}` tells your route to expect to receive requests in JSON form.\n**#2**: Blocmetrics' API only needs to support one route to record new events.\n\nOpen `config/initializers/inflections.rb` and add the following:\n\n```ruby(config/initializers/inflections.rb)\n+ActiveSupport::Inflector.inflections(:en) do |inflect|\n+  inflect.acronym 'API'\n+end\n```\n\nThis allows you to use `API` as the namespace, instead of the non-acronymed `Api` namespace.\n\n### Create a Controller\n\nCreate `EventsController` to match the API route. First, make a new directory in `app/controllers` named `api`. Within that directory, create the new controller:\n\n```ruby(app/controllers/api/events_controller.rb)\n+class API::EventsController < ApplicationController\n # #3\n+  skip_before_action :verify_authenticity_token\n+\n+  def create\n+\n+  end\n+end\n```\n\n**#3**: In Production, you would make the application more secure by first giving a CSRF token to the client code before submitting the event. For the purpose of this project, you will need to disable the [CSRF](https://www.bloc.io/resources/csrf) protection, skip the `verify_authenticity_token` filter.\n\nIn the create action, you need to find the registered application that matches the source of the API request. Use the `request.env['HTTP_ORIGIN']` value to find the correct application:\n\n```ruby(app/controllers/api/events_controller.rb)\n class API::EventsController < ApplicationController\n   def create\n+    registered_application = RegisteredApplication.find_by(url: request.env['HTTP_ORIGIN'])\n   end\n```\n\nCheck that the `find_by` call does not return `nil`. If it does, then you've received an API request from an unregistered application. In this case, return an error to the requestor:\n\n```ruby\nrender json: \"Unregistered application\", status: :unprocessable_entity\n```\n\nDefine a private `event_params` method for `EventsController`. `:name` is the only attribute that needs to be permitted:\n\n```ruby(app/controllers/api/events_controller.rb)\n ...\n+  private\n+  def event_params\n+    params.require(:event).permit(:name)\n+  end\n```\n\nCreate a new event associated with the `registered_application` (the event creation code will need to call the `event_params` method).\n\nIf the event saves successfully in `API::EventsController#create`, return a success message:\n\n```ruby\n  render json: @event, status: :created\n```\n\nOtherwise, return a failure message:\n\n```ruby\n  render json: {errors: @event.errors}, status: :unprocessable_entity\n```\n\n### CORS\n\nOur client-side JavaScript code will need to send an AJAX request to the Blocmetrics API so that we can store events. Browsers normally do not allow such cross-origin requests to occur. This is to prevent security vulnerabilities such as [cross-site scripting](https://en.wikipedia.org/wiki/Cross-site_scripting). Various hacks exist to work around this problem, but there is a well-supported standard called cross-origin resource sharing (CORS). CORS allows us to allow cross-origin requests in a controlled manner without opening up security vulnerabilities.  We will need to implement CORS in `EventsController`.\n\nCORS works by making a preliminary request to the target server, asking if the cross-domain request will be permitted. This uses the HTTP `OPTION` verb, which is not part of Rails' restful routes. An `OPTION` request precedes a GET or POST request and checks whether the route accepts a cross-origin request. Add it to your routes manually:\n\n```ruby(config/routes.rb)\n+    match '/events', to: 'events#preflight', via: [:options]\n     resources :events, only: [:create]\n```\n\nThe browser expects the OPTIONS request to return a 200. With that said, our `preflight` action doesn't need to render anything apart from a 200 status code:\n\n```ruby(app/controllers/api/events_controller.rb)\n+ def preflight\n+   head 200\n+ end\n```\n\nWe must set CORS response headers so our controller actions will allow `POST` requests across domains:\n\n```ruby(app/controllers/api/events_controller.rb)\n class API::EventsController < ApplicationController\n\n+  before_filter :set_access_control_headers\n\n+  def set_access_control_headers\n # #1\n+    headers['Access-Control-Allow-Origin'] = '*'\n # #2\n+    headers['Access-Control-Allow-Methods'] = 'POST, GET, OPTIONS'\n # #3\n+    headers['Access-Control-Allow-Headers'] = 'Content-Type'\n+  end\n\n ...\n end\n```\n\nAt __#1__, we allow requests from any origin.\n\nAt __#2__, we permit the `POST, GET, OPTIONS` request methods.\n\nAt __#3__, we allow the header `Content-Type`, which is used in HTTP requests to declare the type of the data being sent.\n\n### Test your code\n\n- Test the API using [curl](http://curl.haxx.se/):\n\n  ```bash(Terminal)\n  $ curl -v -H \"Accept: application/json\" -H \"Origin: http://registered_application.com\" -H \"Content-Type: application/json\" -X POST -d '{\"name\":\"foobar\"}'  http://localhost:3000/api/events\n  ```\n- Confirm that a new event was created with the event name \"foobar\" and successfully associated with the registered application.\n- Send another curl request, this time from an unregistered URL. Confirm that a new event is not created.",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 124,
          "active_index": 6,
          "checkpoint_type": "normal",
          "position": 6,
          "points": 1,
          "ref": "a4fa684c-16eb-49ea-8e25-db14557e8172|0"
        },
        {
          "id": 1702,
          "name": "Client-Side Javascript",
          "summary": "Client-Side Javascript",
          "body": ">As a user, I want to **use** JavaScript to capture client-side events in my application<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Create a JavaScript Snippet\n\nBlocmetrics users must be able to track events using JavaScript snippets. There's only one function your snippet needs to support:\n\n```javascript\nblocmetrics.report();\n```\n\nWhen a browser executes the `blocmetrics.report` function, make an Ajax request to the server-side API to create the event on your server.\n\nIn order to keep your Blocmetrics code from colliding with other JavaScript code, you should create a namespace for it. The simplest way to do this is to declare an empty object. Open one of your previous projects and add this to its `application.js` file:\n\n```javascript(app/assets/javascripts/application.js)\n+ var blocmetrics = {};\n```\n\nThen create the `report` function as a property on that object:\n\n```javascript(app/assets/javascripts/application.js)\nvar blocmetrics = {};\n+ blocmetrics.report = function(eventName){\n+   // your code here\n+ };\n```\n\nInside the `report` function, use a POST request to create the event. Assume that jQuery is **not** present, and use the Ajax functions that are native to web browsers instead ([the XMLHttpRequest API](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)).\n\nCreate an event with the name `sale`:\n\n```javascript\nblocmetrics.report = function(eventName) {\n+  // #1\n+  var event = {event: { name: eventName }};\n+\n+  // #2\n+  var request = new XMLHttpRequest();\n+  // #3\n+  request.open(\"POST\", \"http://localhost:3000/api/events\", true);\n+  // #4\n+  request.setRequestHeader('Content-Type', 'application/json');\n+  // #5\n+  request.send(JSON.stringify(event));\n}\n```\n\nAt **#1**, we create an event JSON object to send to the Blocmetrics analytics service.\n\nAt **#2**, we initialize a new XMLHttpRequest() (AJAX request)\n\nAt **#3**, we set the HTTP method to POST, the url of our events endpoint, and allow the request to run asynchronously.\n\nAt **#4**, we set the request Content-Type header to 'application/json'. Without that, our API::EventsController would not know to process the request as JSON.\n\nAt **#5**, we finally send the request.\n\nDocument this JavaScript snippet in the Blocmetrics `README.md` for future reference.\n\n### Test Your code\n\n- Add your JavaScript code to the application you want to track. Trigger the tracked event in your browser, and confirm that Blocmetrics creates a new event.\n  > Run two Rails apps at the same time by varying their port numbers. To do so, use the `-p <port_number>` option.",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 124,
          "active_index": 7,
          "checkpoint_type": "normal",
          "position": 7,
          "points": 1,
          "ref": "55f554ef-c8c7-44d7-a19b-9612c4d367fd|0"
        },
        {
          "id": 1703,
          "name": "Event Graphs",
          "summary": "Event Graphs",
          "body": ">As a user, I want to **see** a graph of events for each registered application<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Incorporate Chartkick\n\nUse the JavaScript charting library, [Chartkick library](https://github.com/ankane/chartkick#installation). Add it to your `Gemfile` to install it.\n\n### Update the Show Page\n\nReplace the counts of events with graphs. Chartkick can generate an events pie chart in one line of code:\n\n```erb(app/views/registered_applications/show.html.erb)\n+<%= pie_chart @registered_application.events.group(:name).count %>\n```\n\nTo create a line chart of events over time, install the [Groupdate](https://github.com/ankane/groupdate) gem. Using Groupdate, Chartkick allows you to create a line chart of events over time with:\n\n```erb(app/views/registered_applications/show.html.erb)\n+<%= line_chart @registered_application.events.group_by_day(:created_at).count %>\n```\n\nGroupdate does not support SQLite databases, so you'll need to install PostgreSQL. Follow the appropriate installation instructions below:\n\n| Operating System | Installation Instructions |\n| ---------------- | ------------------------- |\n| OSX | [Postgres.app](http://postgresapp.com/) |\n| Linux | [Digital Ocean: How To Install and Use PostgreSQL on Ubuntu ](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-14-04) |\n| Windows | [PostgreSQL.org: Graphical installer](http://www.postgresql.org/download/windows/) |\n\n### Test your code\n\n- View the show page of a registered application and confirm a pie chart of all events is displayed.\n- View the show page of a registered application and confirm a line graph of all events over time is displayed.",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 124,
          "active_index": 8,
          "checkpoint_type": "normal",
          "position": 8,
          "points": 1,
          "ref": "e3de15cf-a5d2-418c-b967-6ef7a4e01a53|0"
        }
      ]
    },
    {
      "id": 125,
      "roadmap_id": 31,
      "name": "Open Todo API: External API With Authentication",
      "time_estimate": "40-160 Hours",
      "point_ratio": 0.6666666666666666,
      "description": "Build an API for a to-do list application, so that users can authenticate and manage their information externally.",
      "icon": "Open-Todo-API",
      "visible_to_students": true,
      "checkpoints": [
        {
          "id": 1704,
          "name": "Intro",
          "summary": "Introduction to the Open To-Do Project",
          "body": "Build an externally usable API for a basic to-do list application. This API will allow users to modify user accounts and to-do items from the command line.\n\n## Use Case\n\nTo-do lists should be simple, while remaining flexible to use. It's one thing to have a physically limited stack of papers in your pocket. It's quite another to have a list that works easily on your Android, and your spouse's iPad, and your Windows computer (and any command line, worldwide).\n\nApps like [Todo.txt](http://todotxt.com/) go a long way towards solving this problem by creating a simple API that any programmer can easily navigate and extend. Like Todo.txt, this app will be easy to control from the command line.\n\nYour API should allow you to change the same data from the command line or the browser. This API can support other platforms and allow programmers to build on your tool in new and exciting ways.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As the Open To-do API, I want to **return** JSON representations of users, lists, and items | 2 |\n| As a user, I want to **authenticate** myself from the command line, using a username and password | 2 |\n| As a user, I want to **create** new users, lists, and items from the command line | 2 |\n| As a user, I want to **remove** users and lists from the command line | 1 |\n| As a user, I want to **update** list and item attributes from the command line | 3 |\n\nBefore you begin working on user stories, complete this project's [Getting Started guide](https://www.bloc.io/resources/getting-started-with-rails-web-development-projects). Later user stories often rely on the completion of the former, therefore, work on them in the order prescribed.",
          "assignment": "Acquaint yourself with the user stories for this project.\n\nOptional: Sketch your own wireframes.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.",
          "roadmap_section_id": 125,
          "active_index": 1,
          "checkpoint_type": "normal",
          "position": 1,
          "points": 1,
          "ref": "d0a1d671-d1af-44f5-98ea-bdbb2d25a77a|0"
        },
        {
          "id": 1705,
          "name": "Rails Serializers",
          "summary": "Serialize objects to JSON using Rails",
          "body": ">As the Open To-do API, I want to **return** JSON representations of users, lists, and items<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Generate Models\n\nOpen To-do API requires three models: a `User`, a `List` and an `Item`. A user model represents a user, an item is a single to-do item, and a list belongs to a user and refers to several items. Generate these three models with basic attributes.\n\n### Generate Serializers\n\nThe Open To-do API must return formatted responses that users can read, and machines can generate and parse. The standard for most modern web APIs is [JSON](http://en.wikipedia.org/wiki/JSON), which stands for JavaScript Object Notation. JSON is a lightweight data-interchange format.\n\nConverting a Rails object into a JSON representation is called serializing. Open To-do API will need to serialize users, lists, and items. Read our guide to [Rails Serializers](https://www.bloc.io/resources/serializers) to turn your Rails objects into JSON.\n\nGenerate `UserSerializer`, `ListSerializer`, and `ItemSerializer` using the Rails Serializers guide.\n\n### Test your code\n\n- From the Rails console, confirm that `UserSerializer.new(User.first).as_json` returns the JSON representation of a `User`.\n- From the Rails console, confirm that `ListSerializer.new(List.first).as_json` returns the JSON representation of a `List`.\n- From the Rails console, confirm that `ItemSerializer.new(Item.first).as_json` returns the JSON representation of an `Item`.\n- Validate the JSON output for each Serializer using [JSONLint](http://jsonlint.com/).",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 125,
          "active_index": 2,
          "checkpoint_type": "normal",
          "position": 2,
          "points": 1,
          "ref": "51aa879b-02a1-444e-953d-6e2a0f600cd1|0"
        },
        {
          "id": 1706,
          "name": "User Authentication",
          "summary": "Authenticate users from the command line",
          "body": ">As a user, I want to **authenticate** myself from the command line, using a username and password<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Generate a Base Controller\n\nCreate an `ApiController` from which the user, list, and items API controllers will inherent:\n\n```ruby(app/controllers/api_controller.rb)\n+class ApiController < ApplicationController\n # #1\n+  skip_before_action :verify_authenticity_token\n+\n+end\n```\n**#1**: Refer to the [CSRF resource](https://www.bloc.io/resources/csrf) to see why you need to skip the `verify_authentication_token`.\n\nCreate a private method named `authenticated?`. Other API controllers will use `authenticated?` to ensure users are authorized:\n\n```ruby(app/controllers/api_controller.rb)\n class ApiController < ApplicationController\n   skip_before_action :verify_authenticity_token\n+  private\n+  def authenticated?\n # #2\n+    authenticate_or_request_with_http_basic {|username, password| User.where( username: username, password: password).present? }\n+  end\n end\n```\n\n**#2**: `authenticate_or_request_with_http_basic` implements basic HTTP authentication, which ensures HTTP requests are accompanied by a valid username and password.\n\nTo test `authenticated?`, you will need an API route that requires authentication.\n\nEdit `routes.rb` to provide API routes:\n\n```ruby(app/config/routes.rb)\n # #3\n+  namespace :api, defaults: { format: :json } do\n+    resources :users\n+  end\n```\n\n**#3**: `namespace` separates the API routes from the rest of the application routes. `defaults: { format: :json}` tells the route to support requests in JSON form.\n\n### Generate a Users Controller\n\nCreate `UsersController` to match the API routes. Make a new directory in `app/controllers` named `api`. Create the new controller in that directory:\n\n```ruby(app/controllers/api/users_controller.rb)\n+class Api::UsersController < ApiController\n # #4\n+  before_action :authenticated?\n+\n+  def index\n+  end\n\n+end\n```\n\n**#4**: The `before` filter calls `authenticated?` before the request is processed.\n\nWrite `index` to return a `UserSerializer`-generated JSON representation of all users. The final line of the `index` method will look like:\n\n```ruby(app/controllers/api/users_controller.rb)\n   def index\n     ...\n+    render json: users, each_serializer: UserSerializer\n   end\n```\n\n### Test Your Code\n\n- Create users via the Rails console.\n- From the command line, retrieve all the users via a `curl` request. Replace `username` and `password` with a valid username and password:\n\n  ```bash(Terminal)\n  $ curl -u username:password http://localhost:3000/api/users/\n  ```\n- Try to retrieve all users using an invalid username and password combination, verify the request fails.",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 125,
          "active_index": 3,
          "checkpoint_type": "normal",
          "position": 3,
          "points": 1,
          "ref": "b6038ea2-6c88-414b-b3c5-4a6cb54cdb5f|0"
        },
        {
          "id": 1707,
          "name": "Create From the Command Line",
          "summary": "Create new users, lists, and items from the command line",
          "body": ">As a user, I want to **create** new users, lists, and items from the command line<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n### Edit Routes\n\nEdit `routes.rb` to provide the API routes for `List`s and `Item`s:\n\n```ruby(app/config/routes.rb)\n   namespace :api, defaults: { format: :json } do\n-    resources :users\n+    resources :users do\n+      resources :lists\n+    end\n\n+    resources :lists, only: [] do\n+      resources :items, only: [:create]\n+    end\n\n+    resources :items, only: [:destroy]\n   end\n```\n\n### Create List and Item Controllers\n\nCreate `ListsController` and `ItemsController` to match the API routes:\n\n```ruby(app/controllers/api/lists_controller.rb)\n+class Api::ListsController < ApiController\n+  before_action :authenticated?\n+\n+  def create\n+  end\n+\n+end\n```\n\n```ruby(app/controllers/api/items_controller.rb)\n+class Api::ItemsController < ApiController\n+  before_action :authenticated?\n+\n+  def create\n+  end\n\n+end\n```\n\nIn `UsersController`, add a `create` method and a private `users_params` method. `User` only requires username and password parameters:\n\n```ruby(app/controllers/api/users_controller.rb)\n class Api::UsersController < ApiController\n   ...\n+  def create\n+  end\n\n+  private\n+  def user_params\n+    params.require(:user).permit(:username, :password)\n+  end\n end\n```\n\nUse `user_params` in `create` to create and save a new `User`:\n\n```ruby(app/controllers/api/users_controller.rb)\n class Api::UsersController < ApiController\n ...\n   def create\n+    user = User.new(user_params)\n+    if user.save\n # # 5\n+      render json: user\n+    else\n # # 6\n+      render json: { errors: user.errors.full_messages }, status: :unprocessable_entity\n+    end\n   end\n\n```\n\n**5**: When you use `render :json`, Rails searches for a serializer for the object and use it if it is available. In this case, Rails will look for a serializer named `UserSerializer` and use it to serialize `user`.\n\n**6**: If saving the user fails (due to a missing user name or password), return the error messages and a [422 status code](http://www.restpatterns.org/HTTP_Status_Codes/422_-_Unprocessable_Entity) indicating that the data sent was un-processable.\n\n### Test From Command Line\n\nTest `create` from the command line:\n\n```bash(Terminal)\n$ curl -u username:password -d \"user[username]=Sterling\" -d \"user[password]=Archer\" http://localhost:3000/api/users/\n```\n\nOnce user creation is working, implement list creation. To test list creation, use `curl` from the command line to create a new list for the first user:\n\n```bash(Terminal)\n$ curl -u username:password -d \"list[name]=Things to do today\" -d \"list[permissions]=private\" http://localhost:3000/api/users/1/lists\n```\n\nOnce list creation is working, implement item creation. To test item creation, use curl from the command line to create a new item for the first list:\n\n```bash(Terminal)\n$ curl -u username:password -d \"item[description]=Dance if you want to\" http://localhost:3000/api/lists/1/items\n```\n\n### Test Your Code\n\n- Modify the curl request for creating users to send a request without a **password**. Confirm an error message is returned, and a user is not created.\n- Modify the curl request for creating users to send a request without a **username**. Confirm an error message is returned, and a user is not created.\n- Modify the curl request for creating lists to send a request without a **name**. Confirm an error message is returned, and a list is not created.\n- Modify the curl request for creating items to send a request without a **description**. Confirm an error message is returned, and an item is not created.",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 125,
          "active_index": 4,
          "checkpoint_type": "normal",
          "position": 4,
          "points": 1,
          "ref": "4587d499-3c8b-4559-a418-eaabaad89472|0"
        },
        {
          "id": 1708,
          "name": "Destroy Lists",
          "summary": "Remove users and lists from the command line",
          "body": ">As a user, I want to **remove** users and lists from the command line<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\n### Modify the Users Controller\n\nAdd a `destroy` method to `UsersController`:\n\n```ruby(app/controllers/api/users_controller.rb)\n class Api::UsersController < ApiController\n   ...\n+  def destroy\n+    begin\n+      user = User.find(params[:id])\n+      user.destroy\n# #1\n+      render json: {}, status: :no_content\n+    rescue ActiveRecord::RecordNotFound\n+      render :json => {}, :status => :not_found\n+    end\n+  end\n   ...\n end\n```\n\n**1**: Return HTTP 204 No Content to indicate the server successfully processed the request but is not returning any content.\n\nImplement list deletion as well.\n\n### Test Your Code\n\n- Test `User` deletion from the command line:\n\n  ```bash(Terminal)\n  $ curl -u username:password -X DELETE http://localhost:3000/api/users/1/\n  ```\n\n- Test `List` deletion from the command line:\n\n  ```bash(Terminal)\n  $ curl -u username:password -X DELETE http://localhost:3000/api/users/1/lists/1\n  ```",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 125,
          "active_index": 5,
          "checkpoint_type": "normal",
          "position": 5,
          "points": 1,
          "ref": "48ab0169-0aa3-45b4-8d29-8f06d2b38a99|0"
        },
        {
          "id": 1709,
          "name": "Update Lists and Items",
          "summary": "Update list and item attributes from the command line",
          "body": "<!-- { ids:[1709], name:'Update Lists and Items', summary:'Update list and item attributes from the command line' } -->\n>As a user, I want to **update** list and item attributes from the command line<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n### Controllers\n\nAllow users to change a list's `permissions` attribute from the command line. Return an error if users try to set unsupported permissions. Add an `update` method to `ListsController`:\n\n```ruby(app/controllers/api/lists_controller.rb)\n class Api::ListsController < ApiController\n ...\n+def update\n+  list = List.find(params[:id])\n+  if list.update(list_params)\n+    render json: list\n+  else\n+    render json: { errors: list.errors.full_messages }, status: :unprocessable_entity\n+  end\n+end\n```\n\nAdd a validation for list permissions to reject updates with permissions that are not private, viewable, or open. Add the ability to update items and mark them as complete to `ItemsController`.\n\n### Test Your Code\n\n- Test list permission updates from the command line:\n\n  ```bash(Terminal)\n  $ curl -X PUT -u username:password -d \"list[permissions]=private\" http://localhost:3000/api/users/1/lists/1\n  ```\n\n- Test item completion from the command line:\n\n  ```bash(Terminal)\n  $ curl -X PUT -u username:password -d \"item[completed]=true\" http://localhost:3000/api/users/1/lists/1/items\n  ```",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 125,
          "active_index": 6,
          "checkpoint_type": "normal",
          "position": 6,
          "points": 1,
          "ref": "ca0354db-f484-4a1b-a63c-057ca39da2fa|0"
        },
        {
          "id": 1710,
          "name": "Extra Credit User Stories",
          "summary": "Open To-Do extra credit user stories",
          "body": "The goal of extra credit is to push you towards self-reliance, so outside of a brief description, we don't provide additional resources. If you finish your project early, challenge yourself to complete these additional user stories:\n\n| **User Story** | **Difficulty Rating** |\n| :-- | :-- |\n| As a developer, I want to add more robust authentication to the `authenticated?` method to prevent a user from modifying other users' lists or items | 2 |\n| As a developer, I want to add index methods to the API for lists and items | 2 |",
          "assignment": "Optional: Complete one or more of the extra credit user stories.",
          "roadmap_section_id": 125,
          "active_index": null,
          "checkpoint_type": "extra_credit",
          "position": null,
          "points": 0,
          "ref": "c49287dd-8a19-4e60-9ebb-7b69c9435d7e|0"
        }
      ]
    },
    {
      "id": 143,
      "roadmap_id": 31,
      "name": "The Alexa Project",
      "time_estimate": "40 - 160 Hours",
      "point_ratio": 0.6666666666666666,
      "description": "Build and publish voice-enabled skills for Amazon's Alexa platform.",
      "icon": null,
      "visible_to_students": true,
      "checkpoints": [
        {
          "id": 1909,
          "name": "Introduction",
          "summary": "Provide requirements and details for the Amazon Alexa project",
          "body": "<!-- { ids:[1909,1916], name:\"Introduction\", summary:\"Provide requirements and details for the Amazon Alexa project\" } -->\n\nBuild voice-enabled software for Amazon's Alexa platform.  \n\n## Overview\n\nThe Alexa Project incorporates the [Alexa Skills Kit](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit) (ASK), [Alexa Voice Service](https://developer.amazon.com/public/solutions/alexa/alexa-voice-service) (AVS), Amazon Web Services, and Node to create three voice-enabled applications.\n\nAmazon devices that implement AVS include the Amazon Echo, Echo Dot, and Amazon Tap. Any device with a mic, a speaker, and an Internet connection can be AVS-enabled. This is the most exciting thing about Alexa.\n\nA \"Skill\" is Amazon's term for voice-based software which uses the ASK, which is a collection of APIs, tools, and documentation for giving Alexa capabilities. Once certified by Amazon, Skills are available in the [Alexa app](http://alexa.amazon.com), where a user can enable them.\n\n[Watch this Superbowl Ad for Amazon's Echo](https://www.youtube.com/watch?v=qTz5jAn-XX8) to see Alexa in action.\n\nThe universe of AVS enabled devices is growing and includes:\n\n- [Amazon Echo](http://www.amazon.com/gp/product/B00X4WHP5E?ref_=ods_gw_d_h1_ha_dplr_JA2_wp)\n- [Amazon Dot](http://www.amazon.com/b/?node=14047587011)\n- [Amazon Tap](http://www.amazon.com/dp/B00VXS8E8S/ref=fs_ods_fs_aucc_fx)\n- [Amazon Fire TV](http://www.amazon.com/gp/product/B00U3FPN4U?keywords=fire%20tv&qid=1457447313&ref_=sr_1_1&sr=8-1)\n- [Invoxia Triby](http://invoxia.com/en/triby)\n\n## Project Checkpoints\n\n| **Checkpoint** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| Build a Trivia Skill | 2 |\n| Build a Fact Skill | 2 |\n| Design a Skill | 3 |\n| Develop a Skill | 3 |\n| Enhance your Skill with analytics and user testing | 2 |\n| Promote your Skill and Get Rewarded | 2 |",
          "assignment": "1. Read about the devices that leverage the Alexa Skills Kit. Write about a few use cases in a message to your mentor, and state your intent for starting this project. Discuss this project with your mentor to ensure you're aligned on your goals for completing it.\n\n2. [Watch Amazon's Introduction to Voice Design (free course)](https://www.udemy.com/amazonalexa/learn/) on Udemy. It provides an introduction to many terms and concepts that you'll encounter in the next few checkpoints.",
          "roadmap_section_id": 143,
          "active_index": 1,
          "checkpoint_type": "normal",
          "position": 1,
          "points": 1,
          "ref": "118756b4-e709-438e-952e-0da0655bc654|0"
        },
        {
          "id": 1910,
          "name": "Build a Trivia Skill",
          "summary": "Use a template to build and submit a Trivia Skill for certification",
          "body": "<!-- { ids:[1910,1917], name:\"Build a Trivia Skill\", summary:\"Use a template to build and submit a Trivia Skill for certification\" } -->\n\n## Goals\n\nConfigure your Alexa Skills Kit development and publishing environments, and publish your first Alexa Skill.\n\n## Configuration\n\nAlexa Skills development requires two accounts:\n\n1. [Create a free Amazon developer account (no credit card required)](https://developer.amazon.com/). Your developer name or company name will be displayed for your published Skills, so choose wisely!\n\n2. [Create an Amazon Web Services (AWS) account](https://aws.amazon.com/). AWS has a [free tier](https://aws.amazon.com/free/), and for the purposes of this project you should not exceed the resources that the free tier provides. To create an AWS account you will need to provide your credit card information, but as long as your software doesn't surpass the free tier's resources you will not be charged.\n\n    > [The AWS Free Tier](https://aws.amazon.com/lambda/pricing/) includes 1 million free requests and up to 3.2 million seconds of compute time per month with AWS Lambda.\n\n## Customize the Trivia Skill Sample\n[Read the guide for modifying the Trivia Skill](https://developer.amazon.com/appsandservices/community/post/TxDJWS16KUPVKO/New-Alexa-Skills-Kit-Template-Build-a-Trivia-Skill-in-under-an-Hour).\n\n1. [Clone the GitHub repository containing the sample code for this checkpoint](https://github.com/amzn/alexa-skills-kit-js/tree/master/samples/reindeerGames).\n\n2. Choose your trivia topic and modify `index.js` accordingly.\n\n3. Find and replace all strings to match your trivia topic and Skill name.\n\n    > Amazon enforces trademark and copyright ownerships laws. Consider this when you name your Skill, when you choose your invocation words, and in any place a user will interact with your Skill.\n\n4. Test your Skill using the testing tools/tab for the Skill in the Amazon Developer Portal.\n\n5. After testing your Skill, verify that it's spelled correctly.\n\n    > If your answers include dates, consider spelling them out like nineteen ninety-six. 1996 is spoken as one-thousand nine-hundred ninety-six. Numbers should not be assumed to be spoken as proper numbers. In other words, disambiguate numbers and always read them in context.\n\n## Additional Resources\n\nYou will need an icon for your Skills, and [Flat Icon](http://www.flaticon.com/) provides thousands of free icons that may be acceptable.\n\nSubscribe to the [ASK Developer Weekly](http://askdevweekly.com/) newsletter to discover new developments in the Alexa community. The newsletter is curated by [Mark Carpenter](https://www.bloc.io/mentors/mark-carpenter), a Bloc mentor.\n\nHere are a few published Alexa Skills that will help you develop context for new ideas:\n\n- [1 Minute Mindfulness Alexa Skill](https://github.com/unitygirl/1minuteMindfullnessSkill)\n- [Airport Status Skill](https://github.com/bignerdranch/alexa-airportinfo)\n- [An Alexa Skill to lookup FCC license information](https://github.com/maihde/alexa-qrz)",
          "assignment": "1. Create a new GitHub repo for this Trivia Skill and commit your work. Send your GitHub repo link to your mentor.\n\n2. Submit your completed Trivia Skill to the Amazon Developer Portal for certification.\n\n3. After submitting your Skill, you will receive an email from Amazon that indicates your Skill has been successfully submitted. Forward it to your mentor or copy and paste the message contents into a Bloc message to send to your mentor.\n\n4. Publish a blog post about your experience with the Alexa Trivia Skill sample and share it with your mentor. Write about what you found interesting, challenging, and questions you have about Alexa in general. (If you don't already have a blog, create one now or use a service like [Medium](https://medium.com/) to publish posts for this project.)",
          "roadmap_section_id": 143,
          "active_index": 2,
          "checkpoint_type": "normal",
          "position": 2,
          "points": 1,
          "ref": "5342f3a2-b750-495e-a244-af79ce8a9d4f|0"
        },
        {
          "id": 1911,
          "name": "Build a Fact Skill",
          "summary": "Use a template to build and submit a Fact Skill for certification",
          "body": "<!-- { ids:[1911,1918], name:\"Build a Fact Skill\", summary:\"Use a template to build and submit a Fact Skill for certification\" } -->\n\n## Goals\n\nPublish your second Alexa Skill.\n\n## Customize the Fact Skill Sample and Submit it for Certification\n\n1. [Download the sample code for this checkpoint](https://github.com/amzn/alexa-skills-kit-js/tree/master/samples/spaceGeek).\n\n2. Choose your fact topic – such as elephants, gun safety, or milkshakes – and modify `index.js` accordingly.\n\n3. Find and replace all strings to match your fact topic and Skill name.\n\n4. Add dozens of facts to make your Skill more compelling for users.\n\n5. Compress the two JavaScript source files into a zip file and upload the zip file to AWS Lambda.\n\n6. Test your Skill using the testing tools/tab for the Skill in the Amazon Developer Portal.\n\n7. After testing your Skill, verify that it's spelled correctly and submit it to the Amazon Developer Portal for certification.",
          "assignment": "1. Create a new GitHub repo for this Fact Skill and commit your work. Send your GitHub repo link to your mentor.\n\n2. Submit your completed Fact Skill to Amazon for certification.\n\n3. After submitting your Skill, you will receive an email from Amazon that indicates your Skill has been successfully submitted. Forward it to your mentor.\n\n4. Publish a blog post about your experience with the Alexa Fact Skill sample and share it with your mentor. Write about what you found interesting, challenging, and questions you have about Alexa in general.",
          "roadmap_section_id": 143,
          "active_index": 3,
          "checkpoint_type": "normal",
          "position": 3,
          "points": 1,
          "ref": "094f4724-5206-4b2e-8217-46a58353b12f|0"
        },
        {
          "id": 1912,
          "name": "Design a Skill",
          "summary": "Design a Skill of your own and create the voice interaction model",
          "body": "<!-- { ids:[1912,1919], name:\"Design a Skill\", summary:\"Design a Skill of your own and create the voice interaction model\" } -->\n\n## Goals\n\nDesign your third Alexa Skill and create its voice interaction plan.\n\n## Design Your Skill\n\nThe following resources will help you develop an Alexa Skill idea of your own.\n\n1. Review the [Getting Started with the Alexa Skills Kit](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/getting-started-guide) guide.\n\n2. Review the Alexa Skill Community's [current Skill listing](https://github.com/dale3h/alexa-skills-list) to learn the breadth and categories of Skills. _Per4mnce Software_, _Six Voices_, and _Mine_ are Alexa developers who are also in the Bloc community. Think about the Skill that you'd like to develop.\n\n  > If you have an Echo, Dot, or Tap device and have set it up, you can view the current Skill listing [on Amazon](http://alexa.amazon.com/#skills).\n\n3. Review each of the [samples from Amazon](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/using-the-alexa-skills-kit-samples). Install and test them to learn about the Alexa user experience.\n\n4. Browse the following ASK Developer resources to get a feel for the Alexa community:\n\n\t- [Ask Dev Weekly](http://askdevweekly.com/) archives\n\t- [DevPost's Alexa](http://devpost.com/software/built-with/amazon-alexa) gallery\n\t- [Love My Echo](http://lovemyecho.com/love-my-echo-skills/) skills listing\n\t- [Amazon Developer Forum](http://forums.developer.amazon.com/forums/forum.jspa?forumID=130) showcase section\n\t- [Hackster's Alexa community hub](https://www.hackster.io/amazon-alexa)\n\n5. Consider these free services to add features to your Skill:\n\t- [SSML](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/speech-synthesis-markup-language-ssml-reference) for playing sound files and synthesizing spoken language\n\n\t- [AWS Services](http://aws.amazon.com/) such as [S3](https://aws.amazon.com/s3/) for storing sounds, [DynamoDB](https://aws.amazon.com/dynamodb/) for data storage, and [SES](https://aws.amazon.com/ses/) for sending emails. Use of these AWS should fall within the [free-tier](https://aws.amazon.com/free/).\n\n\t- [MailGun](https://www.mailgun.com/) for sending emails via Alexa. MailGun has a free tier which will be sufficient for this project.\n\n6. You may choose to research paid API services based on your Skill's requirements. Should you choose to use a paid service, speak with your mentor about creating a donation site for your Skill. Amazon makes Skills free to all users so you will have to cover API costs, should you decide to purchase services to enhance your Skill. This is not a sustainable model, so you'll need to consider an option that makes your Skill financially viable. Two paid API services that may be interesting for Alexa are:\n\n\t- [Twilio](http://www.twilio.com/) for sending SMS and MMS messages.\n\t- [FlightStats flight tracker](https://developer.flightstats.com/api-docs/flightstatus/v2) for reporting details on flight arrivals, departures, and other flight information.\n\n> You can post questions for the Alexa Engineering Team via the [Amazon Developer Forum](http://forums.developer.amazon.com/forums/forum.jspa?forumID=130).",
          "assignment": "1. Design the voice interaction menu of your Skill, including:\n\n    - Intent Schema\n\n    - Custom Slot Types\n\n    - Built-In Slots\n\n    - Sample Utterances\n\n    - A Visual Representation of The Menu/Model\n\n    - Companion App Cards\n\n    The following resources will help you design the voice interaction menu:\n\n\t- [ASK Voice Design Handbook](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-voice-design-handbook)\n\n\t- [Defining the Voice Interface](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/defining-the-voice-interface)\n\n\t- [Voice Design Best Practices](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-voice-design-best-practices)\n\n\t- [Voice Design 101 On-Demand Webinar](https://goto.webcasts.com/starthere.jsp?ei=1087592)\n\n\t- [Amazon's Udemy Course on Voice Design](https://www.udemy.com/amazonalexa/)\n\n\t- [Use Vocal Apps' Alexa Designer tool to Design Your Visual Representation](https://www.alexa-designer.com/)\n\n2. Publish a blog post about your Alexa Skill idea.",
          "roadmap_section_id": 143,
          "active_index": 4,
          "checkpoint_type": "normal",
          "position": 4,
          "points": 1,
          "ref": "7412275d-6a90-4e04-b935-a8d156a8aecd|0"
        },
        {
          "id": 1913,
          "name": "Develop a Skill",
          "summary": "Learn Node, develop a Skill, and test its behavior",
          "body": "<!-- { ids:[1913,1920], name:\"Develop a Skill\", summary:\"Learn Node, develop a Skill, and test its behavior\" } -->\n\n## Goals\n\nLearn Node, develop your third Alexa Skill, and test its behavior.\n\n## Develop your Skill\n\n1. Alexa Skills are developed with Node. Node is a JavaScript runtime environment, and you need to [download and install it](https://nodejs.org/en/).\n2. After you have successfully downloaded and installed your Node environment, [learn the basics with this tutorial](https://github.com/workshopper/learnyounode).\n\n3. Configure and test these [ASK samples](https://github.com/amzn/alexa-skills-kit-js) to practice with Node.\n\n4. Review Alexa open-source projects to learn how other developers built their Skills. Here are a couple places to find Alexa open-source projects:\n\n    - [ASK Dev Weekly](http://askdevweekly.com/issues) contains links to repos of live skills.\n\n    - [git:logs](http://www.gitlogs.com/most_popular?topic=alexa%20skill) surfaces GitHub repos containing Alexa Skills.\n\n5. Review [ASK testing and debugging tips](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/testing-an-alexa-skill). Here are a couple specific tips that will help you debug your Skill:\n\n    - Use `console.log()`. The output of Lambda console.log statements are sent to the [AWS CloudWatch service](http://aws.amazon.com/documentation/cloudwatch/).\n\n    - The `event` object contains information that will help you understand what your Skill is doing. Print out event information using `console.log(event);`.",
          "assignment": "1. Create a GitHub repo for your Skill and push your code to it. Send the repo link to your mentor.\n\n2. Develop and test your Skill.",
          "roadmap_section_id": 143,
          "active_index": 5,
          "checkpoint_type": "normal",
          "position": 5,
          "points": 1,
          "ref": "afba1446-1268-43d8-9a26-c8124ebf2ff9|0"
        },
        {
          "id": 1914,
          "name": "Enhance Your Skill",
          "summary": "Add analytics to your Skill and test it thoroughly before submitting for certification",
          "body": "<!-- { ids:[1914,1921], name:\"Enhance Your Skill\", summary:\"Add analytics to your Skill and test it thoroughly before submitting for certification\" } -->\n\n## Goals\n\nAdd analytics to your Skill and test it thoroughly before submitting for certification.\n\n## Setup Analytics\n\n1. The Amazon Developer portal's tracking features provide basic Skill usage information. To understand the user's interaction with your Skill you will need to use Google Analytics, or some other tracking service.\n\n2. Add [Google Analytics](https://support.google.com/analytics/answer/1008015?hl=en) (GA) tracking to your Skill. Track each request, passing the details of the request to GA.\n\n3. This [Alexa Playground project](https://github.com/cameronhunter/alexa-playground) will provide you with an example for implementing GA with Alexa.\n\n## Conduct User Testing\n\n1. To improve the quality of your Skill, ask users to test it. Find at least three individuals who will let you monitor their Skill usage as they test your Skill.\n\n2. Leverage “settings” and “user permissions” in the developer portal to add test users to your Skill. Practice adding email addresses, assigning the developer role, and switching accounts. Add your mentor as a user.\n\n3. Tell your users what your Skill does and how to launch it, but do not explain how to use it. Observe their natural interaction with your Skill and note their reactions. Use the results to improve your Skill.\n\n4. The following resources will introduce you to user testing:\n\n    - [User Experience Testing Do's and Don'ts](http://blog.oboxthemes.com/the-dos-and-donts-of-user-experience-testing/)\n\n    - [13 ways to master UX testing for your startup](http://thenextweb.com/dd/2013/08/10/13-ways-to-master-ux-testing-for-your-startup/#gref)\n\n    - [UX Recipe - checklist and links](http://uxrecipe.github.io/)\n\n    - [UX checklist](http://uxchecklist.github.io/)\n\n    - [Usability 101: Introduction to Usability](https://www.nngroup.com/articles/usability-101-introduction-to-usability/)\n\n    - [Guide to Planning and Conducting Usability Tests](http://www.lib.washington.edu/usability/resources/guides/tests)\n\n## Resources\n\n- [Submission checklist](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-submission-checklist)\n\n- [Alexa Skills Kit Voice Interface and User Experience Testing](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-voice-interface-and-user-experience-testing)",
          "assignment": "1. Push the latest changes for your Skill to your GitHub repo.\n\n2. Submit your completed Skill to Amazon for certification.\n\n3. After submitting your Skill, you will receive an email from Amazon that indicates your Skill has been successfully submitted. Forward it to your mentor.\n\n4. Send your mentor a message that describes your user testing experience and how it changed your Skill. Include a screenshot of a report from your GA account that shows your Skill usage during user testing.",
          "roadmap_section_id": 143,
          "active_index": 6,
          "checkpoint_type": "normal",
          "position": 6,
          "points": 1,
          "ref": "14ce0171-40eb-49e0-8683-01c05eafc41b|0"
        },
        {
          "id": 1915,
          "name": "Final Steps",
          "summary": "Submit information about your Skill and receive a free Amazon Echo",
          "body": "<!-- { ids:[1915,1922], name:\"Final Steps\", summary:\"Submit information about your Skill and receive a free Amazon Echo\" } -->\n\n## Goals\n\nClaim your Echo, share your success, and request an interview with the Alexa team at Amazon.\n\n## Claim Your Echo\n\nAmazon is offering a free Amazon Echo device to the first 100 members of the Bloc.io community who complete the Alexa Project on Bloc.io and publish three Alexa skills between March 18, 2016 and June 30, 2016. To be eligible for this promotion, get your Alexa skills certified and fill out [this form](http://www.amazon.com/gp/html-forms-controller/Bloc_Echo_Promotion).\n\nIf you comply with the terms, the Alexa team will ship you an Echo device within 6 weeks of the submission of your form. See the complete terms and conditions of this offer [here](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/content/alexa-developer-skill-promotion-bloc).\n\n## Share Your Experience\n\nBlog about your experience with Alexa Skill development, and share it in the following channels:\n\n- Mention it in the [Showcase section of the Amazon Developer Forums](http://forums.developer.amazon.com/forums/forum.jspa?forumID=130).\n\n- Ask [@lovemyecho](https://twitter.com/lovemyecho) for a feature in her daily blog\n\n- Mention it to [@AlexaDevs](https://twitter.com/alexadevs).\n\n- Share it with the [Alexa team](mailto:alexa-dev-communications@amazon.com) for a potential Skill spotlight in their developer newsletter.\n\n- Send your Skill to the [ASK Dev Weekly](mailto:marktc+askdev@gmail.com) and request a  mention in their newsletter.",
          "assignment": "If you enjoyed your experience developing Alexa Skills, speak with your mentor about interviewing for the [Alexa team at Amazon](https://www.amazon.jobs/en/search?base_query=alexa). Your mentor and the Career Support team will help you with the application process.",
          "roadmap_section_id": 143,
          "active_index": 7,
          "checkpoint_type": "normal",
          "position": 7,
          "points": 1,
          "ref": "2a198754-b91d-4cad-9f19-fc1769859ad3|0"
        }
      ]
    },
    {
      "id": 142,
      "roadmap_id": 31,
      "name": "Kele API Client",
      "time_estimate": "40-160 Hours",
      "point_ratio": 0.6666666666666666,
      "description": "Build a Ruby Gem API client to access and use the Bloc API",
      "icon": null,
      "visible_to_students": true,
      "checkpoints": [
        {
          "id": 1893,
          "name": "Intro",
          "summary": "Introduction to the Kele API Client Project",
          "body": "Build Kele, a Ruby Gem API client to access the Bloc API.\n\n## Use Case\nBloc's API provides an external facing [JSON Web Token](https://jwt.io/) authorized gateway to the Bloc application.  You can access it via [cURL](https://curl.haxx.se/), but an API client can manage the low-level details of making requests and handling responses. Build the [Kele](https://en.wikipedia.org/wiki/Kele_Okereke) API Client to provide easy access to and use of [the student endpoints](http://docs.blocapi.apiary.io/) of Bloc's API.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a user, I want to initialize and authorize `Kele` with a Bloc username and password | 3 |\n| As a user, I want to retrieve the current user as a JSON blob | 2 |\n| As a user, I want to retrieve a list of my mentor's availability | 3 |\n| As a user, I want to retrieve roadmaps and checkpoints | 2 |\n| As a user, I want to retrieve a list of my messages, respond to an existing message, and create a new message thread | 4 |\n| As a user, I want to submit checkpoint assignments | 3 |",
          "assignment": "Acquaint yourself with the user stories for this project.\n\nMessage your mentor, letting him/her know that you’ve chosen to work on this project.",
          "roadmap_section_id": 142,
          "active_index": 1,
          "checkpoint_type": "normal",
          "position": 1,
          "points": 1,
          "ref": "3e9388a0-fc68-456e-acf2-b0379382a2a0|0"
        },
        {
          "id": 1895,
          "name": "Initialize and authorize KeleClient",
          "summary": "Initialize and authorize KeleClient with Bloc username and password",
          "body": ">As a user, I want to initialize and authorize `Kele` with a Bloc username and password<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n## Creating the `Kele` Gem\n\nCreate an empty repository on GitHub named `Kele` and clone it locally.\n\n> You should do this from memory, but see [Git Checkpoint Workflow](https://www.bloc.io/resources/git-checkpoint-workflow) if you need a refresher.\n\nCreating this project as a [RubyGem](http://guides.rubygems.org/) allows us to integrate `Kele` with other software.\n\nAt a minimum, a RubyGem needs a `.gemspec` file (typically `project_name.gemspec`) and one Ruby file (typically `lib/project_name.rb`).\n\nA gemspec defines metadata about your RubyGem like its name, version, and author.\n\nCreate `kele.gemspec`:\n\n```ruby\n+Gem::Specification.new do |s|\n+  s.name          = 'kele'\n+  s.version       = '0.0.1'\n+  s.date          = '2015-12-02'\n+  s.summary       = 'Kele API Client'\n+  s.description   = 'A client for the Bloc API'\n+  s.authors       = ['Hannah McExample']\n+  s.email         = 'hannah@example.com'\n+  s.files         = `git ls-files`.split($/)\n+  s.require_paths = [\"lib\"]\n+  s.homepage      =\n+    'http://rubygems.org/gems/kele'\n+  s.license       = 'MIT'\n+  s.add_runtime_dependency 'httparty', '~> 0.13'\n+end\n```\n\nReplace `date`, `authors`, and `email` with your own information.\n\n`files` is an array of files included in the gem. You could list them individually (like `s.files = ['lib/kele.rb']`) but we're using [`git ls-files`](https://git-scm.com/docs/git-ls-files), which prints a list of files in your Git repository.\n\n> A gemspec is called from a Ruby method — anything you can do in Ruby you can do in a gemspec.\n\nWe added a `httparty` dependency using `add_runtime_dependency`. This instructs `bundle` to install [httparty](https://github.com/jnunemaker/httparty), which provides a programmatic Ruby interface to make HTTP requests.\n\n> The string `'~> 0.13'` indicates we want the latest possible version in the 0.13 minor range. That is, if we have version 0.13.6 and version 0.13.7 comes out, we want to use that, but we don't want version 0.14. This is called [semantic versioning](http://guides.rubygems.org/patterns/#semantic-versioning).\n\nCreate `kele.rb`:\n\n```bash\n$ md lib\n$ touch lib/kele.rb\n```\n\nWe place the code for a gem within the `lib` directory. Gem conventions are to have one Ruby file with the same name as the gem (in this case `kele.rb`), which gets loaded when we call `require 'kele'`.\n\n## Initialization\n\nWith the skeleton of `Kele` created, add an initialize method that creates a new `Kele` client authorized with a username and password. The client can be used as follows:\n\n```bash\n$ irb\n>> require 'kele'\n=> true\n>> Kele.new(\"jane@gmail.com\", \"abc123\")\n```\n\nIn `initialize`, populate two instance variables:\n  * Bloc's base API URL: `https://www.bloc.io/api/v1`\n  * The user's authentication token, which can be retrieved from [the sessions endpoint](http://docs.blocapi.apiary.io/#reference/0/sessions/retreive-auth-token).\n\nTo retrieve the authentication token `include HTTParty` in `Kele`, use `self.class.post`, and pass in the sessions URL along with username and password. See the [HTTParty repository](https://github.com/jnunemaker/httparty/tree/master/examples) for examples.\n\n### Test Your Code\nTest initializing `Kele` in IRB to ensure that:\n\n- You retrieve and store the authentication token when passing valid credentials\n- An appropriate error is raised when passing invalid credentials",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 142,
          "active_index": 2,
          "checkpoint_type": "normal",
          "position": 2,
          "points": 1,
          "ref": "7eadc804-0c43-49bc-9902-c071e0d811c5|0"
        },
        {
          "id": 1897,
          "name": "Retrieve Users",
          "summary": "Retrieve the current user as a JSON blob",
          "body": ">As a user, I want to retrieve the current user as a JSON blob<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\n## Retrieving the Current User\n\nRetrieve the [current user](http://docs.blocapi.apiary.io/#reference/0/credentials/current-user) from the Bloc API by defining `get_me` which can be used as follows:\n\n```bash\n$ irb\n>> require 'kele'\n=> true\n>> kele_client = Kele.new(\"jane@gmail.com\", \"abc123\")\n>> kele_client.get_me\n```\n\nPass `auth_token` to the request to properly authenticate against the Bloc API. Pass the `auth_token` via HTTParty's `headers` option:\n\n```ruby\nresponse = self.class.get(url, headers: { \"authorization\" => @auth_token })\n```\n\nHTTParty requests return a [response object](http://www.rubydoc.info/github/jnunemaker/httparty/HTTParty/Response) with the data accessible via the [#body method](http://www.rubydoc.info/github/jnunemaker/httparty/HTTParty/Response#body-instance_method). This information is a JSON String. Add the [json gem](https://rubygems.org/gems/json/versions/1.8.3) as a runtime dependency and use the [#parse method](http://flori.github.io/json/doc/index.html) to convert the user data to a Ruby hash.\n\n### Test Your Code\nTest `Kele` in IRB to ensure that:\n\n- You retrieve your own user data\n- You convert your user data to a Ruby hash",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 142,
          "active_index": 3,
          "checkpoint_type": "normal",
          "position": 3,
          "points": 1,
          "ref": "d734ac5c-fd62-466f-85f6-4eebcec6b9c7|0"
        },
        {
          "id": 1899,
          "name": "Mentor Availability",
          "summary": "Retrieve mentor availability",
          "body": ">As a user, I want to retrieve a list of my mentor's availability\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n## Body\nRetrieve a list of [a mentor's available time slots](http://docs.blocapi.apiary.io/#reference/0/mentors/student-availability) for the current user from the Bloc API by defining `get_mentor_availability` which can be used as follows:\n\n```bash\n$ irb\n>> require 'kele'\n=> true\n>> kele_client = Kele.new(\"jane@gmail.com\", \"abc123\")\n>> mentor_id = 99\n>> kele_client.get_mentor_availability(mentor_id)\n```\n\nYou will need to include the mentor id in the URL. Find your mentor's id in the user data returned by `get_me`. Pass `auth_token` to the request to properly authenticate against the Bloc API.\n\nConvert the JSON response to a Ruby array.\n\n### Test Your Code\nTest `Kele` in IRB to ensure that:\n\n- You retrieve a list of your mentor's available time slots\n- You convert your mentor's available time slots data to a Ruby array",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 142,
          "active_index": 4,
          "checkpoint_type": "normal",
          "position": 4,
          "points": 1,
          "ref": "8c989671-f1b0-4dc1-afd2-2a1ecf09d126|0"
        },
        {
          "id": 1901,
          "name": "Roadmaps and Checkpoints",
          "summary": "Retrieve roadmaps and checkpoints",
          "body": ">As a user, I want to retrieve roadmaps and checkpoints\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n## Retrieving Roadmaps\n\nRetrieve [roadmaps](http://docs.blocapi.apiary.io/#reference/0/roadmaps/show-roadmap) with their associated sections and checkpoints by defining `get_roadmap` to be used as follows:\n\n```bash\n$ irb\n>> require 'kele'\n=> true\n>> kele_client = Kele.new(\"jane@gmail.com\", \"abc123\")\n>> roadmap_id = 99\n>> kele_client.get_roadmap(roadmap_id)\n```\n\nThe id for the Rails roadmaps is 31.\n\nConvert the JSON response to Ruby.\n\n## Retrieving Checkpoints\n\nRetrieve [checkpoints](http://docs.blocapi.apiary.io/#reference/0/checkpoints/show-checkpoint) with their associated body and assignment by defining `get_checkpoint` to be used as follows:\n\n```bash\n$ irb\n>> require 'kele'\n=> true\n>> kele_client = Kele.new(\"jane@gmail.com\", \"abc123\")\n>> checkpoint_id = 99\n>> kele_client.get_checkpoint(checkpoint_id)\n```\n\nRetrieve checkpoint ids from the `get_roadmap` response.\n\n## Refactor Roadmaps and Checkpoints\n\n`lib/kele.rb` is starting to get cluttered. Clean it up by moving `get_roadmap` and `get_checkpoint` into a separate `lib/roadmap` module. `require` the file in `lib/kele.rb` and `include` the module.\n\n### Test Your Code\nTest `Kele` in IRB to ensure that you can:\n\n- Retrieve a roadmap and its associated sections and checkpoints\n- Retrieve a checkpoint and its associated body and assignment\n- Continue to use `get_roadmap` and `get_checkpoint` after moving them into a module",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 142,
          "active_index": 5,
          "checkpoint_type": "normal",
          "position": 5,
          "points": 1,
          "ref": "30ea583f-840e-4c77-8651-20cfdc6411e0|0"
        },
        {
          "id": 1903,
          "name": "Messaging",
          "summary": "Retrieve and send messages",
          "body": "<!-- { ids:[1902, 1903], name:'Messaging', summary:'Retrieve and send messages' } -->\n>As a user, I want to retrieve a list of my messages, respond to an existing message, and create a new message thread<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 4\n\n## Retrieving Messages\n\nOn the Bloc platform all messages belong to a message thread. Retrieve [all message threads](http://docs.blocapi.apiary.io/#reference/0/message-threads/all-messages) for the current user by defining `get_messages`. The all message threads endpoint returns message threads paginated with 10 threads per page and a total count of all threads. Either return a specified page or retrieve all message threads through multiple calls to the endpoint. You'll need to make multiple calls to return all threads because the Bloc API doesn't support retrieving all threads without pagination.\n\n```bash\n$ irb\n>> require 'kele'\n=> true\n>> kele_client = Kele.new(\"Hannah.McExample@gmail.com\", \"abc123\")\n>> kele_client.get_messages(1) # returns the first page of message threads\n>> kele_client.get_messages # returns all message threads\n```\n\nConvert the JSON responses to native Ruby objects.\n\n## Creating Messages\n\nAdd a `create_message` method that creates a new message on the Bloc platform. Use the [create message endpoint](http://docs.blocapi.apiary.io/#reference/0/messages/create-message) to create a new message and thread.\n\n### Test Your Code\nTest `Kele` in IRB to ensure that you can:\n\n- Retrieve all messages for the current user\n- Create a new message and thread",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 142,
          "active_index": 6,
          "checkpoint_type": "normal",
          "position": 6,
          "points": 1,
          "ref": "1a4c2ec8-ae80-4ded-8f99-2ece114f5f84|0"
        },
        {
          "id": 1905,
          "name": "Checkpoint Submission",
          "summary": "Submit Checkpoint Assignments",
          "body": ">As a user, I want to submit checkpoint assignments\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\n## Checkpoint Submissions\n\nAdd a `create_submission` method that creates a new Bloc checkpoint submission on the Bloc platform. Use the [create checkpoint submission endpoint](http://docs.blocapi.apiary.io/#reference/0/checkpoint-submissions/create) to create a new submission. Checkpoint submissions are tied to your account via an `enrollment_id`, which is included in your user information. Implement `create_submission` so that it can be used as follows:\n\n```bash\n$ irb\n>> require 'kele'\n=> true\n>> kele_client = Kele.new(\"Hannah.McExample@gmail.com\", \"abc123\")\n>> kele_client.create_submission(checkpoint_id, assignment_branch, assignment_commit_link, comment)\n```\n\n### Test Your Code\nTest `Kele` in IRB to ensure that you can:\n\n- Create a new checkpoint submission",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 142,
          "active_index": 7,
          "checkpoint_type": "normal",
          "position": 7,
          "points": 1,
          "ref": "0ee5b6ce-88bd-4704-92df-39779e31c5dc|0"
        },
        {
          "id": 1907,
          "name": "Extra Credit User Stories",
          "summary": "Kele Client extra credit user stories",
          "body": "The goal of extra credit is to push you towards self-reliance, so outside of a brief description, we don't provide additional resources. If you finish your project early, challenge yourself to complete these additional user stories:\n\n| **User Story** | **Difficulty Rating** |\n| :-- | :-- |\n| As a developer, I want to test `Kele` using the [VCR gem](https://github.com/vcr/vcr) | 3 |\n| As a user, I want to [update existing checkpoint assignments](http://docs.blocapi.apiary.io/#reference/0/checkpoint-submissions/update) | 3 |",
          "assignment": "Optional: Complete one or more of the extra credit user stories.",
          "roadmap_section_id": 142,
          "active_index": null,
          "checkpoint_type": "extra_credit",
          "position": null,
          "points": 0,
          "ref": "a83ccaa6-6d42-4405-bf67-824a80b8171f|0"
        }
      ]
    },
    {
      "id": 126,
      "roadmap_id": 31,
      "name": "Capstone Project",
      "time_estimate": "40-160 Hours",
      "point_ratio": 0.6666666666666666,
      "description": "In this checkpoint you'll start a new application of your choice.",
      "icon": "Capstone",
      "visible_to_students": true,
      "checkpoints": [
        {
          "id": 1711,
          "name": "Introduction",
          "summary": "Read about your Capstone project.",
          "body": "> “[He] was a dreamer, a thinker, a speculative philosopher… or, as his wife would have it, an idiot.”\r\n>\r\n> \\- Douglas Adams, *The Hitchhiker's Guide to the Galaxy* (Chapter 11)\r\n\r\nIt's time to build your dream app. Your capstone project is critical to your success as a developer. Whether you are starting a business, joining a company, or contracting your programming skills, your ability to write exceptional applications is the most important qualification. Your Capstone will showcase this ability.\r\n\r\n## About the Capstone Project\r\n\r\nUnlike the other projects you've completed, you'll determine the features, scope, and pace of this project and design its appearance. Like the other projects, you'll work with your mentor to build it.\r\n\r\nYou'll follow this structure as you work through your Capstone app:\r\n\r\n1. Define requirements and write user stories\r\n2. Create mockups, wireframes and/or sketches\r\n3. For each user story:\r\n    1. Write TDD specs *(Optional)*\r\n    2. Implement the feature\r\n    3. Test\r\n4. Publish\r\n\r\n## Your Mentor\r\n\r\nDuring the Capstone project, your relationship with your Mentor may change. Each Mentor has their own style, but they'll typically play one of two roles:\r\n\r\n1. **Senior Developer.** Your mentor will act as a senior developer, helping you with tough technical challenges, pair programming, and reviewing your pull requests.\r\n2. **Project Manager.** Your mentor will act as a project manager, helping you focus on critical features, narrowing their scope, and partnering with you to make sure you're on schedule.\r\n\r\n## Strategies for Winners\r\n\r\nStudents who complete successful Capstone projects usually follow these techniques:\r\n\r\n- Use a different Git feature branch for each user story.\r\n\r\n    > \"Friends don't let friends commit code to `master`.\"\r\n    >\r\n    > \\- Plato\r\n\r\n- Use GitHub features like Issues and Pull Requests to stay organized. We'll discuss GitHub Issues later.\r\n- Keep in touch with your mentor at all times. Send brief e-mail updates at the end of every day indicating your progress. Your mentor should never wonder what your progress is.\r\n- Don't get overwhelmed. Write code even if you aren't sure it'll work. Stay moving.\r\n- Use help and collaboration tools in the [Bloc Ecosystem](https://www.bloc.io/resources/ecosystem).",
          "assignment": "- Come up with three to five Capstone project ideas.\r\n- Estimate how long they will take you to write.\r\n- Double your initial time estimates, because they are probably wrong.\r\n- Send your ideas and doubled estimates to your mentor, with your favorite ideas at the top.\r\n\r\n> We'll make more accurate time estimates later, when we break your idea up into user stories.\r\n\r\nYour mentor will write back with feedback and suggestions for your ideas. **Don't wait for your mentor's response** to start working on your favorite idea.",
          "roadmap_section_id": 126,
          "active_index": 1,
          "checkpoint_type": "normal",
          "position": 1,
          "points": 1,
          "ref": "6527b13a-290f-410e-ac4f-56d43d7cef08|0"
        },
        {
          "id": 1712,
          "name": "Define Requirements and Write User Stories",
          "summary": "Write your own user stories",
          "body": "In this checkpoint, you'll write a set of steps you'll follow to implement your Capstone project idea.\n\n## About User Stories\n\nYou've seen user stories in prior projects, and now you'll get a chance to write them.\n\nUser stories look like this:\n\n> As a **user type**, I want to **action** so I can  **reason**.\n\nHere are a few examples:\n\n- As a **user**, I want to **compare local prices on churros** so I can **maximize my churro consumption while minimizing my spending**.\n- As **a user with a saved payment method**, I want to **order a churro for delivery** so I can **eat churros quickly**.\n- As **a customer service agent**, I want to **receive an email if a customer eats more than 25 churros in a one-hour period** so I can **send them an ambulance**.\n\nA user story should start a discussion. This discussion can be with your Mentor, a friend, or even [a rubber duck](http://en.wikipedia.org/wiki/Rubber_duck_debugging). Take notes during each discussion and consider how you would implement the story.\n\n- What UI elements will you need?\n- How will you obtain the necessary data?\n\n## Other Issue Types\n\nIn addition to user stories, you'll need to write issue descriptions that represent only part of a feature. These are usually either **technical issues** or **bugs**. Some examples:\n\n- Write a class that connects to the Google Maps API.\n- Add a slider to adjust gameplay difficulty.\n- [BUG] When viewing on a smartphone in landscape mode, the menu button is cut off.\n\nIn the third example, \"[BUG]\" is a type of *label*. We'll discuss that in the next section.\n\n> See [Writing Bug Reports](https://www.bloc.io/resources/writing-bug-reports) to learn why and how to write bug reports.\n\n## GitHub Issues\n\nGitHub has a feature called Issues, which lets you track your app's tasks and bugs.\n\nGitHub's [Mastering Issues](https://guides.github.com/features/issues/) document describes it in detail. You don't need to read the entire document, but definitely read these two sections:\n\n- Intro\n- Milestones, Labels & Assignees\n\nIn the second section, note how you can organize issues by assigning labels. For example, you might create a \"Bug\" label to assign to all bug issues.\n\nIn the assignment for this checkpoint, you'll create issues for every step of your project.",
          "assignment": "- If you skimmed over GitHub's [Mastering Issues](https://guides.github.com/features/issues/) document, go back and read the \"Intro\" and \"Milestones, Labels & Assignees\" sections.\n- Write a list of issues using the following guidelines.\n    - Open a blank document in a word processor.\n    - Write **fifteen** user stories that you want your application to fulfill.\n    - Under each story, write a list of technical tasks required to complete it. Limit their focus to non-UI aspects: models, data, networking, etc.\n    - Review the list and assign each story a [difficulty rating](https://www.bloc.io/resources/projects-difficulty-ratings). Compare the amount of time remaining in your program and the expected time commitment required to complete your Capstone project.\n\n      > If the commitment exceeds the time you have left, **remove unnecessary stories**. For example, Facebook did not _launch_ with Events. That feature came much later. As a rule of thumb, your project should require approximately 80 hours of time to complete.\n- Create a new GitHub project. See [Git Checkpoint Workflow: Create a Repository](https://www.bloc.io/resources/git-checkpoint-workflow#create-a-repository) for details.\n- Create a milestone for each user story.\n    - Create a technical issue for each task you defined earlier. Assign each to its respective milestone (user story).\n- Send your mentor a link to your GitHub repository. Your mentor will give you feedback on your writing and the feasibility of completing this project.",
          "roadmap_section_id": 126,
          "active_index": 2,
          "checkpoint_type": "normal",
          "position": 2,
          "points": 1,
          "ref": "8dfec940-b252-4387-a4ea-79108e9a6ac9|0"
        },
        {
          "id": 1713,
          "name": "Create Wireframes and Mockups",
          "summary": "Design your Capstone's user interface",
          "body": "> \"As far as the customer is concerned, the interface *is* the product.\"\n>\n> \\- Jef Raskin, human–computer interface expert\n\nFor each user story you should have an idea of the user interface. In most professional developer jobs, a designer would do this for you. That said, it's a good idea to have a sense of what you're building before you build it.\n\n> [What is the difference between wireframes and mockups?](http://graphicdesign.stackexchange.com/a/30861/44879)\n\n## Common Design Tools\n\nMost professional designers use Adobe's Photoshop and Illustrator tools to create their designs.\n\nHere are some less expensive tools you may want to consider:\n\n- Pencil and paper\n- [Google Drawings](https://docs.google.com/drawings/)\n- [Keynote for Mac](https://www.apple.com/mac/keynote/) (free with newer Macs in the App Store)\n- [Pixelmator for Mac](http://www.pixelmator.com/mac/) ($30)\n- [Balsamiq](https://balsamiq.com/) ($89; free trial available)\n- [Sketch for Mac](http://bohemiancoding.com/sketch/) ($99; free trial available)\n- [WireframeSketcher for Mac, Windows, and Linux](http://wireframesketcher.com/) ($99; free trial available)\n\n\n## Icons\n\nMost apps can benefit from icons, which make actions more intuitive and memorable.\n\nHere are some great icon resources, both free and inexpensive:\n\n- [Icons8](https://icons8.com/)\n- [Picons](https://picons.me/)\n- [The Noun Project](https://thenounproject.com/)\n- [Font Awesome](http://fortawesome.github.io/Font-Awesome/) (icons in a font)\n- [Ionicons](http://ionicons.com/)\n\n## Resources for Learning More\n\nAn introduction to UX design is outside the scope of this program. If you're interested, you can get a solid foundation through these resources:\n\n- [Don’t Make Me Think by Steve Krug](http://www.amazon.com/dp/0321965515/)\n- [UXPin Free Books](http://www.uxpin.com/knowledge.html)\n- [The Hipper Element by Joel Marsh](http://thehipperelement.com/post/75476711614/ux-crash-course-31-fundamentals)\n- [Smashing Magazine](http://www.smashingmagazine.com/2012/08/29/beyond-wireframing-real-life-ux-design-process/)\n- [Hack Design](https://hackdesign.org/)",
          "assignment": "- For each user story, create at least one wireframe.\n- Optionally, create fully-rendered mockups for your user stories.\n- Organize image resources you think you'll need, like button icons.\n\n    > Remember to obtain images to support normal and HiDPI (or \"Retina\") displays.\n\n- Attach the wireframe and icon images to their respective issues on GitHub.\n- Send your mentor a link to your updated issues.",
          "roadmap_section_id": 126,
          "active_index": 3,
          "checkpoint_type": "normal",
          "position": 3,
          "points": 1,
          "ref": "b283cbd2-002a-4aae-91e1-8f29ae456ac4|0"
        },
        {
          "id": 1714,
          "name": "Implement Each User Story",
          "summary": "Build your Capstone project.",
          "body": "> \"I put my heart and my soul into my work, and have lost my mind in the process.\"\r\n>\r\n> \\- Vincent Van Gogh, Artist, [The Potato Eaters](http://www.vangoghgallery.com/painting/potatoindex.html)\r\n\r\nYou've planned your project to the best of your ability. Now it's time to write some code.\r\n\r\nHere are the steps you'll follow:\r\n\r\n1. Write TDD specs *(Optional)*\r\n2. Implement the feature\r\n3. Test\r\n\r\nPick a user story to work on.\r\n\r\n### Write TDD Specs (Optional)\r\n\r\nIn the Foundation section, you learned about Test-Driven Development, a process in which you write automated test scripts to test your code.\r\n\r\nIf you choose to implement this section, begin by writing at least one test for every method that's needed to implement the story you're working on.\r\n\r\n### Implement the Feature\r\n\r\nBefore working on your feature's user interface, complete the issues that will relate to your app's models and controllers.\r\n\r\n- How will your app authorize and authenticate users?\r\n- How will your app get data?\r\n- How will your app save data the user creates?\r\n- How will your app need to manipulate the data?\r\n\r\nComplete as much of the data work for this user story as possible before beginning the views. This will make it easier to build and troubleshoot your views.\r\n\r\nThen, use your mockups and wireframes to build views. Connect the views to the data sources you created in the earlier section.\r\n\r\n### Test\r\n\r\nOnce you've implemented a story, test its features to find bugs. [Write bug reports](https://www.bloc.io/resources/writing-bug-reports) for any bugs you find.\r\n\r\nIf you're using TDD, run your automated test suite. Make sure all tests pass.\r\n\r\n## Closing GitHub Issues\r\n\r\nEvery GitHub issue you work on should be a separate feature branch. As your mentor approves pull requests to be merged into `master`, make sure the corresponding issues are closed.\r\n\r\n> ### Pro Tip\r\n>\r\n> You can [close issues via Pull Requests](https://github.com/blog/1506-closing-issues-via-pull-requests) by writing \"closes #&lt;issue number&gt;\" in either the body of your pull request, or [in your commit message](https://help.github.com/articles/closing-issues-via-commit-messages/).",
          "assignment": "Complete all of the user stories for your Capstone project.",
          "roadmap_section_id": 126,
          "active_index": 4,
          "checkpoint_type": "normal",
          "position": 4,
          "points": 1,
          "ref": "276f48fb-46d4-4a3b-b46f-2630ec0a8fef|0"
        },
        {
          "id": 1715,
          "name": "Publish",
          "summary": "Deploy and promote your application",
          "body": "## Publish\n\n> \"It's the final countdown. The final countdown.\"\n>\n> \\- Europe, [The Final Countdown](http://www.youtube.com/watch?v=9jK-NcRmVcw)\n\nIt's time to share your creation with the world.\n\n## Polish\n\nBefore you submit your app, make sure everything is ready. Here are some things you might want to check:\n\n- Remove `puts` or `print` statements (or comment them out).\n- Make sure all specs pass.\n- Update your master branch in your GitHub repo.",
          "assignment": "- Push your app to Heroku.\n- Share your project with us. Include your GitHub repo and production URLs in an email to prachi@bloc.io and kelly@bloc.io with the subject line \"My capstone is complete!\".\n- Add your app to your LinkedIn profile [as a new project](https://help.linkedin.com/app/answers/detail/a_id/43524/~/adding-and-editing-projects-on-your-profile).\n- Write a blog or [Medium](http://www.medium.com) post about your app.\n- Add your app to your portfolio site.\n- Post your app in [The Bloc Hacker Club](https://www.facebook.com/groups/blocalumni/).",
          "roadmap_section_id": 126,
          "active_index": 5,
          "checkpoint_type": "normal",
          "position": 5,
          "points": 1,
          "ref": "0da9ed32-2f45-46af-abeb-a422ff54dd5c|0"
        }
      ]
    },
    {
      "id": 127,
      "roadmap_id": 31,
      "name": "Portfolio",
      "time_estimate": "20-40 Hours",
      "point_ratio": 0,
      "description": "Build a personal portfolio and blog to showcase your projects.",
      "icon": "Portfolio",
      "visible_to_students": true,
      "checkpoints": [
        {
          "id": 1716,
          "name": "Introduction",
          "summary": "Introduction",
          "body": "Build a personal portfolio and blog to showcase your projects that you can present to potential clients and employers.\n\n## Use Case\n\nA personal portfolio and blog allows you to share your work and stories with potential employers. Writing project case studies help employers understand your development and implementation processes. Blogging helps you display your personality and insight.\n\n## User Stories\n\n| **User Story** | [**Difficulty Rating**](https://www.bloc.io/resources/projects-difficulty-ratings) |\n| :-- | :-- |\n| As a developer, I want to **fork and clone** a Jekyll portfolio theme | 1 |\n| As a developer, I want to **write a case study** for each project I've completed | 4 |\n| As a developer, I want to **write blog posts** about my journey into development | 3 |\n| As a developer, I want to allow visitors to **contact me** | 1 |\n| As a developer, I want to track **visits and visitors** of my portfolio | 1 |\n| As a developer, I want to **deploy** my portfolio to GitHub Pages | 1 |\n| As a developer, I want to use **a custom domain name** for my portfolio | 2 |\n\nLater user stories often rely on the completion of the former, therefore, work on them in the order prescribed.\n\n## Implementation Examples\n\nBefore creating your own portfolio, you should view other examples to draw inspiration from.\n\n| **Portfolio** | **Explanation** |\n| :-- | :-- |\n| [Mattt Thompson](http://nshipster.com/authors/mattt-thompson/) | Mattt Thompson blogs at NSHipster, sharing code snippets and detailed explanation on topics. |\n| [Ben Dodson](http://bendodson.com/weblog/) | Ben Dodson writes about his work and includes links to his apps in the App Store. |\n| [Tim Boelaars](http://www.timboelaars.nl/) | Tim Boelaars specializes in logo and icon design. His portfolio is simple and elegant, featuring the work he's completed along with short case studies for each. |\n| [Ryan Johnson](http://ryjohnson.com/) | Each project completed by Ryan Johnson features several images to provide depth in his design process.  |\n| [Meagan Fisher](http://owltastic.com/) | Meagan Fisher showcases her work, blog posts, as well as items she finds to be inspiring. |\n| [Haraldur Thorleifsson](http://haraldurthorleifsson.com/) | Haraldur Thorleifsson's portfolio features several projects, each with an in-depth case study around his design process, thinking, and creation. |",
          "assignment": "Acquaint yourself with the user stories.\n\nMessage your mentor, letting him/her know that you’re going to build your portfolio.",
          "roadmap_section_id": 127,
          "active_index": 1,
          "checkpoint_type": "normal",
          "position": 1,
          "points": 1,
          "ref": "f93bf321-c327-4814-b2e5-d3bb6422d3a5|0"
        },
        {
          "id": 1717,
          "name": "Fork and Clone a Template",
          "summary": "Use an existing template to create your portfolio",
          "body": "<!-- { ids:[1717], name:\"Fork and Clone a Template\", summary:\"Use an existing template to create your portfolio\" } -->\n>As a developer, I want to **fork and clone** a Jekyll portfolio theme<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\nCreate a Jekyll-based portfolio using one of the two templates we developed:\n\n- [Portfolio Kami](https://github.com/Bloc/portfolio-kami/)\n- [Portfolio Iro](https://github.com/Bloc/portfolio-iro/)\n\nThe video below demonstrates how to install Jekyll, fork the repository, and run it locally on your machine:\n\n<center><iframe src=\"//fast.wistia.net/embed/iframe/mehq3eu3d5\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script></center>\n\n## Install Jekyll\n\nJekyll allows you to create static websites and blogs using Markdown, Liquid, HTML and CSS. You can host the site for free using GitHub Pages. To use it, you must install Jekyll and a couple dependencies:\n\n```bash\n$ gem install jekyll\n$ gem install jekyll-paginate\n$ gem install pygments.rb\n```\n\n## Fork and Clone the Repository\n\nSelect the template you wish to use:\n\n### Portfolio Kami\n\n<center>![Portfolio Kami](https://bloc-global-assets.s3.amazonaws.com/portfolio/portfolio-kami.png)</center>\n\n- [Source](https://github.com/Bloc/portfolio-kami/)\n- [Demo](http://madebymunsters.github.io/portfolio-kami/)\n\n### Portfolio Iro\n\n<center>![Portfolio Iro](https://bloc-global-assets.s3.amazonaws.com/portfolio/portfolio-iro.png)</center>\n\n- [Source](https://github.com/Bloc/portfolio-iro/)\n- [Demo](http://madebymunsters.github.io/portfolio-iro/)\n\nFork the template you selected into your GitHub account. Then clone the repository to your machine:\n\n```bash\n$ git clone https://github.com/{username}/{portfolio-xxxx}.git\n```\n\nBefore going further, be sure to change the remote URL to your repository:\n\n```bash\n$ git remote set-url origin https://github.com/{username}/{portfolio-xxxx}.git\n```\n\n## Run Locally\n\nYou can create content and update the site locally without having to deploy. Execute the following command to preview your site:\n\n```bash\n$ jekyll serve\n```\n\nThen navigate your browser to the indicated localhost address, e.g. \"http://127.0.0.1:____\".\n\n## Customize the Template\n\nWithin the `_config.yml` file, you will need to change several settings. You can add your Stack Exchange account, GitHub, e-mail address, and more.",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 127,
          "active_index": 2,
          "checkpoint_type": "normal",
          "position": 2,
          "points": 1,
          "ref": "6ef49353-fdb1-436b-aa5a-2cc9d43d2052|0"
        },
        {
          "id": 1718,
          "name": "Write Case Studies",
          "summary": "Show off your projects in magnificent detail",
          "body": ">As a developer, I want to **write a case study** for each project I've completed<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 4\n\nCase studies provide detail about each project you worked on, focusing on:\n\n- Summary\n- Explanation\n- Problem\n- Solution\n- Results\n- Conclusion\n\nRefer to the [Case Study](https://www.bloc.io/resources/case-study) resource to ensure you write well-rounded, deep case studies for each project you've completed.\n\n## Write a Case Study for Each Project\n\nWriting a case study will take time, as will preparing the images to display on these pages. Select a project, and create a new Markdown file within the `_portfolio` folder.\n\nEach case study markdown file should be named after the project it details. At the top, you have to include a header that specifies the layout, title, a thumbnail to display on the main page, and a description.\n\n```markdown\n---\nlayout: post\ntitle: BlocFlix\nthumbnail-path: \"img/blocflix.png\"\nshort-description: BlocFlix is a Netflix replica for finding the best movies and watching them online.\n---\n```\n\nJekyll uses Markdown for writing. Refer to the [cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) for proper syntax.\n\nTo display your project's screenshots, create assets and include them in the markdown file:\n\n```markdown\n{:.center}\n![]({{ site.baseurl }}/img/blocflix.png)\n```\n\nIf you want to showcase code snippets, you should wrap them in highlights:\n\n```markdown\n{% highlight ruby %}\ndef show\n  @widget = Widget(params[:id])\n  respond_to do |format|\n    format.html # show.html.erb\n    format.json { render json: @widget }\n  end\nend\n{% endhighlight %}\n```\n\nOnce you finish a case study, create another for each project you've completed. Remember, case studies take a significant amount of time to produce. Do your best to focus on quality for each.\n\n## Commit and Push your Changes\n\nAdd, commit and push your changes to the repo:\n\n```bash\n$ git add .\n$ git commit -m \"Added case studies\"\n$ git push origin master\n```",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 127,
          "active_index": 3,
          "checkpoint_type": "normal",
          "position": 3,
          "points": 1,
          "ref": "7ceaa3bf-3a8d-40bd-9b31-bf4f137e0f8a|0"
        },
        {
          "id": 1719,
          "name": "Create Blog Posts",
          "summary": "Write about your experience as a developer to fill out your site",
          "body": ">As a developer, I want to **write blog posts** about my journey into development<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 3\n\nSharing your journey into development through blog posts shows off your personality and passion for your newfound skill set. Write a few blog posts to discuss your reason for learning web development, and what you have learned during your time as a Bloc student.\n\n## Create a New Blog Post\n\nCreate at least three blog posts. Each post should be approximately 500 words in length. Break up larger stories across several posts to keep your content consumable and reader-friendly. Choose from among the following topics, or come up with your own:\n\n- Your goals as a web developer\n- Your experience with Bloc\n- The biggest challenge you've faced when learning to develop\n\nBlog posts belong in the `_posts` folder in your project directory. Each post must be named using this format (`YYYY-MM-DD-TITLE.md`):\n\n```markdown\n2015-06-09-my-experience-at-bloc.md\n```\n\nEach post must have a header which specifies its layout and title:\n\n```markdown\n---\nlayout: post\ntitle: My Experience at Bloc\n---\n```\n\nReview [Writing Posts](http://jekyllrb.com/docs/posts/) within the Jekyll documentation for more information.\n\nOnce you have completed a blog post, create two more to generate some additional content for your site.\n\n## Commit and Push your Changes\n\nAdd, commit and push your changes to the repo:\n\n```bash\n$ git add .\n$ git commit -m \"Added blog posts\"\n$ git push origin master\n```",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 127,
          "active_index": 4,
          "checkpoint_type": "normal",
          "position": 4,
          "points": 1,
          "ref": "4971e2d5-b9d4-4dae-a47c-53630c671213|0"
        },
        {
          "id": 1720,
          "name": "Include a Contact Form",
          "summary": "Allow portfolio visitors to contact you directly",
          "body": ">As a developer, I want to allow visitors to **contact me**<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\nProvide a way for potential employers to contact you. Within the Jekyll template, a contact form is pre-generated, but first you must update it.\n\nThe video below demonstrates how to configure the contact form:\n\n<center><iframe src=\"//fast.wistia.net/embed/iframe/zhaoe960m1\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script></center>\n\n## Configure Simple Form\n\n![Simple Form](https://bloc-global-assets.s3.amazonaws.com/portfolio/simpleform.png)\n\nSign up for [Simple Form](https://getsimpleform.com/) using your e-mail address to generate an API token. Within the `contact.md` file, include your token and change the redirect URL for the thank you page:\n\n```html(contact.md)\n<!-- #1 -->\n<form action=\"https://getsimpleform.com/messages?form_api_token=\" method=\"post\">\n  <!-- the redirect_to is optional, the form will redirect to the referrer on submission -->\n  <!-- #2 -->\n  <input type='hidden' name='redirect_to' value='full-url/thank-you/' />\n  <input type='text' name='name' placeholder='Your Full Name' />\n  <input type='email' name='email' placeholder='Your E-mail Address' />\n  <textarea name='message' placeholder='Write your message ...'></textarea>\n  <input type='submit' value='Send Message' />\n</form>\n```\n\nAt **#1**, paste your Simple Form API token after the `=` symbol. The value at **#2** will resemble the following:\n\n```markdown\nhttp://{username}.github.io/thank-you\n```\n\n## Commit and Push Your Changes\n\n```bash\n$ git add .\n$ git commit -m \"Updated to Simple Form\"\n$ git push origin master\n```",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 127,
          "active_index": 5,
          "checkpoint_type": "normal",
          "position": 5,
          "points": 1,
          "ref": "1f62b613-3971-477b-8293-c543cea2ea1e|0"
        },
        {
          "id": 1721,
          "name": "Track Visitors",
          "summary": "Use Google Analytics to track visits and visitors",
          "body": ">As a developer, I want to track **visits and visitors** of my portfolio<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\nGoogle Analytics allows you to track the visits and visitors to your portfolio, as well as tracking your most visited posts.\n\nThe video below demonstrates how to configure Google Analytics:\n\n<center><iframe src=\"//fast.wistia.net/embed/iframe/1v9g37izur\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"100%\" height=\"300\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\" async></script></center>\n\n## Configure Google Analytics\n\nLog into Google Analytics and sign up to create your account.\n\n> If you already have an account, select Admin in the top navigation. Under **Account**, click on the dropdown and select **Create a new account**.\n\nComplete the form to get your site's tracking ID. Add your Google Analytics tracking ID within the `_config.yml` file:\n\n```yaml(_config.yml)\n...\n  wordpress:\n  youtube:\n\n  # Scripts\n  # #1\n  google_analytics: # Tracking ID, e.g. \"UA-000000-01\"\n  disqus_shortname:\n  katex: true # Enable if using math markup\n\n  # Localization strings\n  str_follow_on: \"Follow on\"\n...\n```\n\nPlace your tracking ID at **#1**, remember to use double quotes, e.g. \"UA-000000-01\".\n\n## Commit and Push your Changes\n\nAdd, commit and push your changes to the repo:\n\n```bash\n$ git add .\n$ git commit -m \"Added Google Analytics\"\n$ git push origin master\n```",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 127,
          "active_index": 6,
          "checkpoint_type": "normal",
          "position": 6,
          "points": 1,
          "ref": "8025e6ed-e8f2-403a-b4b6-9f966153504a|0"
        },
        {
          "id": 1722,
          "name": "Deploy Your Portfolio",
          "summary": "Use GitHub Pages to deploy your portfolio",
          "body": ">As a developer, I want to **deploy** my portfolio to GitHub Pages<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 1\n\nGitHub Pages allows you to deploy your website using its free hosting. To do this, rename your repository to `{username}.github.io`, e.g. [`developer.github.io`](https://github.com/github/developer.github.com). Then update your `_config.yml` file to reflect the changes:\n\n```yml\n# SITE CONFIGURATION\n-baseurl: \"/portfolio-xxxx\" # the subpath of your site, e.g. /blog/\n-url: \"http://www.domain.com\" # the base hostname & protocol for your site\n+baseurl: \"/{username}.github.io\" # the subpath of your site, e.g. /blog/\n+url: \"http://{username}.github.io\" # the base hostname & protocol for your site\n\n # THEME-SPECIFIC CONFIGURATION\n theme:\n```\n\nCommit and push the changes to `master`. Then verify that GitHub published your repository as a GitHub page by navigating to the repository settings:\n\n<center>![](https://bloc-global-assets.s3.amazonaws.com/images-frontend/projects/portfolio/github-pages-settings.png)</center>\n\n## Verify GitHub Pages\n\n- Visit `http://<username>.github.io` to view your portfolio page.",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 127,
          "active_index": 7,
          "checkpoint_type": "normal",
          "position": 7,
          "points": 1,
          "ref": "263c43cc-65a9-4166-a1f0-7a5bdad5c678|0"
        },
        {
          "id": 1723,
          "name": "Use a Custom Domain",
          "summary": "A custom domain makes you appear more professional",
          "body": ">As a developer, I want to use **a custom domain name** for my portfolio<br>\n>[Difficulty Rating](https://www.bloc.io/resources/projects-difficulty-ratings): 2\n\nYour Jekyll portfolio site is published at {username}.github.io. We recommend purchasing a personalized domain name, and directing it to the GitHub Pages URL.\n\n## Purchase a Domain Name\n\nSelecting a domain name should be simple if your name is available, such as [joeykirk.com](http://www.joeykirk.com). You can purchase a domain name through [Namecheap](https://www.namecheap.com/), [Hover](https://www.hover.com/), [Domainr](https://domainr.com/), or one of the [many domain registrars](http://lifehacker.com/5683682/five-best-domain-name-registrars) to use as the primary URL for your portfolio.\n\n## Add a Custom Domain\n\nFollow the instructions for creating a [CNAME record](https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/).\n\nModify the `_config.yml` file to specify the new URL:\n\n```yaml(_config.yml)\n# SITE CONFIGURATION\nbaseurl: \"\" # the subpath of your site, e.g. /blog/\n- url: \"http://example.com\" # the base hostname & protocol for your site\n+ url: \"http://your-new-domain-na.me\"\n```\n\nWithin `contact.md`, you must change the redirect URL for the thank you page:\n\n```markdown(contact.md)\n<form action=\"https://getsimpleform.com/messages?form_api_token=_yourtoken_\" method=\"post\">\n  <!-- the redirect_to is optional, the form will redirect to the referrer on submission -->\n-   <input type='hidden' name='redirect_to' value='http://bloc.github.io/portfolio-iro/thank-you/' />\n+   <input type='hidden' name='redirect_to' value='http://your-new-domain-na.me/thank-you/' />\n  <input type='text' name='name' placeholder='Your Full Name' />\n  <input type='email' name='email' placeholder='Your E-mail Address' />\n  <textarea name='message' placeholder='Write your message ...'></textarea>\n  <input type='submit' value='Send Message' />\n</form>\n```\n\n## Commit and Push to GitHub Pages\n\n```bash\n$ git add .\n$ git commit -m \"Deploy to GitHub Pages\"\n$ git push origin master\n```",
          "assignment": "Complete the user story.",
          "roadmap_section_id": 127,
          "active_index": 8,
          "checkpoint_type": "normal",
          "position": 8,
          "points": 1,
          "ref": "67d71877-3ee2-49b1-a5fb-97ee2a0ac0a3|0"
        }
      ]
    },
    {
      "id": 128,
      "roadmap_id": 31,
      "name": "Job Prep – Deprecated as of April 8, 2016",
      "time_estimate": "20-40 Hours",
      "point_ratio": 0,
      "description": "This project will be removed on Friday, April 8th.",
      "icon": "Job-Prep",
      "visible_to_students": false,
      "checkpoints": []
    },
    {
      "id": 146,
      "roadmap_id": 31,
      "name": "Career Prep",
      "time_estimate": "20-40 hours",
      "point_ratio": 0,
      "description": "",
      "icon": null,
      "visible_to_students": true,
      "checkpoints": [
        {
          "id": 1931,
          "name": "Prepare to Search",
          "summary": "Narrow your focus, shore up your skills, and prepare to look for opportunities",
          "body": "<!-- { ids:[1923,1931], name:\"Prepare to Search\", summary:\"Narrow your focus, shore up your skills, and prepare to look for opportunities\" } -->\n\n_Complete this checkpoint and the second Career Prep checkpoint (Networking) immediately after starting your Bloc program. Students who start their job search early have drastically better outcomes. The third Career Prep checkpoint (Career Marketing Documents) can be postponed until the last 25% of your program_.\n\n> “Finding a job is its own job.”\n>\n> – Job S. Eeker\n\nJob S. Eeker, a totally real human, is _right_; looking for a job is hard work. We believe that job hunting is its own skill, and if mastered, will serve you throughout your life. And as with web development, you will take small steps to build your job finding skills, beginning with how to narrow the search.\n\n- [Narrow Your Search](#narrow-your-search)\n  - [By Location](#by-location)\n  - [By Vertical](#by-vertical)\n  - [By Role](#by-role)\n  - [By Size](#by-size)\n- [Assignment](#assignment)\n\n<a name=\"narrow-your-search\"></a>\n## Narrow Your Search\n\nTo focus your projects and networking efforts, narrow your list of potential companies. This allows you to focus on a subset of decision makers. You can start to narrow your focus by choosing a location.\n\n<a name=\"by-location\"></a>\n### By Location\n\nMost software companies and the jobs they offer belong to major metropolitan areas, and you will improve your chances by moving to one. We recommend getting acquainted with professionals in your desired areas as soon as possible. Here is a list of metropolitan areas that we recommend for engineering roles:\n\n* Metro Atlanta\n* Greater Austin\n* Baltimore/Washington Metropolitan Area\n* Greater Boston\n* Chicago Metropolitan Area\n* Dallas/Fort Worth Metroplex\n* Delaware Valley\n* Boulder/Denver-Aurora-Lakewood Colorado\n* Indianapolis Metropolitan Area\n* Greater Los Angeles Metropolitan\n* Greater Houston\n* Las Vegas Valley\n* Miami Metropolitan Area\n* Minneapolis-Saint Paul\n* New York Metropolitan Area\n* Metro Phoenix\n* Greater Portland\n* San Diego County\n* San Francisco Bay Area\n* Seattle Metropolitan Area\n* Greater Toronto and Hamilton Area (Canada)\n* Metro Vancouver (Canada)\n\n<a name=\"by-vertical\"></a>\n### By Vertical\n\nWe recommend choosing a market vertical to focus your networking and projects on. Tech is not an industry, yet people often mistake it for one. Health care, construction, and transportation are examples of industry verticals, and each leverages technology to solve problems. You should choose an industry that you are familiar with and have passion for.\n\nThere is no official list of \"industry verticals\", but here is a list of some examples to help you understand the concept:\n\n* B2B SAAS\n* E-Commerce\n* Education Tech (like Bloc!)\n* Finance Tech\n* Health Tech\n* Marketplaces\n\n<a name=\"by-role\"></a>\n### By Role\n\n<center>![](https://bloc-global-assets.s3.amazonaws.com/images-job-prep/what-would-you-say-you-do-here.jpeg)</center>\n\nChoosing a specific role helps you tailor your LinkedIn profile and resume to the requirements of that position. An application that looks perfect for a small set of positions is more appealing than an application that looks average for every position. Here is a subset of roles that graduates of Bloc can consider:\n\n| Role                            | Description                                                                                                                                                                                                                                                                                                                       | Experience Required                                     |\n|:--------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------------------------|\n| Software Engineer               | This position is the core of every software product team. The company’s most senior software engineers are the authorities on the product and non-technical employees will seek their guidance before requesting big product changes. Larger organizations provide levels of software engineer positions, beginning at level one. | 1+ Years Working in Software                            |\n| Junior Developer                | Most developers begin in this position. People in this role work on the product: fixing bugs, implementing features, writing tests, and more. Companies often pair junior developers with more experienced, senior developers as mentors.                                                                                         | CS or Bootcamp Graduation                               |\n| Development Operations (DevOps) | Individuals responsible for DevOps manage servers, automate maintenance tasks, provision new services, and more.                                                                                                                                                                                                                  | 1+ Years Maintaining and Setting up Servers             |\n| Automation Engineer             | Larger organizations often maintain a separate team whose primary concern is to test the company’s software products. Automation engineers write and maintain the test suite which includes both unit and functional tests.                                                                                                       | Programming Knowledge and Testing Experience            |\n| Quality Assurance (QA)          | QA personnel use the product, find and file bugs, and poke and prod at each build. While not a technical role in nature, it’s a great place to start for those with technical skills who wish to graduate to software development.                                                                                                | Passion for Technology, Knowledge of Software Workflows |\n\n<a name=\"by-size\"></a>\n### By Size\n\nSoftware is eating the world, so every industry can and will incorporate technology to streamline their businesses. It’s safe to assume that regardless of where you want to work, they have technical positions to fill. Consider the following company archetypes. Each requires a different approach and some are more accessible to bootcamp students than others:\n\n| Type                 | Examples                                          | Strategy                                                                                                                      |\n|:---------------------|:--------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------|\n| Small, Non-Technical | Blogs, Storefronts, and Local Government.         | Network directly with the decision makers. If you can, meet them in person.                                                   |\n| Large, Non-Technical | Restaurant Chains, Publishers, and Manufacturers. | Look for open positions and apply. If you know people working there, seek their recommendation.                               |\n| Small, Technical     | Startups, Contracting Firms, and Web Designers.   | Create profiles on StackOverflow, Angel.co, and others. Seek help from technical recruiters and build LinkedIn relationships. |\n| Large, Technical     | Google, Amazon, and IBM.                          | Create connections on LinkedIn and meet with employees. Apply for positions online.                                           |\n\n<a name=\"assignment\"></a>",
          "assignment": "- Determine the types of companies you want to work for, and make a list of 10 examples that fit your criteria.\n- Choose the role(s) you find most interesting, then find job listings looking to fill them. Limit your search to postings by the 10 companies you chose.\n- Compare yourself to the ideal candidate described by each job posting:\n  - Do you have the requisite skills? Experience?\n  - Are you familiar with their toolset?\n  - Do you live nearby?\n- After comparing yourself to these listings, begin taking steps to improve your chances:\n  - Find the contact information of (at least) one decision maker at every company on your list:\n    - Present the list to your mentor.\n    - Discuss the best way to approach each person.\n    - Begin building relationships with these people.\n  - Compile a list of every required skill found in the job listings:\n    - Isolate those you do not have and present them to your mentor.\n    - Have your mentor help you choose up to three of the most valuable skills on this list.\n    - Form a plan to learn, or at least familiarize yourself with these skills over the course of your program.",
          "roadmap_section_id": 146,
          "active_index": 1,
          "checkpoint_type": "normal",
          "position": 1,
          "points": 1,
          "ref": "9dd74d47-b75f-4817-8d99-561c26187812|0"
        },
        {
          "id": 1932,
          "name": "Networking",
          "summary": "Narrow your focus, shore up your skills, and prepare to look for opportunities",
          "body": "<!-- { ids:[1924,1932], name:\"Networking\", summary:\"Narrow your focus, shore up your skills, and prepare to look for opportunities\" } -->\n\n> The single greatest \"people skill\" is a highly developed & authentic interest in the *other* person.\n>\n> &mdash; Bob Burg (@BobBurg) <a href=\"https://twitter.com/BobBurg/status/519571723310862336\">October 7, 2014</a>\n\nNetworking is a broad term that encompasses any time people interact to learn, to exchange information, or to develop contacts. Professionals in all fields network. Here are four examples:\n\n- Joining conferences or Meetups\n- Attending job fairs\n- Having coffee or lunch with someone in your field\n- Taking an ongoing education class\n\nNetworking is important to your career’s development. Through proper networking, you can hear about new job opportunities before anyone else. You can learn new high-demand skills, exchange advice, and even make a new friend. Most importantly, “[more than 70 percent of people land jobs through networking.](http://money.usnews.com/money/blogs/outside-voices-careers/2014/09/17/dont-believe-these-8-job-search-myths)”\n\nAs you develop your network, remember that you get out what you put in. If you decide to pass on a job opportunity, share it with someone else who’s looking. If you find a great article or video, send it to someone else who’s learning. Invite people you meet to events you’re attending. Engaging these people and investing in their success will pay dividends as they begin to engage and invest in yours.\n\n- [Connect with Bloc Students](#connect-with-the-bloc-community)\n- [Network and Build Relationships](#network-and-build-relationships)\n- [Write and Practice Your Elevator Pitch](#write-and-practice-your-elevator-pitch)\n- [Overcome Impostor Syndrome](#overcome-impostor-syndrome)\n- [Assignment](#assignment)\n\n## Connect with the Bloc Community\n\nMore than anyone else, Bloc students, graduates, mentors, and staff know where you’ve been and where you’re going. Bloc is already your network, so take advantage of it.\n\n- [Find Bloc peers](https://www.linkedin.com/edu/school?id=162130) on LinkedIn\n- Join and take part in [the `#careers-general` Slack channel](https://students-bloc.slack.com/messages/careers-general/)\n- Collaborate on a project or share ideas in [The Bloc Hacker Club](https://www.facebook.com/groups/blocalumni/)\n\nWhen you share your experience, other students will give advice and detail what has worked for them. Similarly, you should offer what has worked for you.\n\n## Network and Build Relationships\n\nNetworking happens in one of two ways: offline and online. _Online_ networking occurs on e-mails, comment threads, LinkedIn, Twitter, and other online portals. Your primary goal when networking online is to bring those relationships _offline_.\n\nOffline networking happens in person, in a meeting, at a conference, at Meetups, and anywhere you can communicate with people directly. Offline networking results in stronger relationships, and helps you seal the deal.\n\nTo cut straight to offline networking, look to these sources:\n\n- Search for groups on [Meetup](http://www.meetup.com/)\n- Find upcoming hackathons in your area on [Hackalist](https://www.hackalist.org/)\n- Find Hackathons, conferences, and Meetups in your area through Google. For example, search for, “Ruby meetup New Orleans,” or, “JavaScript Hackathon Baltimore,” or “Developer conferences Houston.”\n- If you’re a member of a minority group, look for groups that work toward broader inclusion.\n  - Join every online portal your group(s) maintain, like Twitter lists, subreddits, mailing lists, Facebook groups, etc.\n  - Introduce yourself and take part in their conversations.\n- If you *cannot* find a local group, consider starting your own.\n\n> We've had a number of students who have benefitted from Code for America Brigades. \"Code for America Brigades are local volunteer groups that bring together community members to help make government work better.\" You can learn more at https://www.codeforamerica.org/brigade/\n\nOnline networking is comfortable because you are safe from judgment and have all the time in the world to come up with something to say. Conversely, if you’re not a naturally gifted speaker or feel anxiety when meeting new people, networking _offline_ will prove challenging.\n\nFor those struggling with social anxiety, we recommend reading Psychology Today’s, [“How to Overcome Your Social Anxiety,”](https://www.psychologytoday.com/blog/anxiety-files/201410/how-overcome-your-social-anxiety) and related materials. For naturally introverted people, this [Quora answer](http://qr.ae/RUgtKG) by a Bloc curriculum writer should help.\n\n## Write and Practice Your Elevator Pitch\n\nAn *elevator pitch* is a short summary that relates your experience and career goals; it *sells* you. Write and practice this so you know what to say when someone asks you about yourself – a common occurrence in offline networking scenarios.\n\nThere are two rules for your elevator pitch:\n\n1. It must be short\n2. It must be interesting\n\nThe easiest way to make something both short and interesting is to hone in on a specific example. Use a project you worked on, your capstone, or an open-source contribution you made.\n\nHere’s a *short* elevator pitch that’s *not* interesting enough:\n\n> Hi, I’m Hannah McExample. I graduated from University of Chicago with a degree in Medieval and Renaissance Studies, but found it hard to get a job, so I took an online course at Bloc. Since then, I’ve interned for 4 months at United Airlines. I’m really good at Ruby on Rails. I’m on the job market for a full stack web developer job.\n\nThat’s all accurate information, but it doesn’t reel in the listener on Hannah’s abilities. People will have trouble remembering Hannah after hearing this, because the pitch sounds so generic.\n\nNow consider this example, which *shows* knowledge and experience instead of explaining it:\n\n> Hi, I’m Hannah McExample and as you know, airlines interpret lots of data so their flights run well. I interned at United where we combined FAA data, weather simulations, maintenance records, and historical overbooking data to keep planes full and on time. After we created a database, I wrote a Ruby on Rails dashboard to display the data and its conclusions to stakeholders.\n\nThis introduction will make listeners *think* about a flight they missed, or about what a “weather simulation” entails, or which overbooking data are available. It will make Hannah’s story stick in their mind, and they’ll remember Hannah as someone who is intelligent and interesting.\n\nIn the assignment for this checkpoint, you’ll write your own elevator pitch. Once it’s written, practice repeating it until you can summon the pitch at a moment’s notice.\n\n## Overcome Impostor Syndrome\n\n*Impostor syndrome* or *impostor phenomenon* is when you feel like a fraud despite your accomplishments. If you feel that you belong to the development community and you feel secure about your position, skip to the [assignment](#assignment). But, if you doubt yourself or are curious about the subject, read on.\n\nHere’s an excerpt from [a 1978 report](http://psycnet.apa.org/?&fa=main.doiLanding&doi=10.1037/h0086006) about women feeling like impostors in the workplace:\n\n> “Despite outstanding academic and professional accomplishments, women who experience the impostor phenomenon persist in believing that they are really not bright and have fooled anyone who thinks otherwise. Numerous achievements, which one might expect to provide ample objective evidence of superior intellectual functioning, do not appear to affect the impostor belief.”\n\nLearning to program lends itself to impostor syndrome. It’s impossible to become proficient in every aspect of programming; there’s too much to learn. What number of people know everything there is to know about Ruby? *Zero*. Not a CS grad, not your smartest developer friend, not even the creator of Ruby itself. No matter how experienced you are, you will always hear other developers discussing a new concept. You will feel like you don’t belong in the conversation, but you do.\n\nOkay, you know what to call this rotten feeling, but now what? As with most struggles, your first step is to recognize the issue. Imposter syndrome is overwhelming and soul-crushing if you *believe* you’re the outsider. First, realize that it’s common. Then shift the problem from an internal judgment of yourself (*“I’m not a programmer”*) to an opportunity to expand your skill set (*“There’s a lot to learn, and I’m capable of learning it”*).\n\nImpostor syndrome makes you doubt your capabilities. When applying to jobs, it can lead you to set your sights too low and accept a job or internship that is not worthy of your talents. To get over it: recognize it, discuss it, and remind yourself that no one enters the world with this knowledge. And merely months ago, you knew far less than you do now.",
          "assignment": "- Write your elevator pitch and send it to your mentor.\n  - Once your mentor approves, record yourself pitching and send the video to your mentor for review.\n  - Practice your pitch on 10 strangers and get their feedback.\n- Connect with your mentor and at least 20 Bloc students on LinkedIn.\n- Find three upcoming events (Meetups, conferences, job fairs, hackathons) to attend and book your spot.\n  - Send event details to your mentor.\n  - At each event, connect with at least three new people.\n  - Practice your elevator pitch, get their contact information, and start a professional relationship with them.\n  - After each event, share the contact information with your mentor.\n  - After each event, plan your next moves: when to follow-up with each person, what to ask of them, etc.\n- If you’re struggling with [Imposter Syndrome](#overcome-impostor-syndrome), speak to your mentor and ask them about their experiences.",
          "roadmap_section_id": 146,
          "active_index": 2,
          "checkpoint_type": "normal",
          "position": 2,
          "points": 1,
          "ref": "dd18cd80-e67e-484d-921d-6db443ea67f1|0"
        },
        {
          "id": 1933,
          "name": "Career Marketing Documents",
          "summary": "Showcase your skills on LinkedIn, GitHub, and your résumé",
          "body": "<!-- { ids:[1925,1933], name:\"Career Marketing Documents\", summary:\"Showcase your skills on LinkedIn, GitHub, and your résumé\" } -->\n\n_This checkpoint should be started once you are 75% of the way through your track. This and the following checkpoints should be worked on concurrently with your final project. Don't put off career prep!_\n\nEveryone looking for a job in the technology industry should have:\n\n- a LinkedIn profile\n- a résumé\n- a polished GitHub profile\n\nYou should also create a portfolio site (see the Portfolio project, which is located in a separate section from Career Prep).\n\nIn this checkpoint, we'll show you how to build a great LinkedIn profile, leverage it for your résumé, and showcase your GitHub projects.\n\n- [LinkedIn](#linkedin)\n- [Résumé](#r-sum-)\n- [GitHub](#github)\n- [Assignment](#assignment)\n\n## LinkedIn\n\nWhy is LinkedIn so important?\n\n- LinkedIn has hundreds of millions of users\n- It's how most professional networking in the technology industry works\n- It's a relatively low-effort way to get noticed.\n- It's easy to search.\n- It's easy to update.\n\nThinking and writing about your experience will be a lot of work. Don't try to do it all in one sitting.\n\n### General Questions\n\n- [What should my LinkedIn profile accomplish?](#what-should-my-linkedin-profile-accomplish-)\n- [What *shouldn't* my LinkedIn profile accomplish?](#what-shouldn-t-my-linkedin-profile-accomplish-)\n- [Should I include caveats or qualifiers?](#should-i-include-caveats-or-qualifiers-)\n- [What if the caveats/qualifications are important?](#what-if-the-caveats-qualifications-are-important-)\n- [How closely should my résumé mirror my LinkedIn profile?](#how-closely-should-my-r-sum-mirror-my-linkedin-profile-)\n- [How can I find remote work on LinkedIn?](#how-can-i-find-remote-work-on-linkedin-)\n\n### Work Experience\n\n- [Should I include informal work experience?](#should-i-include-informal-work-experience-)\n- [Should I include unrelated work experience?](#should-i-include-unrelated-work-experience-)\n- [Should I tailor my profile to different jobs?](#should-i-tailor-my-profile-to-different-jobs-)\n\n### Designing Your Profile\n\n- [What about extracurriculars and languages?](#what-about-extracurriculars-and-languages-)\n- [How should I order the sections?](#how-should-i-order-the-sections-)\n- [What should I include in each section?](#what-should-i-include-in-each-section-)\n\t- [Headline](#headline)\n\t- [Summary](#summary)\n\t- [Projects](#projects)\n\t- [Experience](#experience)\n\t- [Skills](#skills)\n\t- [Education](#education)\n\n### What should my LinkedIn profile accomplish?\n\nJust as you would use Yelp, Rotten Tomatoes, or IMDB to review a restaurant, movie, or celebrity, so will potential employers use LinkedIn to review your professional accomplishments. When someone considers you professionally, they're likely to review your LinkedIn profile.\n\nThe #1 goal of your LinkedIn profile is to entice recruiters and hiring managers to contact you. To this end, it should only show your positive attributes.\n\n### What *shouldn't* my LinkedIn profile accomplish?\n\nYour profile's job is to encourage contact — not to get you the job. It should be simple, brief, and easy to skim. Every word should sell your ability. If you find a word that doesn't, delete it.\n\nAs a consequence of this brevity, your LinkedIn profile will not include every detail. See *Should I include caveats or qualifiers?* for some examples of what to leave out.\n\n### Should I include caveats or qualifiers?\n\nNo. For example, imagine a team of ten engineers built a new product over three years, and you helped them for six months. You should still list accomplishments briefly, like:\n\n> - Created a full-stack web application using Ruby on Rails & AngularJS\n> - Scaled application to thousands of users using database sharding\n\nLeave out caveats and qualifiers. Even if they make the statement more accurate, they complicate things and make your profile hard to read. So avoid:\n\n> - Worked as part of a a team of 10 people during a 6-month internship to create a full-stack application using Rails 4 and Angular\n> - Joined a small team of engineers focused on performance and implemented database sharding after the lead architect suggested it\n\nYou must be completely honest. That said, it is very easy to make your bullet points *too* accurate. If your bullet points are more than about 10 words, they probably have too much detail.\n\n### What if the caveats/qualifications are important?\n\nYou can expand on them in an interview. Remember, the goal of your LinkedIn profile is to encourage contact with interviewers, not get you a job.\n\n### How closely should my résumé mirror my LinkedIn profile?\n\nIt’s okay to have differences between the two, but they shouldn't be so different that they confuse hiring managers or employers.\n\n### How can I find remote work on LinkedIn?\n\nYour profile should show that you're an expert at remote work. Add recommendations for each of the remote experiences you have, and ask those writing these recommendations to highlight your ability to work remotely.\n\n### Should I include informal work experience?\n\nDefinitely. Make sure *any* work experience is represented. Work experience is the most valuable thing you can add to your profile.\n\nInclude projects for family members, friends, and colleagues that required the skills you learned at Bloc. Also include freelance work.\n\n### Should I include unrelated work experience?\n\nYes, but minimize detail. For example, if you worked as a dentist's office for 18 months, include that in your work history. Here's why:\n\n- Employers want to know your general professional experience.\n- You can demonstrate [transferable skills](http://www.ceswoodstock.org/job_search/resumeskillstransf.shtml) like project management, communication, data analysis, etc.\n- Your experience in a specific [vertical market](http://www.investopedia.com/terms/v/verticalmarket.asp) (like dentistry) might be valuable to certain employers (like a medical billing software company).\n\nThat said, unrelated work is not the most important part of your profile, so only list 1–2 bullet points about these experiences.\n\n### Should I tailor my profile to different jobs?\n\nCraft your profile to fit the job you want most. Focus on that. Don’t adjust your profile for one-off positions.\n\n### What about extracurriculars and languages?\n\nInclude extracurriculars and languages at the bottom and after all of the career-related sections.\n\nFun tidbits like being fluent in Arabic or Spanish, having 9 years of laser dentistry experience, or being involved in philanthropy makes you more human and paints a better picture of who you are.\n\n### How should I order the sections?\n\nLinkedIn lets you customize your profile by placing your sections in any order.\n\nIf, like most students, you're new to the field, use this order:\n\n- Headline\n- Summary\n- Projects\n- Experience\n- Skills\n- Education\n\nIf you have some directly related work experience, move \"Experience\" above \"Projects\":\n\n<center>![](https://bloc-global-assets.s3.amazonaws.com/images-job-prep/some-work-experience.jpg)</center>\n\n### What should I include in each section?\n\n<center>![](https://bloc-global-assets.s3.amazonaws.com/images-job-prep/ideal-linkedin-profile.jpg)</center>\n\nHere's a checklist for each section.\n\n> Review [Hannah McExample's LinkedIn profile](https://www.linkedin.com/in/hannah-mcexample-43b249114) to see these tips in action.\n\n#### Headline\n\n- Include a professional-looking, well-lit photograph. It should be high resolution and you should be the only person in it.\n- Change your subtitle to \"Software Engineer,\" \"UX Designer,\" or whichever fits the position you want.\n- Remove Bloc from the \"Education\" line to keep employers focused on your experience. Show your most advanced degree here instead.\n- Avoid job titles like \"ninja,\" \"rockstar,\" \"wizard,\"s etc.\n- [Customize your LinkedIn URL](https://help.linkedin.com/app/answers/detail/a_id/87/~/customizing-your-public-profile-url), ideally to use your full name.\n\n#### Summary\n\n- Write two to four sentences summarizing your knowledge and experience.\n- List areas of expertise.\n- Include your desired position.\n- Recruiters search this text, so include buzzwords like \"JavaScript\" and \"Rails.\"\n- Pictures say more than words. Add at least two screenshots of your best project(s).\n- Make it clear what you want and what you can offer.\n- Remove red flags, qualifications, caveats, and anything confusing.\n\n#### Projects\n\n> Reminder: if you have related work experience, put \"Experience\" before \"Projects.\"\n\n- Briefly explain each project, focusing on the skills and technologies you used to make it.\n- Include your Bloc projects.\n- List the most difficult projects first.\n\n  > This generally means projects are in reverse-chronological order, assuming you worked on simpler projects earlier.\n\n- Link to the GitHub repository for each project.\n\n#### Experience\n\n- List all work experience.\n- For unrelated work, minimize detail.\n- For related work…\n\t- Include websites you made for a friend.\n\t- Include any freelance work you've done.\n\t- List all technologies used.\n\n- Be honest. Be succinct. Don't over-explain.\n\n#### Skills\n\n- Add all related skills you have.\n- Sort the skills so those you want employers to focus on are at the top.\n- Ask mentors and other Bloc students to endorse the skills you’re most proud of.\n\n> Add unrelated skills if they're strengths of yours, but minimize them. Make sure nothing looks weird or irrelevant. For example, having 43 endorsements for “laser dentistry” when you’re looking for web developer roles could be confusing.\n\n#### Education\n\n- Include your Bloc education.\n- If you have a degree, put it above your Bloc education.\n- Don't use the word “bootcamp” in your description for Bloc. (This can distract employers.)\n\n----\n\n## Résumé\n\nYour résumé is a brief (usually one-page) document that highlights your skills, education, and accomplishments. Its goal is to convince the reader that you're worthy of an interview. Most people who review résumés are tasked with picking a small number from a pile, so consider that your résumé might only get read for 5–10 seconds.\n\nTo that end, your résumé should be professional and more concise than your LinkedIn profile. You can write your résumé using a word processor. There are also sites like [Creddle](http://creddle.io/) and [Represent](https://represent.io/) that will render a document using a professionally-designed theme.\n\nBecause most people have seen and written résumés, we're assuming you know the basics, but we've provided a few important résumé guidelines below. As you read them, compare these two examples:\n\n- [Bowen Yang](https://drive.google.com/file/d/0B3pzxInE0r63NHRDSE8zMlQ2RWM)\n- [Adam Ellsworth](https://drive.google.com/file/d/0B3pzxInE0r63c1Iyd0VCOGJQbEE/view)\n\n### Length\n\nIf you have fewer than 10 years of experience, your résumé should be less than one page.\n\nIf you have more, your résumé should usually be less than two pages.\n\n### Writing Style\n\nRemove unnecessary words. Use the shortest version of a word that conveys your idea. For example, say \"used\" instead of \"utilized,\" or \"I want to code\" instead of \"I'm looking for a job where I can code.\"\n\nAlthough brevity is important, don't sacrifice specificity. Generic phrases like can get your résumé discarded for being too vague. Be specific about the technologies involved.\n\n| Too Vague                    | Specific Enough                                                                        |   |\n|------------------------------|----------------------------------------------------------------------------------------|---|\n| Designed mobile UI           | ­ Designed responsive and engaging mobile UI using Angular, Ionic, and CSS animations­ |   |\n| Added continuous integration | Introduced continuous integration and deployment using Docker, TravisCI and AWS­       |   |\n| Added database               | Defined relational schemas using PostgreSQL to decrease layered query time             |   |\n| Managed tasks                | Set product vision and assigned tasks to a team of 4 engineers using Git issues        |   |\n\nA bullet point should be roughly ten words. Too short, and you might be too vague. Too long, and you might be too specific.\n\n### Summary\n\nInclude a one-line summary at the top with important phrases bolded. Describe what you're good at and what you want to do.\n\n### Education\n\nIn your education section, make sure Bloc follows any degrees you have.\n\n### Experience\n\nFocus on your next job, not less-relevant jobs.\n\nIf you referenced a job in your summary, include it in “experience\".\n\nFor each job, focus on accomplishments instead of responsibilities. If you can quantify an accomplishment, do so.\n\nAsk your mentor to review your skills they meet industry minimums.\n\n----\n\n## GitHub\n\nEvery Bloc student creates a GitHub account, so you're way ahead on this one. Technically-savvy recruiters use public GitHub profiles to determine the breadth and quality of a developer's work.\n\n### Avatar\n\nAn eye-catching GitHub profile begins with an appropriate avatar. If you fail to provide one, GitHub generates one for you, like so:\n\n<center>![](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/job-prep-virtual-resume/bad-avatar.png)</center>\n\nThe default avatar gives the impression that its owner does not treat their profile seriously. If you don't have a professional headshot, use an appropriate head & shoulders photograph:\n\n<center>[![](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/job-prep-virtual-resume/good-avatar.png)](https://github.com/madebymunsters)</center>\n\n### Public Contributions\n\nYour histogram of public contributions can help showcase your work ethic. In this example profile, the histogram is sparse and may reflect poorly on its owner:\n\n<center>![](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/job-prep-virtual-resume/bad-histogram.png)</center>\n\nA dense histogram is a flashy quantitative benchmark that does *not* reflect the quality of your work. However, it endows your profile with superiority over those who lack it:\n\n<center>![](https://bloc-global-assets.s3.amazonaws.com/multi-purpose-checkpoint-assets/job-prep-virtual-resume/good-histogram.png)</center>\n\nHere are several ways to enhance the appearance of your histogram:\n\n- Place all of your projects on GitHub.\n- Make sure that every repository you own is *Public*.\n- Contribute frequently to open-source projects as well as your own.\n\n### README Files\n\nProvide a high-quality README document with each of your projects. A README should include, at minimum:\n\n- a synopsis of your project\n- screenshots\n- setup / installation instructions\n\nThe number of projects you have will certainly impress recruiters, but if readers discover empty READMEs within, they will replace their feelings of respect with feelings of uncertainty. Try to make your README polished and descriptive:\n\n<center>![](https://bloc-global-assets.s3.amazonaws.com/images-job-prep/swiftris-readme.gif)</center>\n\nFor README examples, refer to [Bloc's Swiftris Tutorial](https://github.com/Bloc/swiftris-checkpoints) and [Bloc's Swiftris Source Code](https://github.com/Bloc/swiftris).\n\nRemember, GitHub doesn't offer much in the way of curation, so there's no way to control which repositories potential employers might look at. Therefore, make all of your repositories look great.",
          "assignment": "- Create or update your LinkedIn profile using the guidelines in this checkpoint.\n- Create or update your résumé.\n- Polish your GitHub profile.\n- Submit all three to your mentor for feedback.",
          "roadmap_section_id": 146,
          "active_index": 3,
          "checkpoint_type": "normal",
          "position": 3,
          "points": 1,
          "ref": "f5fb7622-fd66-465c-b1af-c482ccfc26f0|0"
        },
        {
          "id": 1934,
          "name": "Start Your Search",
          "summary": "Prepare your cover letter and start reaching out to employers",
          "body": "<!-- { ids:[1926,1934], name:\"Start Your Search\", summary:\"Prepare your cover letter and start reaching out to employers\" } -->\n> “You pass up 100% of the jobs you don’t apply for.”\n>\n> – Wayne Jobgetzky\n\nThe wait is over, it’s time to put your research to good use. Beginning with this checkpoint, you will heed Wayne Jobgetzky’s advice by applying for work every day. Remember, this is why you've pushed yourself so hard to learn a new trade. This process will change the course of your life, and for the better.\n\n- [Your First Application](#your-first-application)\n- [Reach Out](#reach-out)\n  - [Request an Introduction](#request-an-introduction)\n  - [Write a Cover Letter](#write-a-cover-letter)\n  - [Samples](#samples)\n- [Where to Find Jobs](#where-to-find-jobs)\n- [Track Your Progress](#track-your-progress)\n  - [Track E-mails](#track-e-mails)\n- [Adjust Your Pace](#adjust-your-pace)\n- [Assignment](#assignment)\n\n<a name=\"your-first-application\"></a>\n## Your First Application\n\nAs with any new skill, performing it the first time tends to be the most challenging. But after you complete the first one, each application thereafter consumes less time and triggers less stress.\n\nFor your first application, we suggest you aim for the stars. Choose a dream role or a dream company, and submit your application there. This is like applying for college, you have your dream schools and you should apply to them anyway – the results can surprise you.\n\n<a name=\"reach-out\"></a>\n## Reach Out\n\nMost organizations have a ready-made submission process that requires a résumé and little else. When you submit to them, the server plops your résumé onto a big virtual pile and from there, there’s no telling where it will end up. We recommend instead that you find a decision-maker at this company, and contact them directly.\n\n<a name=\"request-an-introduction\"></a>\n### Request an Introduction\n\nA warm introduction from a peer serves as the best introduction. If a peer introduces you, they add credibility to your application. If your peer likes you a lot, they will highlight your qualities to your prospective contact, thus giving you an even bigger boost.\n\nLinkedIn shows you the connections you share with anyone on the site. These connections are perfect for making introduction requests. Ideally, the point person is someone you’ve worked with who can speak to the quality of your work and your character.\n\nMore importantly, they should hold sway over the person you wish to meet. Verify this beforehand by determining the nature of the relationship between your peer and your target contact. Let your peer know what your goal is and how they can make all the difference by introducing you. Most people will say yes, but if you’re evil and bent on world domination, they will probably say no.\n\nIf you can't find a valuable mutual contact, then introduce yourself through e-mail.\n\n<a name=\"write-a-cover-letter\"></a>\n### Write a Cover Letter\n\nOne way to apply directly through a person is by sending a cold outreach e-mail. Let this e-mail serve as a cover letter. It must grab attention and convince people that among the massive pile of résumés, yours is worth reading. A great cover letter satisfies the following criteria: it’s unique, it showcases you, and it’s brief.\n\n---\n\nIt’s tempting to change the recipient’s name on your cover letter, hit send, and then take a nap. But if you received a Christmas card from your lifelong best friend with nothing but, “Happy Holidays!” written on it, you would feel unappreciated. Recruiters want to feel special, too. They want to believe you wrote the cover letter specifically for them, which you did, because you _will_.\n\nThe cover letter must highlight one to three past experiences that make you an outstanding candidate for the position. This requires research to discover the company’s needs. With that information, you can tailor your cover letter to address their needs with your background. Doing so proves that you’re good for the job, that you’ve done your homework, and that you care.\n\nLastly, a great cover letter is brief. Everyone’s time is precious, and with hundreds of applications to consider, you don’t want to give the recruiter any reason to shuffle your application to the bottom. Use [the economy of words](http://www.maryrosemaguire.com/2013/09/24/want-master-economy-words/) and limit your letter to the two paragraphs featuring your most convincing attributes.\n\n<a name=\"samples\"></a>\n### Samples\n\nRead these fictional cover letters and pay special attention to how each applicant uses their traits and background to best serve the organization hiring them (or doesn’t).\n\n| Sample                                                                                         | Type       | Pros                                                                                     | Cons                                                                                                                                                                                                                           |\n|:-----------------------------------------------------------------------------------------------|:-----------|:-----------------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Andy Dwyer](https://docs.google.com/document/d/1bjB_k1vsss56IOFF3PMYBBmLtCzLJ5botw1xo-idU-s/) | **Bad**    | - None                                                                                   | - It’s long<br>- The applicant focuses on himself and his own needs<br>- Andy never mentions how his experience makes him an ideal candidate<br>- The candidate did not do any research about the position or the organization |\n| [Elle Woods](https://docs.google.com/document/d/1Sbx6iiPAotG4lPAfrffk3RbQylY3mI36-P822pDIIFU/) | **Better** | - Short<br>- Highlights the candidates positive traits<br>- It flatters the recipient    | - Does not associate traits to the employer’s needs<br>- Flattery sounds generic and betrays the letter’s lack of uniqueness                                                                                                   |\n| [Peter Parker](https://drive.google.com/open?id=1-nUFiG54pLntOopqorLVBTrEcaT2Pgdy-i-47T_iX_c)  | **Best**   | - Short<br>- Focuses on the employer<br>- Uses past experiences to promote the candidate | - None!                                                                                                                                                                                                                        |\n\n<a name=\"where-to-find-jobs\"></a>\n## Where to Find Jobs\n\nBefore you can ask anyone for an introduction or send a single cover letter, you need to find the jobs first. The internet will inundate you with portals through which to look for work. We’ve done our research and narrowed them down to your best bets.\n\n- [Angel.co](https://angel.co/jobs)\n- [CareerBuilder](http://www.careerbuilder.com/)\n- [CrunchBoard](http://www.crunchboard.com/)\n- [Hired](https://hired.com/)\n- [Indeed](http://www.indeed.com/)\n- [LinkedIn Jobs](https://www.linkedin.com/job/home)\n- [StackOverflow Careers](http://careers.stackoverflow.com/)\n- [Y-Combinator](https://news.ycombinator.com/jobs)\n- [whitetruffle](https://www.whitetruffle.com/)\n\nIf your goal is to work remotely and avoid relocation, consider these services that specialize in helping you find remote work:\n\n- [flexjobs](https://www.flexjobs.com/)\n- [Remotive](http://jobs.remotive.io/)\n- [We Work Remotely](https://weworkremotely.com/)\n- and this great [list of remote work sources on](https://www.producthunt.com/e/find-a-remote-job) ProductHunt\n\n<a name=\"track-your-progress\"></a>\n## Track Your Progress\n\nA spreadsheet is a great tool to keep track of your job hunt progress. [Copy this one](https://docs.google.com/spreadsheets/d/12WvdOVOyebEY4fyMSrp1ypunE_W8quml9h6KENeVceQ/copy) into your Google Drive and share it with your mentor.\n\nAt each point of contact, whether it’s an introduction, e-mail, phone call, or interview, update the spreadsheet. Record communication dates and look to your spreadsheet every day; check whether to send a follow-up e-mail or phone call.\n\nThe goal is to keep you motivated and on top of your schedule. If you find the spreadsheet does not serve that purpose, consider another project management tool instead.\n\n>Instead of using a spreadsheet directly, you can create a [Google Form](https://www.google.com/forms/about/), and submit progress updates through it. Share the linked spreadsheet with your mentor.\n\n<a name=\"track-e-mails\"></a>\n### Track E-mails\n\nYou can use a free service like [Sidekick](http://www.getsidekick.com/) or [Bananatag](https://www.bananatag.com/) to track the efficacy of your cover letters and cold outreach e-mails. Bananatag allows you to create templates, and you can send them in three clicks using Bananatag’s Chrome extension.\n\nThey also report metrics such as how often and when your recipients open your e-mails, and whether they click any links you include. This data can give you a better idea of when to follow-up, or whether to move on to another prospect.\n\n<a name=\"adjust-your-pace\"></a>\n## Adjust Your Pace\n\nThe last, and most important thing for you to do is to adjust your pace. We **highly** recommend that you drop your current pace to one appointment per week, if possible. This extends the length of your program, and gives you more breathing room to focus on career efforts.\n\nAs soon as you lower your commitment to the material, increase your commitment to your search. Ask your mentor to help you fill in the blanks in the following statement:\n\n<center><p style=\"text-align:justify\">**“Beginning on {MM/DD}, I commit to apply to {X} companies per day and reach out to {Y} people per day.”**</p></center>\n\nOnce you commit to this, **stick with it**. Apply every day and reach out every day. We cannot stress this enough.\n\n> We recommend applying fo jobs and slowing your Bloc program pace when you have 10% of your program remaining.\n\n<a name=\"assignment\"></a>",
          "assignment": "- Adjust your program’s pace to one appointment per week. Contact [help@bloc.io](mailto:help@bloc.io) to request the change.\n- If you haven't done so, create and update your profile on at least five of the [career-finding services](#where-to-find-jobs) we listed.\n- Write a [cover letter](#write-a-cover-letter) for a job listing you find interesting.\n  - Submit the letter to your mentor for review.\n  - Re-write the cover letter to get more practice.\n- [Copy this spreadsheet](https://docs.google.com/spreadsheets/d/12WvdOVOyebEY4fyMSrp1ypunE_W8quml9h6KENeVceQ/copy) to track your progress.\n  - Share the spreadsheet with your mentor.",
          "roadmap_section_id": 146,
          "active_index": 4,
          "checkpoint_type": "normal",
          "position": 4,
          "points": 1,
          "ref": "b9fea6c4-2536-42bc-bc82-f41efaf22cba|0"
        },
        {
          "id": 1935,
          "name": "Interview Skills: Discussing Technical Topics",
          "summary": "How to shine in a technical interview",
          "body": "<!-- { ids:[1927,1935], name:\"Interview Skills: Discussing Technical Topics\", summary:\"How to shine in a technical interview\" } -->\n\nDuring your application process you’re likely to have at least one *technical interview*. You can encounter technical questions during any phase of your application. We’ve known interviewers to ask students technical questions during phone screens and in-person interviews at any round.\n\nUnlike code challenges, these questions don’t test your ability to implement a specific algorithm or feature. Instead, employers ask them to assess your familiarity with different technologies.\n\n- [Types of Interview Questions](#types-of-interview-questions)\n  - [Technical Questions](#technical-questions)\n  - [Situational Questions](#situational-questions)\n  - [Hypothetical Questions](#hypothetical-questions)\n- [Common Technical Interview Questions](#common-technical-interview-questions)\n- [Advice](#advice)\n- [Assignment](#assignment)\n\n## Types of Interview Questions\n\nIn all job interviews, even those unrelated to software, there are three types of interview questions:\n\n1. **Technical** questions which have an objectively correct answer\n2. **Situational** questions about your past experience\n3. **Hypothetical** questions about how you would handle a specific situation\n\nFor each interview question, you should identify the type, and respond with the appropriate technique.\n\n### Technical Questions\n\nA technical interview question has a correct answer.\n\nOne example is, “What are the differences between an array and a hash?”\n\n- If you know the answer, respond with it.\n- If you’re not sure…\n\t- …and you know a _part_ of the answer, be honest about what you know, and ask for a hint.\n\n\t  > “I know an array is an ordered collection of elements, but I forget what a hash is. Can you remind me and I’ll highlight the differences?”\n\n\t- …but the concepts sound familiar, try asking a clarifying question; the interviewer’s response may help you remember.\n\n\t  > “Which arrays and hashes do you mean?”\n\n\t- …and you’re drawing a complete blank, be honest; don’t guess.\n\n\t  > “I don’t remember what those are. Could you ask the question another way or give me a hint in the right direction?”\n\nThe worst thing you can do is say, “I don’t know,” and have the interviewer move on to the next question. If that happens, you’ll get no credit. Instead, try to collaborate with the interviewer on an answer. Some interviewers won’t go for it, but most will help you.\n\n> Don’t confuse the “technical” interview question (has a correct answer) with “technical” (related to technology) subject matter. For example, imagine applying for a poetry reviewing job. “What is a limerick?” is a “technical” interview question, but has nothing to do with technology.\n\n#### Technical Memorization\n\nSome interviewers ask technical questions that strictly test your memory. For example, “name six sorting algorithms.” It feels uncomfortable to ask for a hint: you either know six algorithms or you don’t. If you don’t, that’s okay! Do your best to answer the question and if you can’t remember the name of something, try describing it to get some credit.\n\nWhen describing something, use phrasing like this:\n\n>\"I forget the name, but you iterate through a list over and over, swapping items that are out of order, until you can do a full iteration with no swaps.\"\n\nIf you don't have an answer, explain how you would find it. For example:\n\n>\"I can't think of any sorting algorithms off the top of my head, but here's how I'd research and select a sorting algorithm given a specific problem...\"\n\n### Situational Questions\n\nA situational interview question asks about something you’ve accomplished in the past. One example is, “Tell me about an interesting bug you fixed.” These questions are popular: your past behavior is the best predictor of your future behavior, so employers want to know a lot about your past behavior.\n\nYou should answer situational questions using the SARI interview technique:\n\n| Initial | Purpose                                                                     | Example                                                                                                                                                                                                                                                                                                                                                     |\n|---------|-----------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| S       | The **situation** you’re describing.                                        | “We got a bug report that one user couldn’t log in, even though they were entering their password correctly.”                                                                                                                                                                                                                                               |\n| A       | The actual **action** you took.                                             | “After using pry to debug the issue, I determined that ‘devise’, the Ruby gem we use for user authentication, was treating the email addresses as case-sensitive, and the user had entered an uppercase letter during registration. I researched the devise documentation, and configured the case_insensitive_keys option to remove the case sensitivity.” |\n| R       | The **result** of your work.                                                | “As a result, the user can now login, and the bug is resolved.”                                                                                                                                                                                                                                                                                             |\n| I       | An **interesting fact** about the situation, usually something you learned. | “I learned that it’s worth reading the documentation of related third-party libraries while fixing bugs. It ended up saving us lots of time compared to implementing a solution ourself.”                                                                                                                                                                   |\n\nTo use the SARI technique, remember how you handled a situation, and say one or two sentences for each letter. This means your resulting answer should be four to eight sentences total. If you don’t use this technique, _you’ll be SARI_.\n\nIf you can’t remember a situation, you should segue to a similar one:\n\n> “I don’t have a great example of fixing a bug, but let me tell you about a challenge I faced integrating a new library.”\n\nIn your assignment, you’ll come up with a handful of your best accomplishments, and write and practice SARI-formatted answers ahead of time.\n\n### Hypothetical Questions\n\nA hypothetical interview question asks how you *would* handle a given situation, which you may experience if hired. One example is, “It’s tough to join our senior-heavy engineering team as a new developer. How would you handle the team dynamic?”\n\nIn the best-case scenario, you’ve actually done what they’re asking about before. In this case, you should segue the question to situational, and answer using the SARI technique:\n\n> “I’ve actually experienced something similar when pair-programming with my mentor who’s a senior software engineer.”\n\nIf you can’t do that, you must answer by describing what you *would* do. This question type is broad, and employers are often hoping for a specific answer. The good news is that for hypothetical questions, it’s natural for you to ask for clarification. For example:\n\n> “So I can best answer your question, can you tell me about the current makeup and experience of your team?”\n\nAsking clarifying questions in response to a hypothetical question is a good strategy for two reasons: first, it can give you more insight into what the interviewer is looking for, and second, it can give you more time to prepare a response.\n\n## Common Technical Interview Questions\n\nThese questions ask you to explain technical concepts. Here are common examples:\n\n**Technical**\n\n- What does it mean when we describe a program as *object-oriented*?\n- What’s your favorite programming language and why?\n- When would you use a recursive vs. iterative algorithm?\n- Which Ruby gems are you familiar with?\n\n**Situational**\n\n- Tell me about a recent project of yours.\n- Tell me about a recent technical challenge you’ve overcome.\n- Tell me about a time you disagreed with a developer or engineer on a code decision.\n- Tell me about a feature you’re proud of and why.\n\n**Hypothetical**\n\n- You’re assigned a bug: a certain part of a webpage doesn’t appear in Safari. How would you resolve it?\n- One page on your site takes a long time to load. How would you improve it?\n- Our website heavily relies on a library or framework you’ve never seen. How would you learn it?\n- The designs for a new page include an animation that you have no idea how to generate. What do you do?\n\n## Advice\n\nEvery question about technology is an attempt to learn more about your technological experience. No matter how you respond, ensure that the interviewer learns more about the technologies you’re familiar with.",
          "assignment": "- Write a list of five programming technologies or tools you’re comfortable discussing.\n- Come up with four technological accomplishments you’re proud of.\n  - Write SARI-style descriptions for these accomplishments.\n  - Record yourself presenting each accomplishment using the SARI technique.\n  - Send each video to your mentor for review.\n- Record yourself answering, “You’re assigned a bug: a certain part of a webpage doesn’t appear in Safari. How would you resolve it?”\n  - Do not prepare the answer in advance.\n  - Answer the question in one take – no retries.\n  - Send the video to your mentor for review.",
          "roadmap_section_id": 146,
          "active_index": 5,
          "checkpoint_type": "normal",
          "position": 5,
          "points": 1,
          "ref": "03f7af45-fb7b-4505-a01f-7f04704cd70c|0"
        },
        {
          "id": 1936,
          "name": "Interview Skills: Coding on a Whiteboard",
          "summary": "Tips and tricks to code like a master when all you have is a marker",
          "body": "<!-- { ids:[1928,1936], name:\"Interview Skills: Coding on a Whiteboard\", summary:\"Tips and tricks to code like a master when all you have is a marker\" } -->\n> “According to research, developers believe death is less frightening than ‘coding at a whiteboard.’”\n>\n> – Reza Earcher\n\nArguably the most stressful aspect of the software interview process happens at the whiteboard. They liked your résumé, they liked your experience, and they liked _you_, but now they want to see you work. The quickest and dirtiest way for them to test your aptitude is via coding challenge.\n\nThis method is archaic and favors applicants with superior memories who fare well under pressure. You will encounter it throughout your career so we will prepare you for it.\n\n- [A 5-Step Process](#a-5-step-process)\n  - [Step 1: Resolving Ambiguity](#resolve-ambiguity)\n  - [Step 2: Design an Algorithm](#design-an-algorithm)\n  - [Step 3: Write pseudo code](#write-pseudo-code)\n  - [Step 4: Code the Solution](#code-the-solution)\n  - [Step 5: Test Your Code](#test-your-code)\n- [The Refactor](#the-refactor)\n- [Programming Reinforcement](#programming-reinforcement)\n- [Assignment](#assignment)\n\n<a name=\"a-5-step-process\"></a>\n## A 5-Step Process\n\nThese challenges come in the form of programmatic riddles. For example, “given an array of 10,000 numbers with possible duplicates, how would you find those duplicates?” If you consider yourself an average human, when first asked, this question would elevate your heart rate and make you nervous. Follow this five-step process to keep your head cool.\n\nWe'll continue to refer to this sample question:\n\n> “Given an array of 10,000 numbers with possible duplicates, how would you find those duplicates?”\n\n<a name=\"resolve-ambiguity\"></a>\n### Step 1: Resolve Ambiguity\n\nBefore you do anything, clear up assumptions with your interviewer. Ask questions to help narrow the scope of the problem. The benefits are threefold. First, by removing any uncertainty, you avoid wasting time solving the wrong problem. Second, during this Q&A, the interviewer can inadvertently reveal critical hints. And third, your questions reveal that you are thorough, you pay attention to detail, and can show off your technical knowledge.\n\nFor example, ask questions like these:\n\n> “Can the array have zero duplicates?”\n>\n> “Do duplicates come in pairs (7, 7) or an arbitrary number of copies (7, 7, 7, 7, ...)?”\n>\n> “Are numbers stored as integers or floating point values?”\n>\n> “Can I manipulate the array?”\n>\n> “Are the numbers ordered? And if so, how?”\n>\n> “Is this a primitive array or a Ruby array?”\n\nAsk every question you need to clarify the problem. All whiteboard questions fall under that category of, “technical,” so the same strategies apply. When you’re satisfied, move to [Step 2](#design-an-algorithm).\n\n<center><h4>Step 1 Recap</h4></center>\n\n1. Ask clarifying questions.\n\n<a name=\"design-an-algorithm\"></a>\n### Step 2: Design an Algorithm\n\nSpend up to three minutes creating an algorithm. Use the whiteboard to help you visualize the data. During this portion, talk through your thinking process. This reveals how you think and process information to your interviewer. More importantly, this is yet *another* opportunity for them to drop a hint.\n\nIf you cannot come up with a solution, feel free to ask for a hint. Asking will dock you a few points, but not nearly as many as giving up. **Don't give up**. Here's an example of an out-loud thought process solving this problem:\n\n> “If the array isn’t sorted, I can order it first and then loop over the whole thing looking for two consecutive numbers…\n>\n> Or I can create a hash, and insert each number into the hash. When I find an existing key, I can mark that number as a duplicate…\n>\n> I think that’s the best solution.”\n\nGreat! You’ve got a solution. If you needed a hint to get there, that’s okay: half the battle is coding it well. If you still don’t have a solution at this point, let the reviewer know (honesty pays), and continue with the next step.\n\n<center><h4>Step 2 Recap</h4></center>\n\n1. Use three minutes to create an algorithm.\n2. Think out loud.\n3. Ask for a hint if you’re stuck.\n4. If you’ve got nothing, inform your interviewer but move onto the next step.\n\n<a name=\"write-pseudo-code\"></a>\n### Step 3: Write pseudo code\n\nIf you have an algorithm in mind, begin to write [pseudo code](http://users.csc.calpoly.edu/~jdalbey/SWE/pdl_std.html) that implements it; leaving plenty of space on the whiteboard for your actual solution. We suggest pseudo code because it’s a clean way to move the algorithm from your mind to the whiteboard. Using a real language can bog you down with syntactical details and derail your thought process.\n\nInform the interviewer that this is what you intend to do, because they may dock you points for not using a “real” language. Tell them that you will write out your full solution after you complete the pseudo code.\n\nOnce again, think out loud as you work. There’s a chance your thoughts will not translate directly to the whiteboard. If your interviewer is nice, they will point out any discrepancies between what you’re saying, and what you’re *writing*.\n\n> If you reach this point *without* an algorithm in mind, go back to basic control flow. Continue to think out loud and begin by writing something that resembles an answer: loop over the array, or sort it, or another operation that make sense given the input type. Solutions can reveal themselves.\n\n<center><h4>Step 3 Recap</h4></center>\n\n1. Inform interviewer of your intention to use pseudo code first.\n2. Write out the pseudo code and leave space for the final answer.\n3. Think out loud as you write.\n4. If you’re stuck, write *something* and a solution may reveal itself.\n\n<a name=\"code-the-solution\"></a>\n### Step 4: Code the Solution\n\nBefore you code the first line, ask the interviewer if they require accurate syntax. This varies by organization, so it’s not an *obvious* question. If they require it, no sweat; pay extra attention to indentation, brackets, parenthesis, and qualifiers like `end`.\n\nWithout erasing your pseudo code, write the coded solution. Avoid writing frantically; rushing can result in mistakes. Look at your pseudo code line by line, and convert it to its programmatic equivalent. Verbose languages like Ruby have hundreds of classes and thousands of methods, making them difficult to remember. If you forget the name of something, ask your interviewer if you can take a guess; they allow it in most cases.\n\nAs with previous sections, think out loud as you write. Going from pseudo to real code is a deceptively simple step. Given the amount of anxiety introduced by the interview process, mistakes can happen at any time. If that same interviewer continues to act nicely, they will identify your mistakes and call them out.\n\nIf you’ve built a good rapport with the interviewer, encourage them to call out your mistakes: this shows your receptiveness to criticism.\n\n<center><h4>Step 4 Recap</h4></center>\n\n1. Ask if they require accurate syntax.\n2. Diligently convert pseudo code to code line-by-line.\n3. Write out loud.\n\n<a name=\"test-your-code\"></a>\n### Step 5: Test Your Code\n\nEvery cell in your body will scream for mercy after you write the last line. You’ll want to turn to your interviewer, thrust the marker in their face and exclaim, “ah hah!” But please don’t. Instead, take a deep breath, step back from the whiteboard and look at your code line by line.\n\nRun the algorithm out loud using some sample data. In our case, jot down an array with duplicates and imagine your function acting upon it. At each step, update the sample data by hand to keep track of what’s happened. If everything works, you’re *still* not done.\n\nAs people, our bias can express itself in different ways. For example, during a coding interview, we will test using data that favors our algorithm; data that we *know* will work. For the next series of tests, use data that will *break* your algorithm: corner cases, empty input, invalid input, oddball data, etc. Interviewers want to see complete implementations, not ones that would fail a basic unit test.\n\nIf you find that your code fails certain cases, refactor it and run the same tests again.\n\n<center><h4>Step 5 Recap</h4></center>\n\n1. Using sample data, test your algorithm.\n2. Use the whiteboard to track your variables.\n3. Test your algorithm using corner cases.\n4. If you change the algorithm, repeat Step 5.\n\n<a name=\"the-refactor\"></a>\n## The Refactor\n\nIn all likelihood, your interviewer has administered this coding challenge more than once. They’ve seen dozens, possibly hundreds of answers, which means they’ve seen yours, too. After presenting your first solution, they may challenge you to improve it. This can come in the form of questions, some examples include:\n\n> “What if you weren’t allowed to modify the array?”\n>\n> “What if the input size was zero?”\n>\n> “What if you’re not allowed to allocate objects?”\n>\n> “This runs in big-O of n-squared, can we make it faster?”\n\nThe interviewer knows there’s a better solution, and they’re challenging you to come up with it. Embrace the challenge; try to improve your algorithm to serve the interviewer’s specifications. If you have limited time left, *discuss* the alternative solution instead of implementing it; the interviewer doesn’t need to see your coding skills again.\n\n<center><h4>Refactor Recap</h4></center>\n\n1. The interviewer will ask you to improve your solution.\n2. If you have time, refactor your solution.\n3. If you don’t have time, discuss the refactor.\n4. If you don’t know what to do, be up-front about that.\n\n<a name=\"programming-reinforcement\"></a>\n## Programming Reinforcement\n\nThroughout your program, we challenged you to complete Programming Reinforcement checkpoints. These checkpoints included challenges from [Codewars](http://codewars.com) that required you to solve unique coding puzzles. These exercises kept your programming skills fresh and improved your problem solving skills.\n\nTo prepare for coding interviews, we recommend you complete additional challenges on Codewars or similar platforms, like [HackerRank](https://www.hackerrank.com/) and [Pramp](https://www.pramp.com). If you didn’t complete the Programming Reinforcement checkpoints, now is a great time to go back and finish them.\n\n<a name=\"assignment\"></a>",
          "assignment": "- Revisit the Programming Reinforcement checkpoints if you have not completed them.\n- Attempt a new challenge every day on Codewars.\n  - Restrict challenges to Kyu levels of six or lower.\n  - After completing each challenge:\n    - Share your solution with your mentor.\n    - [Refactor](#the-refactor) your own solution to improve it.\n- Optionally, read [Cracking the Coding Interview](http://www.amazon.com/Cracking-Coding-Interview-6th-Edition/dp/0984782850) by Gayle Laakmann McDowell.",
          "roadmap_section_id": 146,
          "active_index": 6,
          "checkpoint_type": "normal",
          "position": 6,
          "points": 1,
          "ref": "f8c4f5f1-3bb8-463b-a70c-84b1d4616413|0"
        },
        {
          "id": 1937,
          "name": "Interview Skills: Modern Interview Methods",
          "summary": "Prepare for a handful of non-traditional interviews",
          "body": "<!-- { ids:[1929,1937], name:\"Interview Skills: Modern Interview Methods\", summary:\"Prepare for a handful of non-traditional interviews\" } -->\nThe standard process for most organizations includes an initial phone screen followed by an onsite interview. While most companies follow this path, others choose to diversify their hiring process with modern qualitative techniques.\n\n- [Pair Programming](#pair-programming)\n- [Take Home Assignments](#take-home-assignments)\n- [Contract Work](#contract-work)\n- [Personality Evaluation](#personality-evaluation)\n- [Assignment](#assignment)\n\n<a name=\"pair-programming\"></a>\n## Pair Programming\n\nThis interview mimics your experience with your Bloc mentor: two programmers working together simultaneously. Interviewers can conduct this pair programming interview remotely or in person, and require you to share your screen with them. The interviewer will give you a project to complete within the hour; so don't expect an enormous task. For example, \"build a Rails app to track teachers, students, and classes.\" Alternatively, they can ask you to clone an existing repository and add a feature to the source code.\n\nThe interviewer wants to see how you work and interact with your peers. This pair programming session will reveal your best qualities: disciplined workflow, your expressive communication, your Rails knowledge, and more. Here's a list of tips that will help you do your best during a pair programming interview:\n\n- **Treat your interviewer like a teammate**<br>Consult with them on design choices, layout, anything and everything.\n- **Refer to the book**<br>Use the Internet if you forget something but feel free to ask your interviewer first.\n- **Take your time**<br>Completing the assignment on time is important but not nearly as much as showing off what you can do.\n- **Be your own narrator**<br>Let the interviewer know what you're going to do before you do it, and take every opportunity to explain why.\n\n<a name=\"take-home-assignments\"></a>\n## Take Home Assignments\n\nLike pair programming interviews, the take home assignment measures how well you work. These assignments are more involved than pair programming sessions, so they will give you anywhere from one hour to two weeks to complete them. The assignments will resemble Bloc projects. They may provide assets, wireframes, and a full set of illustrated user stories to fulfill. For example, \"build an online text editor that allows live collaboration between two users.\"\n\nDue to the complexity of these assignments, you should drop everything you're doing to focus on them. Here are some tips to help you knock these take home assignments out of the park:\n\n- **Do your research**<br>Unless you possess intimate knowledge of the project's tech requirements, don't rush to coding. Research existing solutions and limitations. If the assignment permits the use of any library, look into open-source tools as well.\n- **Document everything**<br>Reading a *rushed* codebase with no comments is grueling work, don't make your interviewers do it. Document your classes and functions by standard practices. As you write your code, look at each line. If you feel the line requires a comment, add one.\n- **Keep your code clean**<br>Stick to DRY principles (*don't repeat yourself*), avoid using global variables if possible, and use proper indentation and whitespace to keep your code legible.\n- **Include a README**<br>As you did with your Bloc projects, include a README in the repository. This README should detail the project and give the reader an overview of its architecture.\n- **Architect a real solution**<br>Due to the time constraint, you may feel that settling with a hacky solution is warranted: you're *wrong*. Interviewers want to see a solid codebase that they can extend immediately, not a product with heaps of [technical debt](https://en.wikipedia.org/wiki/Technical_debt).\n- **Be original**<br>Copying code from a StackOverflow answer is fine, but if you fork a solution from GitHub and make modifications to suit your needs, that's hardly original work. Tools can check for plagiarism in source code and they will run them on your submission.\n- **Be proud**<br>If they ask you open-ended questions about your work, discuss specifics that you're proud of. For example, a complex algorithm you created, a design pattern you chose, or a performance optimization you discovered along the way.\n\n<a name=\"contract-work\"></a>\n## Contract Work\n\nCompanies willing to take the time and spend a little bit of money will pay you for your interview. When compared to other interview types, this one provides the best sample of your work, communication skills, and aptitude. The organization will assign real work to you and pay you for it. Much like the take home assignment, you should dedicate all of your efforts towards this work.\n\nContract work interviews usually end with a follow-up interview where they review your work and ask you new questions. A lot of the same tips from take home assignments apply, but with some modifications:\n\n- **Communicate a lot**<br>They will give you a point of contact within the team, communicate well and often with this person. Ask them questions and follow-up every day with progress updates.\n- **Learn the codebase**<br>You won't learn everything there is to know, but prepare yourself to discuss the codebase from a bird's eye-view.\n- **Follow the team's best practices**<br>If they have documents regarding their workflow, read them and adhere to them. If they have a consistent style to their source code, comments, or commit messages, mimic their style.\n- **Get with the program**<br>This type of interview gives you a glimpse into the company's culture. If they're fun-loving gif blasters like the Bloc team, use gifs too. This helps the team feel like you're part of the company already.\n\n<a name=\"personality-evaluation\"></a>\n## Personality Evaluation\n\nThis interview, otherwise known as [the beer test](https://www.themuse.com/advice/how-to-decide-between-2-awesome-job-candidates), is an attempt to measure cultural fit. Interviewers want to know what kind of person you are and whether they would, \"get a beer with you.\" You can substitute beer with any one-on-one social activity, but the gist of the question remains: would I hang out with this person?\n\nInterviewers take this opportunity to ask you personal questions and get to know you. This is a difficult interview to prepare for, because any sign of preparedness can give off the wrong vibe. But you can use these tactics to bring out the best version of you:\n\n- **Smile**<br>This one's simple, but people overlook it. Unless you're applying for Lead Complainer at Oscar the Grouch & Co., your interviewer wants to meet a happy person. We're not happy all the time, but a natural smile warms the room and puts your interviewer at ease.\n- **Show confidence**<br>Keep strong eye contact, reduce the number of, \"umms,\" in your sentences, apply matching pressure during handshakes, sit up straight, and in general, believe in yourself and what you're doing. Consider giving yourself a [pep talk beforehand](https://www.ted.com/talks/amy_cuddy_your_body_language_shapes_who_you_are?language=en).\n- **Be an open book**<br>Imagine the interviewer asks you, \"what's your favorite memory?\" You can answer this in one sentence with, \"the time I won $8k in Vegas.\" Or, you can paint a vibrant story that captivates your interviewer's attention. You get no bonus points for speed, so treat this interview like a date and give them every reason to like you.\n- **Reveal your passion**<br>When you speak with passion, people can tell; your words permeate the air and leave an impact on the listener. So when you get an opportunity to talk about something you have immense passion toward, take it. The interviewer wants to see a human with a beating, fiery heart.\n- **Ask them questions, too**<br>As you answer these personal questions, you'll feel pretty good. That's because someone is making you the center of attention and they're actively listening to everything you say. Your interview loves that feeling, too. If you reciprocate and make them feel like the center of attention, they won't forget that.\n\n<a name=\"assignment\"></a>",
          "assignment": "> Begin this assignment after blocking off an entire day (24 hours) to work on it.\n\n- Complete one of these Take-Home Assignments:\n\t1. Build a command line calculator that accepts text input, e.g. \"1+4*3-4,\" and prints out the numeric answer. The calculator must support addition, subtraction, multiplication, and division of whole numbers.\n\t2. Build a [Connect Four](https://en.wikipedia.org/wiki/Connect_Four) multiplayer game. The game must print the board after each turn and support two local players.\n\t3. Write a [Slack plugin](https://api.slack.com/community) that tracks how much time each user spends on Slack. Let the user see their usage by typing a keyword, e.g. \"/slacktrack.\"\n- Mark the start time. After 24 hours elapses, stop working on the project regardless of what state it's in.\n\t- Submit the project to your mentor for review.\n\t- Discuss the project during your next meeting.\n\nUse your imagination! We left the requirements purposely vague to test your creativity. And as you may have guessed, bonus features earn bonus points.",
          "roadmap_section_id": 146,
          "active_index": 7,
          "checkpoint_type": "normal",
          "position": 7,
          "points": 1,
          "ref": "73a40f9d-234e-4985-aeb8-7ccb77a027a9|0"
        },
        {
          "id": 1938,
          "name": "The Offer",
          "summary": "Tips to secure the right role for you",
          "body": "<!-- { ids:[1930,1938], name:\"The Offer\", summary:\"Tips to secure the right role for you\" } -->\nWhen you receive your first offer, you reel with excitement. You celebrate that moment and feel pride for everything you've accomplished. But keeping a cool head is just as important as going nuts with celebratory fist-pumps. All job offers come with pros and cons. This checkpoint will help you hang onto your limbs as you navigate the offer minefield.\n\n- [Evaluate the Offer](#evaluate-the-offer)\n\t- [Salary](#variable-salary)\n\t- [Location](#variable-location)\n\t- [Benefits](#variable-benefits)\n\t- [Career Path](#variable-path)\n\t- [Culture](#variable-culture)\n\t- [Calculate the Offer Quality Quotient](#offer-q-q)\n- [Negotiate](#negotiate)\n\t- [Prepare](#prepare)\n\t- [They Present a Contract](#they-present-a-contract)\n\t- [They Make the First Move](#they-make-the-first-move)\n\t- [They Ask You for a Figure](#they-ask-for-a-figure)\n\t- [They Don't Budge](#they-dont-budge)\n\t- [Assignment](#assignment)\n\n<a name=\"evaluate-the-offer\"></a>\n## Evaluate the Offer\n\nEach offer has variables that you must consider before accepting. These variables affect your wealth, career longevity, happiness, and other aspects of your life. As with any big decision, combine all factors to determine the value of each offer. Let's cover the critical factors and [calculate an offer's value](#offer-q-q).\n\n<a name=\"variable-salary\"></a>\n### Salary\n\nPeople usually prioritize salary when evaluating an offer, but we advise you to take everything into consideration. If the position requires relocation, consider how both local and state taxes will affect your take-home pay. And if the offer seems low, it's not always a reflection of you. Compare the offer to the average; research salaries on [JobStar](http://jobstar.org/tools/salary/index.php), [Salary.com](http://salary.com), the [Bureau of Labor Statistics](http://www.bls.gov/ooh/a-z-index.htm), and others.\n\nCompanies also compensate through other means: bonuses, stock options, and more. Factor all of these into the lifetime value of your employment. For example, if you expect to work there for at least one year, calculate your potential bonuses and granted shares and incorporate that into your take home.\n\n<a name=\"variable-location\"></a>\n### Location\n\nIf you love where you live, then the quality of the offer must justify a relocation. Research the cost of living in or around the destination city. If you're willing to commute, look for housing in suburban areas and research the cost of living there as well. Most companies offer a relocation bonus, compare it to your expected rent and security deposit.\n\n<a name=\"variable-benefits\"></a>\n### Benefits\n\nA lower salary with a host of perks fares well against a high salary with no benefits. For example, 401k matching, health insurance, free food, commute compensation, open vacation policy, working from home, and more should factor into your decision. Factor any benefit that reduces your expenses into your take-home pay.\n\n<a name=\"variable-path\"></a>\n### Career Path\n\nIf you like the company and imagine working there for several years, ask about growth potential. If they have a clear path to senior positions and salary increases, factor that into your decision. Some organizations are so small that moving up the ladder is tricky, but larger ones streamline this process.\n\n<a name=\"variable-culture\"></a>\n### Culture\n\nYour compatibility with the company's culture will play a huge role in your satisfaction. The best way to verify a good match is to speak with the people you will work with and ask them specific questions regarding their workplace. Ask how they feel about their managers, and if their managers welcome honest and open communication.\n\nAsk about diversity and whether minorities hold leadership positions. A monoculture can lead to corporate environments unaware of their own bias. Also ask about company gatherings and how executives treat employees.\n\nThere's no limit to the questions you can ask, but keep them open-ended to give the employees an opportunity to go on tangents and offer anecdotes.\n\n<a name=\"offer-q-q\"></a>\n### Calculate the Offer Quality Quotient\n\nTo quantify and compare the value of every opportunity, calculate the OQQ, or Offer Quality Quotient — something we made up. To calculate the OQQ, give each factor a score from 1 to 10, 10 being the best possible. Give each factor a level of importance: 0 being the least important, 10 being the most — these must add up to 10. For example:\n\n| Factor | Score | Importance |\n| :-- | :-- | :-- |\n| Salary | 8 | 6 |\n| Location | 3 | 2 |\n| Benefits | 6 | 0 |\n| Career Path | 8 | 1 |\n| Culture | 10 | 1 |\n\nMultiply each factor's score with its importance, as a percentage, and add the results together. To calculate the OQQ of this offer, we do the following:\n\n> (8 x .6) + (3 x .2) + (6 x 0) + (8 x .1) + (10 x .1) = **7.2**\n\nBy this math, you know that the highest possible score is 10. Use the OQQ to do quick comparisons when choosing between offers. Ultimately, if the numbers don't seem to line up with your gut, trust your instincts instead.\n\n<a name=\"negotiate\"></a>\n## Negotiate\n\nIn all cases besides internships, an element of negotiation can come into play. In this scenario and in most cases, the employer acts as the salesperson. They offer something of limited quantity, job opportunities, to a swathe of customers, applicants. Before entering any negotiation, prepare yourself for it.\n\n<a name=\"prepare\"></a>\n### Prepare\n\nResearch the position you are applying for. Specifically, find the average starting salary for that role in your destination city. If the job is remote, look for the national average. This number gives you an idea of what's fair and the approximate maximum you should reach for.\n\nIf compensation is your primary concern, bring another offer with you to each negotiation; aim to receive multiple offers at once. With an offer in your back pocket, you walk in with concrete leverage that you can use during negotiations.\n\nSpeaking of negotiations, they can start in a number of ways. Let's look at some.\n\n<a name=\"they-present-a-contract\"></a>\n### They Present a Contract\n\nSome employers plop down a big stack of papers right in front of you as if to say, \"this is the one and only deal we offer, take it or leave it.\" They may deliver this contract casually (in email) to brush past the fact that it dictates your salary and benefits. The contract may even have a cute title like, \"Welcome to the Family!\"\n\nAsk to discuss the terms of the contract and follow the [steps below](#they-make-the-first-move). If that's their only offer, keep pressing to speak with someone. If they continue to deny you, consider the offer as-is and again, ask for a few days to think about it and contact Student Outcomes.\n\n<a name=\"they-make-the-first-move\"></a>\n### They Make the First Move\n\nThe first move is the first figure, and if they present one then they've made the first move. In your excitement, you may err toward caution and accept this instantly: that is unnecessary. Evaluate this number and whether it reflects your experience and your needs. Statistically speaking, the final deal will resemble the first figure, but don't let that deter you.\n\nIf the number is insulting or just shy of what you expect, remain calm. The person that loses their cool also loses control of the negotiation. Let this first figure linger in the air and avoid saying anything. A moment spent here will feel like an eternity, but hold on tight. One of two things is likely to occur:\n\n1. You break and present a counter-offer.\n2. They break and ask you a question or present a new offer.\n\nIn the first case, the negotiator will likely rebuff you and stick with their initial offer. They gained the higher ground when you spoke first. And in the second case, if you hear an offer you're willing to accept, ask for a few days to think it over and contact Student Outcomes.\n\nOtherwise, hold out again or present a counter-offer with the exact amount you want, e.g. $73,000, then wait patiently. If they refuse to acquiesce, proceed to [the next step](#they-dont-budge).\n\n<a name=\"they-ask-for-a-figure\"></a>\n### They Ask You for a Figure\n\nIf you agree with statistics, the initial figure will resemble the final offer. When they give you this opportunity, aim slightly above your target, e.g. $70,000. Don't give them a ballpark figure or a range: they will focus toward the bottom of it. Once you've presented the number you want, buckle down and say nothing.\n\nIf the negotiator dismisses the number in any way, just sit there and remain calm. Don't say anything, don't flinch, don't laugh, merely live in that moment and wait for them to speak. Continue to hold out until they offer you a number you approve of. If they don't reach that number, move to [the next step](#they-dont-budge).\n\n<a name=\"they-dont-budge\"></a>\n### They Don't Budge\n\nIf negotiations stall at a salary that you find less-than-satisfactory, try one of the following tactics.\n\n- **Hold firm**<br>One option, and the simplest, is to do nothing. Thank them for their time and go home. Given the right circumstances, they may reconsider your offer overnight and continue negotiations the next day. Always send a follow-up email thanking them for their time and consideration.\n- **Discuss benefits**<br>They can't offer you the salary you want, but what about benefits? They are not likely to come up with these, so you must surface them as possibilities. Ask about working from home, extra vacation, free food, commute reimbursements, and anything else that may sway you.\n- **Reduce benefits**<br>If salary is critical, discuss a reduction or complete withdrawal of benefits to beef up the figure.\n\n<a name=\"assignment\"></a>",
          "assignment": "**Do not accept a job offer before speaking with Student Outcomes.**\n\n- Determine what salary range you want and discuss it with your mentor.\n- Figure out which fringe benefits matter the most to you: health insurance, free food, travel compensation, working from home, etc.\n- [Practice negotiating](http://www.johncurtis.ca/negotiation/4-ways-to-practice-your-negotiating-skills/).\n\t- Negotiate prices at flea markets.\n\t- Role play and negotiate with friends or your spouse.\n\t- Play board games that require negotiation like Risk, Diplomacy, and Settlers of Catan.",
          "roadmap_section_id": 146,
          "active_index": 8,
          "checkpoint_type": "normal",
          "position": 8,
          "points": 1,
          "ref": "a156e989-8431-4ec9-9580-e49f9ee3f002|0"
        }
      ]
    }
  ]
}